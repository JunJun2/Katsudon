
SympleCentral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f8  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  9 .bss          0000013c  20000070  20000070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001ac  200001ac  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a70  00000000  00000000  0003e68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d21f  00000000  00000000  000420fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b00  00000000  00000000  0004f320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b80  00000000  00000000  0004fe20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000857e  00000000  00000000  000519a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004e00  00000000  00000000  00059f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0005ed1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  0005ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003edc 	.word	0x08003edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003edc 	.word	0x08003edc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <selfrel_offset31>:
 8000270:	6803      	ldr	r3, [r0, #0]
 8000272:	005a      	lsls	r2, r3, #1
 8000274:	bf4c      	ite	mi
 8000276:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800027a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800027e:	4418      	add	r0, r3
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <search_EIT_table>:
 8000284:	b361      	cbz	r1, 80002e0 <search_EIT_table+0x5c>
 8000286:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800028a:	f101 3aff 	add.w	sl, r1, #4294967295
 800028e:	4690      	mov	r8, r2
 8000290:	4606      	mov	r6, r0
 8000292:	46d1      	mov	r9, sl
 8000294:	2700      	movs	r7, #0
 8000296:	eb07 0409 	add.w	r4, r7, r9
 800029a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800029e:	1064      	asrs	r4, r4, #1
 80002a0:	00e5      	lsls	r5, r4, #3
 80002a2:	1971      	adds	r1, r6, r5
 80002a4:	4608      	mov	r0, r1
 80002a6:	f7ff ffe3 	bl	8000270 <selfrel_offset31>
 80002aa:	45a2      	cmp	sl, r4
 80002ac:	4683      	mov	fp, r0
 80002ae:	f105 0008 	add.w	r0, r5, #8
 80002b2:	4430      	add	r0, r6
 80002b4:	d009      	beq.n	80002ca <search_EIT_table+0x46>
 80002b6:	f7ff ffdb 	bl	8000270 <selfrel_offset31>
 80002ba:	45c3      	cmp	fp, r8
 80002bc:	f100 30ff 	add.w	r0, r0, #4294967295
 80002c0:	d805      	bhi.n	80002ce <search_EIT_table+0x4a>
 80002c2:	4540      	cmp	r0, r8
 80002c4:	d209      	bcs.n	80002da <search_EIT_table+0x56>
 80002c6:	1c67      	adds	r7, r4, #1
 80002c8:	e7e5      	b.n	8000296 <search_EIT_table+0x12>
 80002ca:	45c3      	cmp	fp, r8
 80002cc:	d905      	bls.n	80002da <search_EIT_table+0x56>
 80002ce:	42a7      	cmp	r7, r4
 80002d0:	d002      	beq.n	80002d8 <search_EIT_table+0x54>
 80002d2:	f104 39ff 	add.w	r9, r4, #4294967295
 80002d6:	e7de      	b.n	8000296 <search_EIT_table+0x12>
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002e0:	4608      	mov	r0, r1
 80002e2:	4770      	bx	lr

080002e4 <__gnu_unwind_get_pr_addr>:
 80002e4:	2801      	cmp	r0, #1
 80002e6:	d007      	beq.n	80002f8 <__gnu_unwind_get_pr_addr+0x14>
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d007      	beq.n	80002fc <__gnu_unwind_get_pr_addr+0x18>
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <__gnu_unwind_get_pr_addr+0x1c>)
 80002ee:	2800      	cmp	r0, #0
 80002f0:	bf0c      	ite	eq
 80002f2:	4618      	moveq	r0, r3
 80002f4:	2000      	movne	r0, #0
 80002f6:	4770      	bx	lr
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <__gnu_unwind_get_pr_addr+0x20>)
 80002fa:	4770      	bx	lr
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <__gnu_unwind_get_pr_addr+0x24>)
 80002fe:	4770      	bx	lr
 8000300:	080009e9 	.word	0x080009e9
 8000304:	080009ed 	.word	0x080009ed
 8000308:	080009f1 	.word	0x080009f1

0800030c <get_eit_entry>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <get_eit_entry+0x94>)
 8000310:	b083      	sub	sp, #12
 8000312:	4604      	mov	r4, r0
 8000314:	1e8d      	subs	r5, r1, #2
 8000316:	b37b      	cbz	r3, 8000378 <get_eit_entry+0x6c>
 8000318:	a901      	add	r1, sp, #4
 800031a:	4628      	mov	r0, r5
 800031c:	f3af 8000 	nop.w
 8000320:	b320      	cbz	r0, 800036c <get_eit_entry+0x60>
 8000322:	9901      	ldr	r1, [sp, #4]
 8000324:	462a      	mov	r2, r5
 8000326:	f7ff ffad 	bl	8000284 <search_EIT_table>
 800032a:	4601      	mov	r1, r0
 800032c:	b1f0      	cbz	r0, 800036c <get_eit_entry+0x60>
 800032e:	f7ff ff9f 	bl	8000270 <selfrel_offset31>
 8000332:	684b      	ldr	r3, [r1, #4]
 8000334:	64a0      	str	r0, [r4, #72]	; 0x48
 8000336:	2b01      	cmp	r3, #1
 8000338:	d012      	beq.n	8000360 <get_eit_entry+0x54>
 800033a:	2b00      	cmp	r3, #0
 800033c:	f101 0004 	add.w	r0, r1, #4
 8000340:	db20      	blt.n	8000384 <get_eit_entry+0x78>
 8000342:	f7ff ff95 	bl	8000270 <selfrel_offset31>
 8000346:	2300      	movs	r3, #0
 8000348:	64e0      	str	r0, [r4, #76]	; 0x4c
 800034a:	6523      	str	r3, [r4, #80]	; 0x50
 800034c:	6803      	ldr	r3, [r0, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	db1c      	blt.n	800038c <get_eit_entry+0x80>
 8000352:	f7ff ff8d 	bl	8000270 <selfrel_offset31>
 8000356:	2300      	movs	r3, #0
 8000358:	6120      	str	r0, [r4, #16]
 800035a:	4618      	mov	r0, r3
 800035c:	b003      	add	sp, #12
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	2300      	movs	r3, #0
 8000362:	6123      	str	r3, [r4, #16]
 8000364:	2305      	movs	r3, #5
 8000366:	4618      	mov	r0, r3
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	2300      	movs	r3, #0
 800036e:	6123      	str	r3, [r4, #16]
 8000370:	2309      	movs	r3, #9
 8000372:	4618      	mov	r0, r3
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	490a      	ldr	r1, [pc, #40]	; (80003a4 <get_eit_entry+0x98>)
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <get_eit_entry+0x9c>)
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	10c9      	asrs	r1, r1, #3
 8000380:	9101      	str	r1, [sp, #4]
 8000382:	e7cf      	b.n	8000324 <get_eit_entry+0x18>
 8000384:	2301      	movs	r3, #1
 8000386:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000388:	6523      	str	r3, [r4, #80]	; 0x50
 800038a:	e7df      	b.n	800034c <get_eit_entry+0x40>
 800038c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000390:	f7ff ffa8 	bl	80002e4 <__gnu_unwind_get_pr_addr>
 8000394:	2800      	cmp	r0, #0
 8000396:	6120      	str	r0, [r4, #16]
 8000398:	bf14      	ite	ne
 800039a:	2300      	movne	r3, #0
 800039c:	2309      	moveq	r3, #9
 800039e:	e7dc      	b.n	800035a <get_eit_entry+0x4e>
 80003a0:	00000000 	.word	0x00000000
 80003a4:	0800416c 	.word	0x0800416c
 80003a8:	08004074 	.word	0x08004074

080003ac <restore_non_core_regs>:
 80003ac:	6803      	ldr	r3, [r0, #0]
 80003ae:	07da      	lsls	r2, r3, #31
 80003b0:	b510      	push	{r4, lr}
 80003b2:	4604      	mov	r4, r0
 80003b4:	d406      	bmi.n	80003c4 <restore_non_core_regs+0x18>
 80003b6:	079b      	lsls	r3, r3, #30
 80003b8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80003bc:	d509      	bpl.n	80003d2 <restore_non_core_regs+0x26>
 80003be:	f000 fc51 	bl	8000c64 <__gnu_Unwind_Restore_VFP_D>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	0759      	lsls	r1, r3, #29
 80003c6:	d509      	bpl.n	80003dc <restore_non_core_regs+0x30>
 80003c8:	071a      	lsls	r2, r3, #28
 80003ca:	d50e      	bpl.n	80003ea <restore_non_core_regs+0x3e>
 80003cc:	06db      	lsls	r3, r3, #27
 80003ce:	d513      	bpl.n	80003f8 <restore_non_core_regs+0x4c>
 80003d0:	bd10      	pop	{r4, pc}
 80003d2:	f000 fc3f 	bl	8000c54 <__gnu_Unwind_Restore_VFP>
 80003d6:	6823      	ldr	r3, [r4, #0]
 80003d8:	0759      	lsls	r1, r3, #29
 80003da:	d4f5      	bmi.n	80003c8 <restore_non_core_regs+0x1c>
 80003dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003e0:	f000 fc48 	bl	8000c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003e4:	6823      	ldr	r3, [r4, #0]
 80003e6:	071a      	lsls	r2, r3, #28
 80003e8:	d4f0      	bmi.n	80003cc <restore_non_core_regs+0x20>
 80003ea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003ee:	f000 fc49 	bl	8000c84 <__gnu_Unwind_Restore_WMMXD>
 80003f2:	6823      	ldr	r3, [r4, #0]
 80003f4:	06db      	lsls	r3, r3, #27
 80003f6:	d4eb      	bmi.n	80003d0 <restore_non_core_regs+0x24>
 80003f8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000400:	f000 bc84 	b.w	8000d0c <__gnu_Unwind_Restore_WMMXC>

08000404 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000404:	6803      	ldr	r3, [r0, #0]
 8000406:	b103      	cbz	r3, 800040a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000408:	4403      	add	r3, r0
 800040a:	4618      	mov	r0, r3
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <__gnu_unwind_24bit.isra.1>:
 8000410:	2009      	movs	r0, #9
 8000412:	4770      	bx	lr

08000414 <_Unwind_DebugHook>:
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop

08000418 <unwind_phase2>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4604      	mov	r4, r0
 800041c:	460d      	mov	r5, r1
 800041e:	e008      	b.n	8000432 <unwind_phase2+0x1a>
 8000420:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000422:	6163      	str	r3, [r4, #20]
 8000424:	462a      	mov	r2, r5
 8000426:	6923      	ldr	r3, [r4, #16]
 8000428:	4621      	mov	r1, r4
 800042a:	2001      	movs	r0, #1
 800042c:	4798      	blx	r3
 800042e:	2808      	cmp	r0, #8
 8000430:	d108      	bne.n	8000444 <unwind_phase2+0x2c>
 8000432:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000434:	4620      	mov	r0, r4
 8000436:	f7ff ff69 	bl	800030c <get_eit_entry>
 800043a:	4606      	mov	r6, r0
 800043c:	2800      	cmp	r0, #0
 800043e:	d0ef      	beq.n	8000420 <unwind_phase2+0x8>
 8000440:	f003 fd00 	bl	8003e44 <abort>
 8000444:	2807      	cmp	r0, #7
 8000446:	d1fb      	bne.n	8000440 <unwind_phase2+0x28>
 8000448:	4630      	mov	r0, r6
 800044a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800044c:	f7ff ffe2 	bl	8000414 <_Unwind_DebugHook>
 8000450:	1d28      	adds	r0, r5, #4
 8000452:	f000 fbf3 	bl	8000c3c <__restore_core_regs>
 8000456:	bf00      	nop

08000458 <unwind_phase2_forced>:
 8000458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800045c:	1d0c      	adds	r4, r1, #4
 800045e:	4605      	mov	r5, r0
 8000460:	4692      	mov	sl, r2
 8000462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000464:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000468:	ae03      	add	r6, sp, #12
 800046a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800046c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800046e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000472:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000474:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000478:	ac02      	add	r4, sp, #8
 800047a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800047e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000482:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000486:	2300      	movs	r3, #0
 8000488:	4628      	mov	r0, r5
 800048a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800048c:	6023      	str	r3, [r4, #0]
 800048e:	f7ff ff3d 	bl	800030c <get_eit_entry>
 8000492:	f1ba 0f00 	cmp.w	sl, #0
 8000496:	4607      	mov	r7, r0
 8000498:	bf14      	ite	ne
 800049a:	260a      	movne	r6, #10
 800049c:	2609      	moveq	r6, #9
 800049e:	b17f      	cbz	r7, 80004c0 <unwind_phase2_forced+0x68>
 80004a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80004a2:	f046 0110 	orr.w	r1, r6, #16
 80004a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80004aa:	462a      	mov	r2, r5
 80004ac:	6463      	str	r3, [r4, #68]	; 0x44
 80004ae:	2001      	movs	r0, #1
 80004b0:	462b      	mov	r3, r5
 80004b2:	47c0      	blx	r8
 80004b4:	bb78      	cbnz	r0, 8000516 <unwind_phase2_forced+0xbe>
 80004b6:	4638      	mov	r0, r7
 80004b8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004c2:	616b      	str	r3, [r5, #20]
 80004c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004c8:	4621      	mov	r1, r4
 80004ca:	a87a      	add	r0, sp, #488	; 0x1e8
 80004cc:	f003 fc2a 	bl	8003d24 <memcpy>
 80004d0:	692b      	ldr	r3, [r5, #16]
 80004d2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80004d4:	4629      	mov	r1, r5
 80004d6:	4630      	mov	r0, r6
 80004d8:	4798      	blx	r3
 80004da:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80004dc:	4682      	mov	sl, r0
 80004de:	e88d 0210 	stmia.w	sp, {r4, r9}
 80004e2:	4631      	mov	r1, r6
 80004e4:	6463      	str	r3, [r4, #68]	; 0x44
 80004e6:	462a      	mov	r2, r5
 80004e8:	462b      	mov	r3, r5
 80004ea:	2001      	movs	r0, #1
 80004ec:	47c0      	blx	r8
 80004ee:	b990      	cbnz	r0, 8000516 <unwind_phase2_forced+0xbe>
 80004f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004f4:	a97a      	add	r1, sp, #488	; 0x1e8
 80004f6:	4620      	mov	r0, r4
 80004f8:	f003 fc14 	bl	8003d24 <memcpy>
 80004fc:	f1ba 0f08 	cmp.w	sl, #8
 8000500:	d106      	bne.n	8000510 <unwind_phase2_forced+0xb8>
 8000502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000504:	4628      	mov	r0, r5
 8000506:	f7ff ff01 	bl	800030c <get_eit_entry>
 800050a:	2609      	movs	r6, #9
 800050c:	4607      	mov	r7, r0
 800050e:	e7c6      	b.n	800049e <unwind_phase2_forced+0x46>
 8000510:	f1ba 0f07 	cmp.w	sl, #7
 8000514:	d005      	beq.n	8000522 <unwind_phase2_forced+0xca>
 8000516:	2709      	movs	r7, #9
 8000518:	4638      	mov	r0, r7
 800051a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	4638      	mov	r0, r7
 8000524:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000526:	f7ff ff75 	bl	8000414 <_Unwind_DebugHook>
 800052a:	a803      	add	r0, sp, #12
 800052c:	f000 fb86 	bl	8000c3c <__restore_core_regs>

08000530 <_Unwind_GetCFA>:
 8000530:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000532:	4770      	bx	lr

08000534 <__gnu_Unwind_RaiseException>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000538:	640b      	str	r3, [r1, #64]	; 0x40
 800053a:	1d0e      	adds	r6, r1, #4
 800053c:	460f      	mov	r7, r1
 800053e:	4604      	mov	r4, r0
 8000540:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000542:	b0f9      	sub	sp, #484	; 0x1e4
 8000544:	ad01      	add	r5, sp, #4
 8000546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000548:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800054a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800054c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800054e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000550:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000554:	f04f 36ff 	mov.w	r6, #4294967295
 8000558:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800055c:	9600      	str	r6, [sp, #0]
 800055e:	e006      	b.n	800056e <__gnu_Unwind_RaiseException+0x3a>
 8000560:	6923      	ldr	r3, [r4, #16]
 8000562:	466a      	mov	r2, sp
 8000564:	4621      	mov	r1, r4
 8000566:	4798      	blx	r3
 8000568:	2808      	cmp	r0, #8
 800056a:	4605      	mov	r5, r0
 800056c:	d108      	bne.n	8000580 <__gnu_Unwind_RaiseException+0x4c>
 800056e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000570:	4620      	mov	r0, r4
 8000572:	f7ff fecb 	bl	800030c <get_eit_entry>
 8000576:	2800      	cmp	r0, #0
 8000578:	d0f2      	beq.n	8000560 <__gnu_Unwind_RaiseException+0x2c>
 800057a:	2009      	movs	r0, #9
 800057c:	b079      	add	sp, #484	; 0x1e4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4668      	mov	r0, sp
 8000582:	f7ff ff13 	bl	80003ac <restore_non_core_regs>
 8000586:	2d06      	cmp	r5, #6
 8000588:	d1f7      	bne.n	800057a <__gnu_Unwind_RaiseException+0x46>
 800058a:	4639      	mov	r1, r7
 800058c:	4620      	mov	r0, r4
 800058e:	f7ff ff43 	bl	8000418 <unwind_phase2>
 8000592:	bf00      	nop

08000594 <__gnu_Unwind_ForcedUnwind>:
 8000594:	b430      	push	{r4, r5}
 8000596:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000598:	60c1      	str	r1, [r0, #12]
 800059a:	6182      	str	r2, [r0, #24]
 800059c:	4619      	mov	r1, r3
 800059e:	641d      	str	r5, [r3, #64]	; 0x40
 80005a0:	2200      	movs	r2, #0
 80005a2:	bc30      	pop	{r4, r5}
 80005a4:	e758      	b.n	8000458 <unwind_phase2_forced>
 80005a6:	bf00      	nop

080005a8 <__gnu_Unwind_Resume>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	68c6      	ldr	r6, [r0, #12]
 80005ac:	6943      	ldr	r3, [r0, #20]
 80005ae:	640b      	str	r3, [r1, #64]	; 0x40
 80005b0:	b126      	cbz	r6, 80005bc <__gnu_Unwind_Resume+0x14>
 80005b2:	2201      	movs	r2, #1
 80005b4:	f7ff ff50 	bl	8000458 <unwind_phase2_forced>
 80005b8:	f003 fc44 	bl	8003e44 <abort>
 80005bc:	6903      	ldr	r3, [r0, #16]
 80005be:	460a      	mov	r2, r1
 80005c0:	4604      	mov	r4, r0
 80005c2:	460d      	mov	r5, r1
 80005c4:	4601      	mov	r1, r0
 80005c6:	2002      	movs	r0, #2
 80005c8:	4798      	blx	r3
 80005ca:	2807      	cmp	r0, #7
 80005cc:	d007      	beq.n	80005de <__gnu_Unwind_Resume+0x36>
 80005ce:	2808      	cmp	r0, #8
 80005d0:	d103      	bne.n	80005da <__gnu_Unwind_Resume+0x32>
 80005d2:	4629      	mov	r1, r5
 80005d4:	4620      	mov	r0, r4
 80005d6:	f7ff ff1f 	bl	8000418 <unwind_phase2>
 80005da:	f003 fc33 	bl	8003e44 <abort>
 80005de:	4630      	mov	r0, r6
 80005e0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005e2:	f7ff ff17 	bl	8000414 <_Unwind_DebugHook>
 80005e6:	1d28      	adds	r0, r5, #4
 80005e8:	f000 fb28 	bl	8000c3c <__restore_core_regs>

080005ec <__gnu_Unwind_Resume_or_Rethrow>:
 80005ec:	68c2      	ldr	r2, [r0, #12]
 80005ee:	b11a      	cbz	r2, 80005f8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80005f0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80005f2:	640a      	str	r2, [r1, #64]	; 0x40
 80005f4:	2200      	movs	r2, #0
 80005f6:	e72f      	b.n	8000458 <unwind_phase2_forced>
 80005f8:	e79c      	b.n	8000534 <__gnu_Unwind_RaiseException>
 80005fa:	bf00      	nop

080005fc <_Unwind_Complete>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <_Unwind_DeleteException>:
 8000600:	6883      	ldr	r3, [r0, #8]
 8000602:	b113      	cbz	r3, 800060a <_Unwind_DeleteException+0xa>
 8000604:	4601      	mov	r1, r0
 8000606:	2001      	movs	r0, #1
 8000608:	4718      	bx	r3
 800060a:	4770      	bx	lr

0800060c <_Unwind_VRS_Get>:
 800060c:	b500      	push	{lr}
 800060e:	2904      	cmp	r1, #4
 8000610:	d807      	bhi.n	8000622 <_Unwind_VRS_Get+0x16>
 8000612:	e8df f001 	tbb	[pc, r1]
 8000616:	0903      	.short	0x0903
 8000618:	0906      	.short	0x0906
 800061a:	09          	.byte	0x09
 800061b:	00          	.byte	0x00
 800061c:	b90b      	cbnz	r3, 8000622 <_Unwind_VRS_Get+0x16>
 800061e:	2a0f      	cmp	r2, #15
 8000620:	d905      	bls.n	800062e <_Unwind_VRS_Get+0x22>
 8000622:	2002      	movs	r0, #2
 8000624:	f85d fb04 	ldr.w	pc, [sp], #4
 8000628:	2001      	movs	r0, #1
 800062a:	f85d fb04 	ldr.w	pc, [sp], #4
 800062e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000632:	4618      	mov	r0, r3
 8000634:	6853      	ldr	r3, [r2, #4]
 8000636:	9a01      	ldr	r2, [sp, #4]
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	f85d fb04 	ldr.w	pc, [sp], #4
 800063e:	bf00      	nop

08000640 <_Unwind_GetGR>:
 8000640:	b510      	push	{r4, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	2300      	movs	r3, #0
 8000646:	ac03      	add	r4, sp, #12
 8000648:	460a      	mov	r2, r1
 800064a:	9400      	str	r4, [sp, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f7ff ffdd 	bl	800060c <_Unwind_VRS_Get>
 8000652:	9803      	ldr	r0, [sp, #12]
 8000654:	b004      	add	sp, #16
 8000656:	bd10      	pop	{r4, pc}

08000658 <_Unwind_VRS_Set>:
 8000658:	b500      	push	{lr}
 800065a:	2904      	cmp	r1, #4
 800065c:	d807      	bhi.n	800066e <_Unwind_VRS_Set+0x16>
 800065e:	e8df f001 	tbb	[pc, r1]
 8000662:	0903      	.short	0x0903
 8000664:	0906      	.short	0x0906
 8000666:	09          	.byte	0x09
 8000667:	00          	.byte	0x00
 8000668:	b90b      	cbnz	r3, 800066e <_Unwind_VRS_Set+0x16>
 800066a:	2a0f      	cmp	r2, #15
 800066c:	d905      	bls.n	800067a <_Unwind_VRS_Set+0x22>
 800066e:	2002      	movs	r0, #2
 8000670:	f85d fb04 	ldr.w	pc, [sp], #4
 8000674:	2001      	movs	r0, #1
 8000676:	f85d fb04 	ldr.w	pc, [sp], #4
 800067a:	9901      	ldr	r1, [sp, #4]
 800067c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000680:	6809      	ldr	r1, [r1, #0]
 8000682:	6051      	str	r1, [r2, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	f85d fb04 	ldr.w	pc, [sp], #4
 800068a:	bf00      	nop

0800068c <_Unwind_SetGR>:
 800068c:	b510      	push	{r4, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	ac04      	add	r4, sp, #16
 8000692:	2300      	movs	r3, #0
 8000694:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000698:	460a      	mov	r2, r1
 800069a:	9400      	str	r4, [sp, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f7ff ffdb 	bl	8000658 <_Unwind_VRS_Set>
 80006a2:	b004      	add	sp, #16
 80006a4:	bd10      	pop	{r4, pc}
 80006a6:	bf00      	nop

080006a8 <__gnu_Unwind_Backtrace>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	1d15      	adds	r5, r2, #4
 80006b0:	4607      	mov	r7, r0
 80006b2:	460e      	mov	r6, r1
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80006ba:	ac17      	add	r4, sp, #92	; 0x5c
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ca:	f04f 35ff 	mov.w	r5, #4294967295
 80006ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80006d2:	9516      	str	r5, [sp, #88]	; 0x58
 80006d4:	e010      	b.n	80006f8 <__gnu_Unwind_Backtrace+0x50>
 80006d6:	a816      	add	r0, sp, #88	; 0x58
 80006d8:	f7ff ffd8 	bl	800068c <_Unwind_SetGR>
 80006dc:	4631      	mov	r1, r6
 80006de:	a816      	add	r0, sp, #88	; 0x58
 80006e0:	47b8      	blx	r7
 80006e2:	aa16      	add	r2, sp, #88	; 0x58
 80006e4:	4669      	mov	r1, sp
 80006e6:	b978      	cbnz	r0, 8000708 <__gnu_Unwind_Backtrace+0x60>
 80006e8:	9b04      	ldr	r3, [sp, #16]
 80006ea:	2008      	movs	r0, #8
 80006ec:	4798      	blx	r3
 80006ee:	2805      	cmp	r0, #5
 80006f0:	4604      	mov	r4, r0
 80006f2:	d00a      	beq.n	800070a <__gnu_Unwind_Backtrace+0x62>
 80006f4:	2809      	cmp	r0, #9
 80006f6:	d007      	beq.n	8000708 <__gnu_Unwind_Backtrace+0x60>
 80006f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006fa:	4668      	mov	r0, sp
 80006fc:	f7ff fe06 	bl	800030c <get_eit_entry>
 8000700:	466a      	mov	r2, sp
 8000702:	210c      	movs	r1, #12
 8000704:	2800      	cmp	r0, #0
 8000706:	d0e6      	beq.n	80006d6 <__gnu_Unwind_Backtrace+0x2e>
 8000708:	2409      	movs	r4, #9
 800070a:	a816      	add	r0, sp, #88	; 0x58
 800070c:	f7ff fe4e 	bl	80003ac <restore_non_core_regs>
 8000710:	4620      	mov	r0, r4
 8000712:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000718 <__gnu_unwind_pr_common>:
 8000718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800071c:	460d      	mov	r5, r1
 800071e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000720:	b08b      	sub	sp, #44	; 0x2c
 8000722:	1d0c      	adds	r4, r1, #4
 8000724:	6809      	ldr	r1, [r1, #0]
 8000726:	9107      	str	r1, [sp, #28]
 8000728:	4691      	mov	r9, r2
 800072a:	9408      	str	r4, [sp, #32]
 800072c:	f000 0b03 	and.w	fp, r0, #3
 8000730:	461e      	mov	r6, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d160      	bne.n	80007f8 <__gnu_unwind_pr_common+0xe0>
 8000736:	0209      	lsls	r1, r1, #8
 8000738:	2303      	movs	r3, #3
 800073a:	9107      	str	r1, [sp, #28]
 800073c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000740:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000744:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000746:	f1bb 0f02 	cmp.w	fp, #2
 800074a:	bf08      	it	eq
 800074c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800074e:	f013 0301 	ands.w	r3, r3, #1
 8000752:	d140      	bne.n	80007d6 <__gnu_unwind_pr_common+0xbe>
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	f000 0308 	and.w	r3, r0, #8
 800075a:	9303      	str	r3, [sp, #12]
 800075c:	f8d4 8000 	ldr.w	r8, [r4]
 8000760:	f1b8 0f00 	cmp.w	r8, #0
 8000764:	d039      	beq.n	80007da <__gnu_unwind_pr_common+0xc2>
 8000766:	2e02      	cmp	r6, #2
 8000768:	d043      	beq.n	80007f2 <__gnu_unwind_pr_common+0xda>
 800076a:	f8b4 8000 	ldrh.w	r8, [r4]
 800076e:	8867      	ldrh	r7, [r4, #2]
 8000770:	3404      	adds	r4, #4
 8000772:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000774:	f027 0a01 	bic.w	sl, r7, #1
 8000778:	210f      	movs	r1, #15
 800077a:	4648      	mov	r0, r9
 800077c:	449a      	add	sl, r3
 800077e:	f7ff ff5f 	bl	8000640 <_Unwind_GetGR>
 8000782:	4582      	cmp	sl, r0
 8000784:	d833      	bhi.n	80007ee <__gnu_unwind_pr_common+0xd6>
 8000786:	f028 0301 	bic.w	r3, r8, #1
 800078a:	449a      	add	sl, r3
 800078c:	4550      	cmp	r0, sl
 800078e:	bf2c      	ite	cs
 8000790:	2000      	movcs	r0, #0
 8000792:	2001      	movcc	r0, #1
 8000794:	007f      	lsls	r7, r7, #1
 8000796:	f007 0702 	and.w	r7, r7, #2
 800079a:	f008 0801 	and.w	r8, r8, #1
 800079e:	ea47 0708 	orr.w	r7, r7, r8
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	d03e      	beq.n	8000824 <__gnu_unwind_pr_common+0x10c>
 80007a6:	d335      	bcc.n	8000814 <__gnu_unwind_pr_common+0xfc>
 80007a8:	2f02      	cmp	r7, #2
 80007aa:	d11c      	bne.n	80007e6 <__gnu_unwind_pr_common+0xce>
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007b2:	9202      	str	r2, [sp, #8]
 80007b4:	f1bb 0f00 	cmp.w	fp, #0
 80007b8:	d176      	bne.n	80008a8 <__gnu_unwind_pr_common+0x190>
 80007ba:	b128      	cbz	r0, 80007c8 <__gnu_unwind_pr_common+0xb0>
 80007bc:	9903      	ldr	r1, [sp, #12]
 80007be:	2900      	cmp	r1, #0
 80007c0:	d07e      	beq.n	80008c0 <__gnu_unwind_pr_common+0x1a8>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	f000 80a6 	beq.w	8000914 <__gnu_unwind_pr_common+0x1fc>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db77      	blt.n	80008bc <__gnu_unwind_pr_common+0x1a4>
 80007cc:	9b02      	ldr	r3, [sp, #8]
 80007ce:	3301      	adds	r3, #1
 80007d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80007d4:	e7c2      	b.n	800075c <__gnu_unwind_pr_common+0x44>
 80007d6:	2300      	movs	r3, #0
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2e02      	cmp	r6, #2
 80007dc:	dd3e      	ble.n	800085c <__gnu_unwind_pr_common+0x144>
 80007de:	f7ff fe17 	bl	8000410 <__gnu_unwind_24bit.isra.1>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d040      	beq.n	8000868 <__gnu_unwind_pr_common+0x150>
 80007e6:	2009      	movs	r0, #9
 80007e8:	b00b      	add	sp, #44	; 0x2c
 80007ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ee:	2000      	movs	r0, #0
 80007f0:	e7d0      	b.n	8000794 <__gnu_unwind_pr_common+0x7c>
 80007f2:	6867      	ldr	r7, [r4, #4]
 80007f4:	3408      	adds	r4, #8
 80007f6:	e7bc      	b.n	8000772 <__gnu_unwind_pr_common+0x5a>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	dca3      	bgt.n	8000744 <__gnu_unwind_pr_common+0x2c>
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	0409      	lsls	r1, r1, #16
 8000802:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000806:	2302      	movs	r3, #2
 8000808:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800080c:	9107      	str	r1, [sp, #28]
 800080e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000812:	e797      	b.n	8000744 <__gnu_unwind_pr_common+0x2c>
 8000814:	f1bb 0f00 	cmp.w	fp, #0
 8000818:	d002      	beq.n	8000820 <__gnu_unwind_pr_common+0x108>
 800081a:	2800      	cmp	r0, #0
 800081c:	f040 80bd 	bne.w	800099a <__gnu_unwind_pr_common+0x282>
 8000820:	3404      	adds	r4, #4
 8000822:	e79b      	b.n	800075c <__gnu_unwind_pr_common+0x44>
 8000824:	f1bb 0f00 	cmp.w	fp, #0
 8000828:	d125      	bne.n	8000876 <__gnu_unwind_pr_common+0x15e>
 800082a:	b1a8      	cbz	r0, 8000858 <__gnu_unwind_pr_common+0x140>
 800082c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000830:	1c99      	adds	r1, r3, #2
 8000832:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000836:	d0d6      	beq.n	80007e6 <__gnu_unwind_pr_common+0xce>
 8000838:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800083c:	3301      	adds	r3, #1
 800083e:	9106      	str	r1, [sp, #24]
 8000840:	f000 80a3 	beq.w	800098a <__gnu_unwind_pr_common+0x272>
 8000844:	1d20      	adds	r0, r4, #4
 8000846:	f7ff fddd 	bl	8000404 <_Unwind_decode_typeinfo_ptr.isra.0>
 800084a:	ab06      	add	r3, sp, #24
 800084c:	4601      	mov	r1, r0
 800084e:	4628      	mov	r0, r5
 8000850:	f3af 8000 	nop.w
 8000854:	2800      	cmp	r0, #0
 8000856:	d177      	bne.n	8000948 <__gnu_unwind_pr_common+0x230>
 8000858:	3408      	adds	r4, #8
 800085a:	e77f      	b.n	800075c <__gnu_unwind_pr_common+0x44>
 800085c:	a907      	add	r1, sp, #28
 800085e:	4648      	mov	r0, r9
 8000860:	f000 faee 	bl	8000e40 <__gnu_unwind_execute>
 8000864:	2800      	cmp	r0, #0
 8000866:	d1be      	bne.n	80007e6 <__gnu_unwind_pr_common+0xce>
 8000868:	9b01      	ldr	r3, [sp, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d15c      	bne.n	8000928 <__gnu_unwind_pr_common+0x210>
 800086e:	2008      	movs	r0, #8
 8000870:	b00b      	add	sp, #44	; 0x2c
 8000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000876:	210d      	movs	r1, #13
 8000878:	4648      	mov	r0, r9
 800087a:	6a2f      	ldr	r7, [r5, #32]
 800087c:	f7ff fee0 	bl	8000640 <_Unwind_GetGR>
 8000880:	4287      	cmp	r7, r0
 8000882:	d1e9      	bne.n	8000858 <__gnu_unwind_pr_common+0x140>
 8000884:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000886:	429c      	cmp	r4, r3
 8000888:	d1e6      	bne.n	8000858 <__gnu_unwind_pr_common+0x140>
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff fcf0 	bl	8000270 <selfrel_offset31>
 8000890:	210f      	movs	r1, #15
 8000892:	4602      	mov	r2, r0
 8000894:	4648      	mov	r0, r9
 8000896:	f7ff fef9 	bl	800068c <_Unwind_SetGR>
 800089a:	4648      	mov	r0, r9
 800089c:	462a      	mov	r2, r5
 800089e:	2100      	movs	r1, #0
 80008a0:	f7ff fef4 	bl	800068c <_Unwind_SetGR>
 80008a4:	2007      	movs	r0, #7
 80008a6:	e79f      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 80008a8:	210d      	movs	r1, #13
 80008aa:	4648      	mov	r0, r9
 80008ac:	6a2f      	ldr	r7, [r5, #32]
 80008ae:	f7ff fec7 	bl	8000640 <_Unwind_GetGR>
 80008b2:	4287      	cmp	r7, r0
 80008b4:	d058      	beq.n	8000968 <__gnu_unwind_pr_common+0x250>
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	da87      	bge.n	80007cc <__gnu_unwind_pr_common+0xb4>
 80008bc:	3404      	adds	r4, #4
 80008be:	e785      	b.n	80007cc <__gnu_unwind_pr_common+0xb4>
 80008c0:	9b02      	ldr	r3, [sp, #8]
 80008c2:	b33b      	cbz	r3, 8000914 <__gnu_unwind_pr_common+0x1fc>
 80008c4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008c8:	1d27      	adds	r7, r4, #4
 80008ca:	f8cd b010 	str.w	fp, [sp, #16]
 80008ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008d2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80008d6:	9605      	str	r6, [sp, #20]
 80008d8:	46a3      	mov	fp, r4
 80008da:	461c      	mov	r4, r3
 80008dc:	e002      	b.n	80008e4 <__gnu_unwind_pr_common+0x1cc>
 80008de:	45b2      	cmp	sl, r6
 80008e0:	46b0      	mov	r8, r6
 80008e2:	d016      	beq.n	8000912 <__gnu_unwind_pr_common+0x1fa>
 80008e4:	4638      	mov	r0, r7
 80008e6:	9406      	str	r4, [sp, #24]
 80008e8:	f7ff fd8c 	bl	8000404 <_Unwind_decode_typeinfo_ptr.isra.0>
 80008ec:	ab06      	add	r3, sp, #24
 80008ee:	4601      	mov	r1, r0
 80008f0:	2200      	movs	r2, #0
 80008f2:	4628      	mov	r0, r5
 80008f4:	f3af 8000 	nop.w
 80008f8:	f108 0601 	add.w	r6, r8, #1
 80008fc:	3704      	adds	r7, #4
 80008fe:	2800      	cmp	r0, #0
 8000900:	d0ed      	beq.n	80008de <__gnu_unwind_pr_common+0x1c6>
 8000902:	9b02      	ldr	r3, [sp, #8]
 8000904:	9e05      	ldr	r6, [sp, #20]
 8000906:	4543      	cmp	r3, r8
 8000908:	465c      	mov	r4, fp
 800090a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800090e:	d1d2      	bne.n	80008b6 <__gnu_unwind_pr_common+0x19e>
 8000910:	e000      	b.n	8000914 <__gnu_unwind_pr_common+0x1fc>
 8000912:	465c      	mov	r4, fp
 8000914:	4648      	mov	r0, r9
 8000916:	210d      	movs	r1, #13
 8000918:	f7ff fe92 	bl	8000640 <_Unwind_GetGR>
 800091c:	9b06      	ldr	r3, [sp, #24]
 800091e:	6228      	str	r0, [r5, #32]
 8000920:	62ac      	str	r4, [r5, #40]	; 0x28
 8000922:	626b      	str	r3, [r5, #36]	; 0x24
 8000924:	2006      	movs	r0, #6
 8000926:	e75f      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 8000928:	210f      	movs	r1, #15
 800092a:	4648      	mov	r0, r9
 800092c:	f7ff fe88 	bl	8000640 <_Unwind_GetGR>
 8000930:	210e      	movs	r1, #14
 8000932:	4602      	mov	r2, r0
 8000934:	4648      	mov	r0, r9
 8000936:	f7ff fea9 	bl	800068c <_Unwind_SetGR>
 800093a:	4648      	mov	r0, r9
 800093c:	4a29      	ldr	r2, [pc, #164]	; (80009e4 <__gnu_unwind_pr_common+0x2cc>)
 800093e:	210f      	movs	r1, #15
 8000940:	f7ff fea4 	bl	800068c <_Unwind_SetGR>
 8000944:	2007      	movs	r0, #7
 8000946:	e74f      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 8000948:	4607      	mov	r7, r0
 800094a:	210d      	movs	r1, #13
 800094c:	4648      	mov	r0, r9
 800094e:	f7ff fe77 	bl	8000640 <_Unwind_GetGR>
 8000952:	2f02      	cmp	r7, #2
 8000954:	6228      	str	r0, [r5, #32]
 8000956:	d11d      	bne.n	8000994 <__gnu_unwind_pr_common+0x27c>
 8000958:	462b      	mov	r3, r5
 800095a:	9a06      	ldr	r2, [sp, #24]
 800095c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000960:	626b      	str	r3, [r5, #36]	; 0x24
 8000962:	62ac      	str	r4, [r5, #40]	; 0x28
 8000964:	2006      	movs	r0, #6
 8000966:	e73f      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 8000968:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800096a:	429c      	cmp	r4, r3
 800096c:	d1a3      	bne.n	80008b6 <__gnu_unwind_pr_common+0x19e>
 800096e:	2204      	movs	r2, #4
 8000970:	2700      	movs	r7, #0
 8000972:	18a3      	adds	r3, r4, r2
 8000974:	9902      	ldr	r1, [sp, #8]
 8000976:	62a9      	str	r1, [r5, #40]	; 0x28
 8000978:	62ef      	str	r7, [r5, #44]	; 0x2c
 800097a:	632a      	str	r2, [r5, #48]	; 0x30
 800097c:	636b      	str	r3, [r5, #52]	; 0x34
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	42bb      	cmp	r3, r7
 8000982:	db1d      	blt.n	80009c0 <__gnu_unwind_pr_common+0x2a8>
 8000984:	2301      	movs	r3, #1
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	e720      	b.n	80007cc <__gnu_unwind_pr_common+0xb4>
 800098a:	4648      	mov	r0, r9
 800098c:	210d      	movs	r1, #13
 800098e:	f7ff fe57 	bl	8000640 <_Unwind_GetGR>
 8000992:	6228      	str	r0, [r5, #32]
 8000994:	9b06      	ldr	r3, [sp, #24]
 8000996:	626b      	str	r3, [r5, #36]	; 0x24
 8000998:	e7e3      	b.n	8000962 <__gnu_unwind_pr_common+0x24a>
 800099a:	4620      	mov	r0, r4
 800099c:	f7ff fc68 	bl	8000270 <selfrel_offset31>
 80009a0:	3404      	adds	r4, #4
 80009a2:	4606      	mov	r6, r0
 80009a4:	63ac      	str	r4, [r5, #56]	; 0x38
 80009a6:	4628      	mov	r0, r5
 80009a8:	f3af 8000 	nop.w
 80009ac:	2800      	cmp	r0, #0
 80009ae:	f43f af1a 	beq.w	80007e6 <__gnu_unwind_pr_common+0xce>
 80009b2:	4648      	mov	r0, r9
 80009b4:	4632      	mov	r2, r6
 80009b6:	210f      	movs	r1, #15
 80009b8:	f7ff fe68 	bl	800068c <_Unwind_SetGR>
 80009bc:	2007      	movs	r0, #7
 80009be:	e713      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 80009c0:	4608      	mov	r0, r1
 80009c2:	3001      	adds	r0, #1
 80009c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80009c8:	f7ff fc52 	bl	8000270 <selfrel_offset31>
 80009cc:	210f      	movs	r1, #15
 80009ce:	4602      	mov	r2, r0
 80009d0:	4648      	mov	r0, r9
 80009d2:	f7ff fe5b 	bl	800068c <_Unwind_SetGR>
 80009d6:	4648      	mov	r0, r9
 80009d8:	462a      	mov	r2, r5
 80009da:	4639      	mov	r1, r7
 80009dc:	f7ff fe56 	bl	800068c <_Unwind_SetGR>
 80009e0:	2007      	movs	r0, #7
 80009e2:	e701      	b.n	80007e8 <__gnu_unwind_pr_common+0xd0>
 80009e4:	00000000 	.word	0x00000000

080009e8 <__aeabi_unwind_cpp_pr0>:
 80009e8:	2300      	movs	r3, #0
 80009ea:	e695      	b.n	8000718 <__gnu_unwind_pr_common>

080009ec <__aeabi_unwind_cpp_pr1>:
 80009ec:	2301      	movs	r3, #1
 80009ee:	e693      	b.n	8000718 <__gnu_unwind_pr_common>

080009f0 <__aeabi_unwind_cpp_pr2>:
 80009f0:	2302      	movs	r3, #2
 80009f2:	e691      	b.n	8000718 <__gnu_unwind_pr_common>

080009f4 <_Unwind_VRS_Pop>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	4604      	mov	r4, r0
 80009f8:	b0c5      	sub	sp, #276	; 0x114
 80009fa:	2904      	cmp	r1, #4
 80009fc:	d80d      	bhi.n	8000a1a <_Unwind_VRS_Pop+0x26>
 80009fe:	e8df f001 	tbb	[pc, r1]
 8000a02:	0353      	.short	0x0353
 8000a04:	310c      	.short	0x310c
 8000a06:	0f          	.byte	0x0f
 8000a07:	00          	.byte	0x00
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000a0e:	b295      	uxth	r5, r2
 8000a10:	d162      	bne.n	8000ad8 <_Unwind_VRS_Pop+0xe4>
 8000a12:	1972      	adds	r2, r6, r5
 8000a14:	2a10      	cmp	r2, #16
 8000a16:	f240 809b 	bls.w	8000b50 <_Unwind_VRS_Pop+0x15c>
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	b045      	add	sp, #276	; 0x114
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1fa      	bne.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000a24:	2a10      	cmp	r2, #16
 8000a26:	d8f8      	bhi.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	06d8      	lsls	r0, r3, #27
 8000a2c:	f100 80c6 	bmi.w	8000bbc <_Unwind_VRS_Pop+0x1c8>
 8000a30:	ae22      	add	r6, sp, #136	; 0x88
 8000a32:	4630      	mov	r0, r6
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	f000 f973 	bl	8000d20 <__gnu_Unwind_Save_WMMXC>
 8000a3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a3c:	9a01      	ldr	r2, [sp, #4]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2501      	movs	r5, #1
 8000a42:	fa05 f103 	lsl.w	r1, r5, r3
 8000a46:	4211      	tst	r1, r2
 8000a48:	d003      	beq.n	8000a52 <_Unwind_VRS_Pop+0x5e>
 8000a4a:	6801      	ldr	r1, [r0, #0]
 8000a4c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000a50:	3004      	adds	r0, #4
 8000a52:	3301      	adds	r3, #1
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d1f4      	bne.n	8000a42 <_Unwind_VRS_Pop+0x4e>
 8000a58:	63a0      	str	r0, [r4, #56]	; 0x38
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	f000 f956 	bl	8000d0c <__gnu_Unwind_Restore_WMMXC>
 8000a60:	2000      	movs	r0, #0
 8000a62:	e7db      	b.n	8000a1c <_Unwind_VRS_Pop+0x28>
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d1d8      	bne.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000a68:	0c15      	lsrs	r5, r2, #16
 8000a6a:	b297      	uxth	r7, r2
 8000a6c:	19eb      	adds	r3, r5, r7
 8000a6e:	2b10      	cmp	r3, #16
 8000a70:	d8d3      	bhi.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	071e      	lsls	r6, r3, #28
 8000a76:	f100 80b5 	bmi.w	8000be4 <_Unwind_VRS_Pop+0x1f0>
 8000a7a:	ae22      	add	r6, sp, #136	; 0x88
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f000 f923 	bl	8000cc8 <__gnu_Unwind_Save_WMMXD>
 8000a82:	00ed      	lsls	r5, r5, #3
 8000a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a86:	b14f      	cbz	r7, 8000a9c <_Unwind_VRS_Pop+0xa8>
 8000a88:	3d04      	subs	r5, #4
 8000a8a:	1971      	adds	r1, r6, r5
 8000a8c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8000a98:	4283      	cmp	r3, r0
 8000a9a:	d1f9      	bne.n	8000a90 <_Unwind_VRS_Pop+0x9c>
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000aa0:	f000 f8f0 	bl	8000c84 <__gnu_Unwind_Restore_WMMXD>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e7b9      	b.n	8000a1c <_Unwind_VRS_Pop+0x28>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1b6      	bne.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000aac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000aae:	b297      	uxth	r7, r2
 8000ab0:	1d20      	adds	r0, r4, #4
 8000ab2:	2601      	movs	r6, #1
 8000ab4:	fa06 f103 	lsl.w	r1, r6, r3
 8000ab8:	4239      	tst	r1, r7
 8000aba:	f103 0301 	add.w	r3, r3, #1
 8000abe:	d002      	beq.n	8000ac6 <_Unwind_VRS_Pop+0xd2>
 8000ac0:	6829      	ldr	r1, [r5, #0]
 8000ac2:	6001      	str	r1, [r0, #0]
 8000ac4:	3504      	adds	r5, #4
 8000ac6:	2b10      	cmp	r3, #16
 8000ac8:	f100 0004 	add.w	r0, r0, #4
 8000acc:	d1f2      	bne.n	8000ab4 <_Unwind_VRS_Pop+0xc0>
 8000ace:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000ad2:	d13b      	bne.n	8000b4c <_Unwind_VRS_Pop+0x158>
 8000ad4:	63a5      	str	r5, [r4, #56]	; 0x38
 8000ad6:	e7a1      	b.n	8000a1c <_Unwind_VRS_Pop+0x28>
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d19e      	bne.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000adc:	1977      	adds	r7, r6, r5
 8000ade:	2f20      	cmp	r7, #32
 8000ae0:	d89b      	bhi.n	8000a1a <_Unwind_VRS_Pop+0x26>
 8000ae2:	2e0f      	cmp	r6, #15
 8000ae4:	d966      	bls.n	8000bb4 <_Unwind_VRS_Pop+0x1c0>
 8000ae6:	462f      	mov	r7, r5
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d13a      	bne.n	8000b62 <_Unwind_VRS_Pop+0x16e>
 8000aec:	462a      	mov	r2, r5
 8000aee:	2700      	movs	r7, #0
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000af4:	dd72      	ble.n	8000bdc <_Unwind_VRS_Pop+0x1e8>
 8000af6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000afa:	4601      	mov	r1, r0
 8000afc:	a844      	add	r0, sp, #272	; 0x110
 8000afe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000b02:	388c      	subs	r0, #140	; 0x8c
 8000b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8000b08:	f840 5f04 	str.w	r5, [r0, #4]!
 8000b0c:	4291      	cmp	r1, r2
 8000b0e:	d1f9      	bne.n	8000b04 <_Unwind_VRS_Pop+0x110>
 8000b10:	4608      	mov	r0, r1
 8000b12:	b197      	cbz	r7, 8000b3a <_Unwind_VRS_Pop+0x146>
 8000b14:	2e10      	cmp	r6, #16
 8000b16:	4632      	mov	r2, r6
 8000b18:	a944      	add	r1, sp, #272	; 0x110
 8000b1a:	bf38      	it	cc
 8000b1c:	2210      	movcc	r2, #16
 8000b1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000b22:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000b26:	0079      	lsls	r1, r7, #1
 8000b28:	3a04      	subs	r2, #4
 8000b2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000b2e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000b32:	f842 5f04 	str.w	r5, [r2, #4]!
 8000b36:	4288      	cmp	r0, r1
 8000b38:	d1f9      	bne.n	8000b2e <_Unwind_VRS_Pop+0x13a>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d048      	beq.n	8000bd0 <_Unwind_VRS_Pop+0x1dc>
 8000b3e:	2e0f      	cmp	r6, #15
 8000b40:	63a1      	str	r1, [r4, #56]	; 0x38
 8000b42:	d933      	bls.n	8000bac <_Unwind_VRS_Pop+0x1b8>
 8000b44:	b117      	cbz	r7, 8000b4c <_Unwind_VRS_Pop+0x158>
 8000b46:	a802      	add	r0, sp, #8
 8000b48:	f000 f894 	bl	8000c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e765      	b.n	8000a1c <_Unwind_VRS_Pop+0x28>
 8000b50:	2e0f      	cmp	r6, #15
 8000b52:	f63f af62 	bhi.w	8000a1a <_Unwind_VRS_Pop+0x26>
 8000b56:	2700      	movs	r7, #0
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	07d1      	lsls	r1, r2, #31
 8000b5c:	d417      	bmi.n	8000b8e <_Unwind_VRS_Pop+0x19a>
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d060      	beq.n	8000c24 <_Unwind_VRS_Pop+0x230>
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	0751      	lsls	r1, r2, #29
 8000b66:	d445      	bmi.n	8000bf4 <_Unwind_VRS_Pop+0x200>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d04d      	beq.n	8000c08 <_Unwind_VRS_Pop+0x214>
 8000b6c:	2e0f      	cmp	r6, #15
 8000b6e:	d806      	bhi.n	8000b7e <_Unwind_VRS_Pop+0x18a>
 8000b70:	a822      	add	r0, sp, #136	; 0x88
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f000 f87a 	bl	8000c6c <__gnu_Unwind_Save_VFP_D>
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d0b6      	beq.n	8000aec <_Unwind_VRS_Pop+0xf8>
 8000b7e:	a802      	add	r0, sp, #8
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	f000 f87b 	bl	8000c7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b86:	9b01      	ldr	r3, [sp, #4]
 8000b88:	f1c6 0210 	rsb	r2, r6, #16
 8000b8c:	e7b0      	b.n	8000af0 <_Unwind_VRS_Pop+0xfc>
 8000b8e:	f022 0101 	bic.w	r1, r2, #1
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	6021      	str	r1, [r4, #0]
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	4620      	mov	r0, r4
 8000b9a:	d03b      	beq.n	8000c14 <_Unwind_VRS_Pop+0x220>
 8000b9c:	f022 0203 	bic.w	r2, r2, #3
 8000ba0:	f840 2b48 	str.w	r2, [r0], #72
 8000ba4:	f000 f85a 	bl	8000c5c <__gnu_Unwind_Save_VFP>
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	e7d8      	b.n	8000b5e <_Unwind_VRS_Pop+0x16a>
 8000bac:	a822      	add	r0, sp, #136	; 0x88
 8000bae:	f000 f859 	bl	8000c64 <__gnu_Unwind_Restore_VFP_D>
 8000bb2:	e7c7      	b.n	8000b44 <_Unwind_VRS_Pop+0x150>
 8000bb4:	2f10      	cmp	r7, #16
 8000bb6:	d9ce      	bls.n	8000b56 <_Unwind_VRS_Pop+0x162>
 8000bb8:	3f10      	subs	r7, #16
 8000bba:	e7cd      	b.n	8000b58 <_Unwind_VRS_Pop+0x164>
 8000bbc:	f023 0310 	bic.w	r3, r3, #16
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	f000 f8aa 	bl	8000d20 <__gnu_Unwind_Save_WMMXC>
 8000bcc:	9a01      	ldr	r2, [sp, #4]
 8000bce:	e72f      	b.n	8000a30 <_Unwind_VRS_Pop+0x3c>
 8000bd0:	3104      	adds	r1, #4
 8000bd2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000bd4:	a822      	add	r0, sp, #136	; 0x88
 8000bd6:	f000 f83d 	bl	8000c54 <__gnu_Unwind_Restore_VFP>
 8000bda:	e7b7      	b.n	8000b4c <_Unwind_VRS_Pop+0x158>
 8000bdc:	2f00      	cmp	r7, #0
 8000bde:	d199      	bne.n	8000b14 <_Unwind_VRS_Pop+0x120>
 8000be0:	4601      	mov	r1, r0
 8000be2:	e7aa      	b.n	8000b3a <_Unwind_VRS_Pop+0x146>
 8000be4:	f023 0308 	bic.w	r3, r3, #8
 8000be8:	6023      	str	r3, [r4, #0]
 8000bea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000bee:	f000 f86b 	bl	8000cc8 <__gnu_Unwind_Save_WMMXD>
 8000bf2:	e742      	b.n	8000a7a <_Unwind_VRS_Pop+0x86>
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f022 0204 	bic.w	r2, r2, #4
 8000bfa:	f840 2bd0 	str.w	r2, [r0], #208
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	f000 f83c 	bl	8000c7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	e7af      	b.n	8000b68 <_Unwind_VRS_Pop+0x174>
 8000c08:	a822      	add	r0, sp, #136	; 0x88
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f000 f826 	bl	8000c5c <__gnu_Unwind_Save_VFP>
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	e7b9      	b.n	8000b88 <_Unwind_VRS_Pop+0x194>
 8000c14:	f041 0102 	orr.w	r1, r1, #2
 8000c18:	f840 1b48 	str.w	r1, [r0], #72
 8000c1c:	f000 f826 	bl	8000c6c <__gnu_Unwind_Save_VFP_D>
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	e79c      	b.n	8000b5e <_Unwind_VRS_Pop+0x16a>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d003      	beq.n	8000c30 <_Unwind_VRS_Pop+0x23c>
 8000c28:	2e0f      	cmp	r6, #15
 8000c2a:	f63f af5f 	bhi.w	8000aec <_Unwind_VRS_Pop+0xf8>
 8000c2e:	e79f      	b.n	8000b70 <_Unwind_VRS_Pop+0x17c>
 8000c30:	a822      	add	r0, sp, #136	; 0x88
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	f000 f812 	bl	8000c5c <__gnu_Unwind_Save_VFP>
 8000c38:	9b01      	ldr	r3, [sp, #4]
 8000c3a:	e757      	b.n	8000aec <_Unwind_VRS_Pop+0xf8>

08000c3c <__restore_core_regs>:
 8000c3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c44:	469c      	mov	ip, r3
 8000c46:	46a6      	mov	lr, r4
 8000c48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c50:	46e5      	mov	sp, ip
 8000c52:	bd00      	pop	{pc}

08000c54 <__gnu_Unwind_Restore_VFP>:
 8000c54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Save_VFP>:
 8000c5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Restore_VFP_D>:
 8000c64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Save_VFP_D>:
 8000c6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__gnu_Unwind_Restore_WMMXD>:
 8000c84:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c88:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c90:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c94:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c98:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ca0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ca4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000ca8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000cac:	ecf0 a102 	ldfp	f2, [r0], #8
 8000cb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000cb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000cb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000cbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000cc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__gnu_Unwind_Save_WMMXD>:
 8000cc8:	ece0 0102 	stfe	f0, [r0], #8
 8000ccc:	ece0 1102 	stfe	f1, [r0], #8
 8000cd0:	ece0 2102 	stfe	f2, [r0], #8
 8000cd4:	ece0 3102 	stfe	f3, [r0], #8
 8000cd8:	ece0 4102 	stfe	f4, [r0], #8
 8000cdc:	ece0 5102 	stfe	f5, [r0], #8
 8000ce0:	ece0 6102 	stfe	f6, [r0], #8
 8000ce4:	ece0 7102 	stfe	f7, [r0], #8
 8000ce8:	ece0 8102 	stfp	f0, [r0], #8
 8000cec:	ece0 9102 	stfp	f1, [r0], #8
 8000cf0:	ece0 a102 	stfp	f2, [r0], #8
 8000cf4:	ece0 b102 	stfp	f3, [r0], #8
 8000cf8:	ece0 c102 	stfp	f4, [r0], #8
 8000cfc:	ece0 d102 	stfp	f5, [r0], #8
 8000d00:	ece0 e102 	stfp	f6, [r0], #8
 8000d04:	ece0 f102 	stfp	f7, [r0], #8
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__gnu_Unwind_Restore_WMMXC>:
 8000d0c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000d10:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000d14:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d18:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__gnu_Unwind_Save_WMMXC>:
 8000d20:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d24:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d28:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d2c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <_Unwind_RaiseException>:
 8000d34:	46ec      	mov	ip, sp
 8000d36:	b500      	push	{lr}
 8000d38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d48:	a901      	add	r1, sp, #4
 8000d4a:	f7ff fbf3 	bl	8000534 <__gnu_Unwind_RaiseException>
 8000d4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d52:	b012      	add	sp, #72	; 0x48
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <_Unwind_Resume>:
 8000d58:	46ec      	mov	ip, sp
 8000d5a:	b500      	push	{lr}
 8000d5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d6c:	a901      	add	r1, sp, #4
 8000d6e:	f7ff fc1b 	bl	80005a8 <__gnu_Unwind_Resume>
 8000d72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d76:	b012      	add	sp, #72	; 0x48
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <_Unwind_Resume_or_Rethrow>:
 8000d7c:	46ec      	mov	ip, sp
 8000d7e:	b500      	push	{lr}
 8000d80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d90:	a901      	add	r1, sp, #4
 8000d92:	f7ff fc2b 	bl	80005ec <__gnu_Unwind_Resume_or_Rethrow>
 8000d96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d9a:	b012      	add	sp, #72	; 0x48
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <_Unwind_ForcedUnwind>:
 8000da0:	46ec      	mov	ip, sp
 8000da2:	b500      	push	{lr}
 8000da4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000da8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000db4:	ab01      	add	r3, sp, #4
 8000db6:	f7ff fbed 	bl	8000594 <__gnu_Unwind_ForcedUnwind>
 8000dba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dbe:	b012      	add	sp, #72	; 0x48
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <_Unwind_Backtrace>:
 8000dc4:	46ec      	mov	ip, sp
 8000dc6:	b500      	push	{lr}
 8000dc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000dcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dd8:	aa01      	add	r2, sp, #4
 8000dda:	f7ff fc65 	bl	80006a8 <__gnu_Unwind_Backtrace>
 8000dde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000de2:	b012      	add	sp, #72	; 0x48
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <next_unwind_byte>:
 8000de8:	7a02      	ldrb	r2, [r0, #8]
 8000dea:	b91a      	cbnz	r2, 8000df4 <next_unwind_byte+0xc>
 8000dec:	7a43      	ldrb	r3, [r0, #9]
 8000dee:	b943      	cbnz	r3, 8000e02 <next_unwind_byte+0x1a>
 8000df0:	20b0      	movs	r0, #176	; 0xb0
 8000df2:	4770      	bx	lr
 8000df4:	6803      	ldr	r3, [r0, #0]
 8000df6:	3a01      	subs	r2, #1
 8000df8:	7202      	strb	r2, [r0, #8]
 8000dfa:	021a      	lsls	r2, r3, #8
 8000dfc:	6002      	str	r2, [r0, #0]
 8000dfe:	0e18      	lsrs	r0, r3, #24
 8000e00:	4770      	bx	lr
 8000e02:	6842      	ldr	r2, [r0, #4]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b410      	push	{r4}
 8000e08:	7243      	strb	r3, [r0, #9]
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	1d14      	adds	r4, r2, #4
 8000e10:	7201      	strb	r1, [r0, #8]
 8000e12:	021a      	lsls	r2, r3, #8
 8000e14:	6044      	str	r4, [r0, #4]
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e1c:	0e18      	lsrs	r0, r3, #24
 8000e1e:	4770      	bx	lr

08000e20 <_Unwind_GetGR.constprop.0>:
 8000e20:	b500      	push	{lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	aa03      	add	r2, sp, #12
 8000e26:	2300      	movs	r3, #0
 8000e28:	9200      	str	r2, [sp, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	f7ff fbed 	bl	800060c <_Unwind_VRS_Get>
 8000e32:	9803      	ldr	r0, [sp, #12]
 8000e34:	b005      	add	sp, #20
 8000e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e3a:	bf00      	nop

08000e3c <unwind_UCB_from_context>:
 8000e3c:	e7f0      	b.n	8000e20 <_Unwind_GetGR.constprop.0>
 8000e3e:	bf00      	nop

08000e40 <__gnu_unwind_execute>:
 8000e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e44:	4606      	mov	r6, r0
 8000e46:	b085      	sub	sp, #20
 8000e48:	460f      	mov	r7, r1
 8000e4a:	f04f 0800 	mov.w	r8, #0
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f7ff ffca 	bl	8000de8 <next_unwind_byte>
 8000e54:	28b0      	cmp	r0, #176	; 0xb0
 8000e56:	4604      	mov	r4, r0
 8000e58:	d023      	beq.n	8000ea2 <__gnu_unwind_execute+0x62>
 8000e5a:	0605      	lsls	r5, r0, #24
 8000e5c:	d427      	bmi.n	8000eae <__gnu_unwind_execute+0x6e>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f10d 090c 	add.w	r9, sp, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	0085      	lsls	r5, r0, #2
 8000e68:	220d      	movs	r2, #13
 8000e6a:	f8cd 9000 	str.w	r9, [sp]
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f7ff fbcc 	bl	800060c <_Unwind_VRS_Get>
 8000e74:	b2ed      	uxtb	r5, r5
 8000e76:	9b03      	ldr	r3, [sp, #12]
 8000e78:	f8cd 9000 	str.w	r9, [sp]
 8000e7c:	0660      	lsls	r0, r4, #25
 8000e7e:	f105 0504 	add.w	r5, r5, #4
 8000e82:	bf4c      	ite	mi
 8000e84:	1b5d      	submi	r5, r3, r5
 8000e86:	18ed      	addpl	r5, r5, r3
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	220d      	movs	r2, #13
 8000e8e:	4630      	mov	r0, r6
 8000e90:	9503      	str	r5, [sp, #12]
 8000e92:	f7ff fbe1 	bl	8000658 <_Unwind_VRS_Set>
 8000e96:	4638      	mov	r0, r7
 8000e98:	f7ff ffa6 	bl	8000de8 <next_unwind_byte>
 8000e9c:	28b0      	cmp	r0, #176	; 0xb0
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	d1db      	bne.n	8000e5a <__gnu_unwind_execute+0x1a>
 8000ea2:	f1b8 0f00 	cmp.w	r8, #0
 8000ea6:	f000 8095 	beq.w	8000fd4 <__gnu_unwind_execute+0x194>
 8000eaa:	2000      	movs	r0, #0
 8000eac:	e01c      	b.n	8000ee8 <__gnu_unwind_execute+0xa8>
 8000eae:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000eb2:	2b80      	cmp	r3, #128	; 0x80
 8000eb4:	d05d      	beq.n	8000f72 <__gnu_unwind_execute+0x132>
 8000eb6:	2b90      	cmp	r3, #144	; 0x90
 8000eb8:	d019      	beq.n	8000eee <__gnu_unwind_execute+0xae>
 8000eba:	2ba0      	cmp	r3, #160	; 0xa0
 8000ebc:	d02c      	beq.n	8000f18 <__gnu_unwind_execute+0xd8>
 8000ebe:	2bb0      	cmp	r3, #176	; 0xb0
 8000ec0:	d03f      	beq.n	8000f42 <__gnu_unwind_execute+0x102>
 8000ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8000ec4:	d06c      	beq.n	8000fa0 <__gnu_unwind_execute+0x160>
 8000ec6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eca:	2bd0      	cmp	r3, #208	; 0xd0
 8000ecc:	d10b      	bne.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000ece:	f000 0207 	and.w	r2, r0, #7
 8000ed2:	3201      	adds	r2, #1
 8000ed4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ed8:	2305      	movs	r3, #5
 8000eda:	2101      	movs	r1, #1
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff fd89 	bl	80009f4 <_Unwind_VRS_Pop>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d0b3      	beq.n	8000e4e <__gnu_unwind_execute+0xe>
 8000ee6:	2009      	movs	r0, #9
 8000ee8:	b005      	add	sp, #20
 8000eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eee:	f000 030d 	and.w	r3, r0, #13
 8000ef2:	2b0d      	cmp	r3, #13
 8000ef4:	d0f7      	beq.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000ef6:	ad03      	add	r5, sp, #12
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f000 020f 	and.w	r2, r0, #15
 8000efe:	4619      	mov	r1, r3
 8000f00:	9500      	str	r5, [sp, #0]
 8000f02:	4630      	mov	r0, r6
 8000f04:	f7ff fb82 	bl	800060c <_Unwind_VRS_Get>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9500      	str	r5, [sp, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	220d      	movs	r2, #13
 8000f10:	4630      	mov	r0, r6
 8000f12:	f7ff fba1 	bl	8000658 <_Unwind_VRS_Set>
 8000f16:	e79a      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 8000f18:	43c2      	mvns	r2, r0
 8000f1a:	f002 0307 	and.w	r3, r2, #7
 8000f1e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f22:	411a      	asrs	r2, r3
 8000f24:	0701      	lsls	r1, r0, #28
 8000f26:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4619      	mov	r1, r3
 8000f36:	4630      	mov	r0, r6
 8000f38:	f7ff fd5c 	bl	80009f4 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d1d2      	bne.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000f40:	e785      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 8000f42:	28b1      	cmp	r0, #177	; 0xb1
 8000f44:	d057      	beq.n	8000ff6 <__gnu_unwind_execute+0x1b6>
 8000f46:	28b2      	cmp	r0, #178	; 0xb2
 8000f48:	d068      	beq.n	800101c <__gnu_unwind_execute+0x1dc>
 8000f4a:	28b3      	cmp	r0, #179	; 0xb3
 8000f4c:	f000 8095 	beq.w	800107a <__gnu_unwind_execute+0x23a>
 8000f50:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f54:	2bb4      	cmp	r3, #180	; 0xb4
 8000f56:	d0c6      	beq.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000f58:	f000 0207 	and.w	r2, r0, #7
 8000f5c:	3201      	adds	r2, #1
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f64:	4619      	mov	r1, r3
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff fd44 	bl	80009f4 <_Unwind_VRS_Pop>
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d1ba      	bne.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000f70:	e76d      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff ff38 	bl	8000de8 <next_unwind_byte>
 8000f78:	0224      	lsls	r4, r4, #8
 8000f7a:	4304      	orrs	r4, r0
 8000f7c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000f80:	d0b1      	beq.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000f82:	0124      	lsls	r4, r4, #4
 8000f84:	2300      	movs	r3, #0
 8000f86:	b2a2      	uxth	r2, r4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fd32 	bl	80009f4 <_Unwind_VRS_Pop>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d1a8      	bne.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000f94:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f98:	bf18      	it	ne
 8000f9a:	f04f 0801 	movne.w	r8, #1
 8000f9e:	e756      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 8000fa0:	28c6      	cmp	r0, #198	; 0xc6
 8000fa2:	d07d      	beq.n	80010a0 <__gnu_unwind_execute+0x260>
 8000fa4:	28c7      	cmp	r0, #199	; 0xc7
 8000fa6:	f000 8086 	beq.w	80010b6 <__gnu_unwind_execute+0x276>
 8000faa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000fae:	2bc0      	cmp	r3, #192	; 0xc0
 8000fb0:	f000 8094 	beq.w	80010dc <__gnu_unwind_execute+0x29c>
 8000fb4:	28c8      	cmp	r0, #200	; 0xc8
 8000fb6:	f000 809f 	beq.w	80010f8 <__gnu_unwind_execute+0x2b8>
 8000fba:	28c9      	cmp	r0, #201	; 0xc9
 8000fbc:	d193      	bne.n	8000ee6 <__gnu_unwind_execute+0xa6>
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f7ff ff12 	bl	8000de8 <next_unwind_byte>
 8000fc4:	0302      	lsls	r2, r0, #12
 8000fc6:	f000 000f 	and.w	r0, r0, #15
 8000fca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000fce:	3001      	adds	r0, #1
 8000fd0:	4302      	orrs	r2, r0
 8000fd2:	e781      	b.n	8000ed8 <__gnu_unwind_execute+0x98>
 8000fd4:	ac03      	add	r4, sp, #12
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	220e      	movs	r2, #14
 8000fda:	4641      	mov	r1, r8
 8000fdc:	9400      	str	r4, [sp, #0]
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f7ff fb14 	bl	800060c <_Unwind_VRS_Get>
 8000fe4:	9400      	str	r4, [sp, #0]
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	4643      	mov	r3, r8
 8000fea:	220f      	movs	r2, #15
 8000fec:	4641      	mov	r1, r8
 8000fee:	f7ff fb33 	bl	8000658 <_Unwind_VRS_Set>
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	e778      	b.n	8000ee8 <__gnu_unwind_execute+0xa8>
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f7ff fef6 	bl	8000de8 <next_unwind_byte>
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	f43f af72 	beq.w	8000ee6 <__gnu_unwind_execute+0xa6>
 8001002:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001006:	f47f af6e 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 800100a:	4602      	mov	r2, r0
 800100c:	4619      	mov	r1, r3
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff fcf0 	bl	80009f4 <_Unwind_VRS_Pop>
 8001014:	2800      	cmp	r0, #0
 8001016:	f47f af66 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 800101a:	e718      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 800101c:	2300      	movs	r3, #0
 800101e:	f10d 090c 	add.w	r9, sp, #12
 8001022:	220d      	movs	r2, #13
 8001024:	4619      	mov	r1, r3
 8001026:	f8cd 9000 	str.w	r9, [sp]
 800102a:	4630      	mov	r0, r6
 800102c:	f7ff faee 	bl	800060c <_Unwind_VRS_Get>
 8001030:	4638      	mov	r0, r7
 8001032:	f7ff fed9 	bl	8000de8 <next_unwind_byte>
 8001036:	0602      	lsls	r2, r0, #24
 8001038:	f04f 0402 	mov.w	r4, #2
 800103c:	d50c      	bpl.n	8001058 <__gnu_unwind_execute+0x218>
 800103e:	9b03      	ldr	r3, [sp, #12]
 8001040:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001044:	40a0      	lsls	r0, r4
 8001046:	4403      	add	r3, r0
 8001048:	4638      	mov	r0, r7
 800104a:	9303      	str	r3, [sp, #12]
 800104c:	f7ff fecc 	bl	8000de8 <next_unwind_byte>
 8001050:	0603      	lsls	r3, r0, #24
 8001052:	f104 0407 	add.w	r4, r4, #7
 8001056:	d4f2      	bmi.n	800103e <__gnu_unwind_execute+0x1fe>
 8001058:	9b03      	ldr	r3, [sp, #12]
 800105a:	f8cd 9000 	str.w	r9, [sp]
 800105e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001062:	40a2      	lsls	r2, r4
 8001064:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001068:	2300      	movs	r3, #0
 800106a:	4414      	add	r4, r2
 800106c:	4619      	mov	r1, r3
 800106e:	220d      	movs	r2, #13
 8001070:	4630      	mov	r0, r6
 8001072:	9403      	str	r4, [sp, #12]
 8001074:	f7ff faf0 	bl	8000658 <_Unwind_VRS_Set>
 8001078:	e6e9      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 800107a:	4638      	mov	r0, r7
 800107c:	f7ff feb4 	bl	8000de8 <next_unwind_byte>
 8001080:	0301      	lsls	r1, r0, #12
 8001082:	f000 000f 	and.w	r0, r0, #15
 8001086:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800108a:	1c42      	adds	r2, r0, #1
 800108c:	2301      	movs	r3, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	4630      	mov	r0, r6
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fcae 	bl	80009f4 <_Unwind_VRS_Pop>
 8001098:	2800      	cmp	r0, #0
 800109a:	f47f af24 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 800109e:	e6d6      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 80010a0:	4638      	mov	r0, r7
 80010a2:	f7ff fea1 	bl	8000de8 <next_unwind_byte>
 80010a6:	0301      	lsls	r1, r0, #12
 80010a8:	f000 000f 	and.w	r0, r0, #15
 80010ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80010b0:	1c42      	adds	r2, r0, #1
 80010b2:	2303      	movs	r3, #3
 80010b4:	e7eb      	b.n	800108e <__gnu_unwind_execute+0x24e>
 80010b6:	4638      	mov	r0, r7
 80010b8:	f7ff fe96 	bl	8000de8 <next_unwind_byte>
 80010bc:	2800      	cmp	r0, #0
 80010be:	f43f af12 	beq.w	8000ee6 <__gnu_unwind_execute+0xa6>
 80010c2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80010c6:	f47f af0e 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 80010ca:	4602      	mov	r2, r0
 80010cc:	2104      	movs	r1, #4
 80010ce:	4630      	mov	r0, r6
 80010d0:	f7ff fc90 	bl	80009f4 <_Unwind_VRS_Pop>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	f47f af06 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 80010da:	e6b8      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 80010dc:	f000 020f 	and.w	r2, r0, #15
 80010e0:	3201      	adds	r2, #1
 80010e2:	2303      	movs	r3, #3
 80010e4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80010e8:	4619      	mov	r1, r3
 80010ea:	4630      	mov	r0, r6
 80010ec:	f7ff fc82 	bl	80009f4 <_Unwind_VRS_Pop>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	f47f aef8 	bne.w	8000ee6 <__gnu_unwind_execute+0xa6>
 80010f6:	e6aa      	b.n	8000e4e <__gnu_unwind_execute+0xe>
 80010f8:	4638      	mov	r0, r7
 80010fa:	f7ff fe75 	bl	8000de8 <next_unwind_byte>
 80010fe:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001102:	f000 030f 	and.w	r3, r0, #15
 8001106:	3210      	adds	r2, #16
 8001108:	3301      	adds	r3, #1
 800110a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800110e:	e6e3      	b.n	8000ed8 <__gnu_unwind_execute+0x98>

08001110 <__gnu_unwind_frame>:
 8001110:	b510      	push	{r4, lr}
 8001112:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001114:	b084      	sub	sp, #16
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2003      	movs	r0, #3
 800111a:	f88d 000c 	strb.w	r0, [sp, #12]
 800111e:	79dc      	ldrb	r4, [r3, #7]
 8001120:	f88d 400d 	strb.w	r4, [sp, #13]
 8001124:	0212      	lsls	r2, r2, #8
 8001126:	3308      	adds	r3, #8
 8001128:	4608      	mov	r0, r1
 800112a:	a901      	add	r1, sp, #4
 800112c:	9201      	str	r2, [sp, #4]
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	f7ff fe86 	bl	8000e40 <__gnu_unwind_execute>
 8001134:	b004      	add	sp, #16
 8001136:	bd10      	pop	{r4, pc}

08001138 <_Unwind_GetRegionStart>:
 8001138:	b508      	push	{r3, lr}
 800113a:	f7ff fe7f 	bl	8000e3c <unwind_UCB_from_context>
 800113e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001140:	bd08      	pop	{r3, pc}
 8001142:	bf00      	nop

08001144 <_Unwind_GetLanguageSpecificData>:
 8001144:	b508      	push	{r3, lr}
 8001146:	f7ff fe79 	bl	8000e3c <unwind_UCB_from_context>
 800114a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800114c:	79c3      	ldrb	r3, [r0, #7]
 800114e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001152:	3008      	adds	r0, #8
 8001154:	bd08      	pop	{r3, pc}
 8001156:	bf00      	nop

08001158 <_Unwind_GetTextRelBase>:
 8001158:	b508      	push	{r3, lr}
 800115a:	f002 fe73 	bl	8003e44 <abort>
 800115e:	bf00      	nop

08001160 <_Unwind_GetDataRelBase>:
 8001160:	b508      	push	{r3, lr}
 8001162:	f7ff fff9 	bl	8001158 <_Unwind_GetTextRelBase>
 8001166:	bf00      	nop

08001168 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_InitTick+0x3c>)
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_InitTick+0x40>)
 800116e:	7812      	ldrb	r2, [r2, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
{
 8001172:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	fbb0 f0f2 	udiv	r0, r0, r2
 800117c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001180:	f000 fad4 	bl	800172c <HAL_SYSTICK_Config>
 8001184:	b908      	cbnz	r0, 800118a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	2d0f      	cmp	r5, #15
 8001188:	d901      	bls.n	800118e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	4602      	mov	r2, r0
 8001192:	4629      	mov	r1, r5
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 fa86 	bl	80016a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_InitTick+0x44>)
 800119e:	4620      	mov	r0, r4
 80011a0:	601d      	str	r5, [r3, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x20>)
{
 80011b2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fa61 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ffd0 	bl	8001168 <HAL_InitTick>
  HAL_MspInit();
 80011c8:	f001 fd7a 	bl	8002cc0 <HAL_MspInit>
}
 80011cc:	2000      	movs	r0, #0
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_IncTick+0x10>)
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_IncTick+0x14>)
 80011d8:	6811      	ldr	r1, [r2, #0]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	440b      	add	r3, r1
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200000cc 	.word	0x200000cc
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <HAL_GetTick+0x8>)
 80011ee:	6818      	ldr	r0, [r3, #0]
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200000cc 	.word	0x200000cc

080011f8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d07c      	beq.n	80012f6 <HAL_CAN_Init+0xfe>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80011fc:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001204:	2b00      	cmp	r3, #0
 8001206:	d073      	beq.n	80012f0 <HAL_CAN_Init+0xf8>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f023 0302 	bic.w	r3, r3, #2
 8001210:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001212:	f7ff ffeb 	bl	80011ec <HAL_GetTick>
 8001216:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001218:	e004      	b.n	8001224 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121a:	f7ff ffe7 	bl	80011ec <HAL_GetTick>
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	280a      	cmp	r0, #10
 8001222:	d85c      	bhi.n	80012de <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	0791      	lsls	r1, r2, #30
 800122a:	d4f6      	bmi.n	800121a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ffda 	bl	80011ec <HAL_GetTick>
 8001238:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	e004      	b.n	8001246 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ffd6 	bl	80011ec <HAL_GetTick>
 8001240:	1b40      	subs	r0, r0, r5
 8001242:	280a      	cmp	r0, #10
 8001244:	d84b      	bhi.n	80012de <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	07d2      	lsls	r2, r2, #31
 800124c:	d5f6      	bpl.n	800123c <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800124e:	7e22      	ldrb	r2, [r4, #24]
 8001250:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	bf0c      	ite	eq
 8001256:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800125a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800125e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001260:	7e62      	ldrb	r2, [r4, #25]
 8001262:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	bf0c      	ite	eq
 8001268:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800126c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001272:	7ea2      	ldrb	r2, [r4, #26]
 8001274:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	bf0c      	ite	eq
 800127a:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800127e:	f022 0220 	bicne.w	r2, r2, #32
 8001282:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001284:	7ee2      	ldrb	r2, [r4, #27]
 8001286:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	bf0c      	ite	eq
 800128c:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001290:	f042 0210 	orrne.w	r2, r2, #16
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001296:	7f22      	ldrb	r2, [r4, #28]
 8001298:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	bf0c      	ite	eq
 800129e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a2:	f022 0208 	bicne.w	r2, r2, #8
 80012a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012a8:	7f62      	ldrb	r2, [r4, #29]
 80012aa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	bf0c      	ite	eq
 80012b0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b4:	f022 0204 	bicne.w	r2, r2, #4
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ba:	68a2      	ldr	r2, [r4, #8]
 80012bc:	68e6      	ldr	r6, [r4, #12]
 80012be:	6925      	ldr	r5, [r4, #16]
 80012c0:	6960      	ldr	r0, [r4, #20]
 80012c2:	6861      	ldr	r1, [r4, #4]
 80012c4:	4332      	orrs	r2, r6
 80012c6:	432a      	orrs	r2, r5
 80012c8:	4302      	orrs	r2, r0
 80012ca:	3901      	subs	r1, #1
 80012cc:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012ce:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d0:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012d2:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80012d4:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d6:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80012d8:	f884 5020 	strb.w	r5, [r4, #32]
  return HAL_OK;
 80012dc:	bd70      	pop	{r4, r5, r6, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e0:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e6:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ea:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 80012ee:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 80012f0:	f001 faea 	bl	80028c8 <HAL_CAN_MspInit>
 80012f4:	e788      	b.n	8001208 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001300:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001304:	3c01      	subs	r4, #1
 8001306:	2c01      	cmp	r4, #1
 8001308:	d906      	bls.n	8001318 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001312:	2001      	movs	r0, #1
  }
}
 8001314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001318:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131a:	2900      	cmp	r1, #0
 800131c:	d05a      	beq.n	80013d4 <HAL_CAN_GetRxMessage+0xd8>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800131e:	692c      	ldr	r4, [r5, #16]
 8001320:	07a4      	lsls	r4, r4, #30
 8001322:	d05a      	beq.n	80013da <HAL_CAN_GetRxMessage+0xde>
 8001324:	010c      	lsls	r4, r1, #4
 8001326:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001328:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 800132c:	f007 0704 	and.w	r7, r7, #4
 8001330:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001332:	2f00      	cmp	r7, #0
 8001334:	d15f      	bne.n	80013f6 <HAL_CAN_GetRxMessage+0xfa>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001336:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 800133a:	0d7f      	lsrs	r7, r7, #21
 800133c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800133e:	f8d6 c1b0 	ldr.w	ip, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001342:	f8d6 e1b4 	ldr.w	lr, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001346:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800134a:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800134e:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001350:	f3cc 0c40 	ubfx	ip, ip, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001354:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001358:	f8c2 c00c 	str.w	ip, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800135c:	f00e 050f 	and.w	r5, lr, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001360:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001364:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001366:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001368:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800136a:	6156      	str	r6, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800136c:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	4422      	add	r2, r4
 8001374:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001378:	0a12      	lsrs	r2, r2, #8
 800137a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800137c:	6802      	ldr	r2, [r0, #0]
 800137e:	4422      	add	r2, r4
 8001380:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001384:	0c12      	lsrs	r2, r2, #16
 8001386:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001388:	6802      	ldr	r2, [r0, #0]
 800138a:	4422      	add	r2, r4
 800138c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001390:	0e12      	lsrs	r2, r2, #24
 8001392:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001394:	6802      	ldr	r2, [r0, #0]
 8001396:	4422      	add	r2, r4
 8001398:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800139c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	4422      	add	r2, r4
 80013a2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013a6:	0a12      	lsrs	r2, r2, #8
 80013a8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	4422      	add	r2, r4
 80013ae:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013b2:	0c12      	lsrs	r2, r2, #16
 80013b4:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013b6:	6802      	ldr	r2, [r0, #0]
 80013b8:	4414      	add	r4, r2
 80013ba:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80013be:	0e12      	lsrs	r2, r2, #24
 80013c0:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013c2:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c4:	b981      	cbnz	r1, 80013e8 <HAL_CAN_GetRxMessage+0xec>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013c6:	68d3      	ldr	r3, [r2, #12]
 80013c8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80013cc:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013ce:	60d3      	str	r3, [r2, #12]
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013d4:	68ec      	ldr	r4, [r5, #12]
 80013d6:	07a6      	lsls	r6, r4, #30
 80013d8:	d1a4      	bne.n	8001324 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e0:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013e8:	6913      	ldr	r3, [r2, #16]
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013f6:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80013fa:	08ff      	lsrs	r7, r7, #3
 80013fc:	6057      	str	r7, [r2, #4]
 80013fe:	e79e      	b.n	800133e <HAL_CAN_GetRxMessage+0x42>

08001400 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <HAL_CAN_TxMailbox0AbortCallback>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <HAL_CAN_TxMailbox1AbortCallback>:
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <HAL_CAN_TxMailbox2AbortCallback>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_CAN_RxFifo0FullCallback>:
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <HAL_CAN_RxFifo1MsgPendingCallback>:
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <HAL_CAN_RxFifo1FullCallback>:
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <HAL_CAN_SleepCallback>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <HAL_CAN_IRQHandler>:
{
 8001430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001438:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800143c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800143e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001442:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001446:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800144a:	f014 0501 	ands.w	r5, r4, #1
{
 800144e:	4606      	mov	r6, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001450:	d025      	beq.n	800149e <HAL_CAN_IRQHandler+0x6e>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001452:	f017 0501 	ands.w	r5, r7, #1
 8001456:	f040 809f 	bne.w	8001598 <HAL_CAN_IRQHandler+0x168>
 800145a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001462:	05f8      	lsls	r0, r7, #23
 8001464:	d50d      	bpl.n	8001482 <HAL_CAN_IRQHandler+0x52>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001466:	6833      	ldr	r3, [r6, #0]
 8001468:	f44f 7080 	mov.w	r0, #256	; 0x100
 800146c:	6098      	str	r0, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800146e:	05bb      	lsls	r3, r7, #22
 8001470:	f100 80ca 	bmi.w	8001608 <HAL_CAN_IRQHandler+0x1d8>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001474:	0578      	lsls	r0, r7, #21
 8001476:	f100 80da 	bmi.w	800162e <HAL_CAN_IRQHandler+0x1fe>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800147a:	053b      	lsls	r3, r7, #20
 800147c:	f140 80eb 	bpl.w	8001656 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001480:	460d      	mov	r5, r1
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001482:	03f8      	lsls	r0, r7, #15
 8001484:	d50b      	bpl.n	800149e <HAL_CAN_IRQHandler+0x6e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001486:	6833      	ldr	r3, [r6, #0]
 8001488:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800148c:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800148e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001490:	f100 80b6 	bmi.w	8001600 <HAL_CAN_IRQHandler+0x1d0>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001494:	037a      	lsls	r2, r7, #13
 8001496:	f140 80cc 	bpl.w	8001632 <HAL_CAN_IRQHandler+0x202>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800149a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800149e:	0727      	lsls	r7, r4, #28
 80014a0:	d502      	bpl.n	80014a8 <HAL_CAN_IRQHandler+0x78>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014a2:	f01b 0f10 	tst.w	fp, #16
 80014a6:	d171      	bne.n	800158c <HAL_CAN_IRQHandler+0x15c>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014a8:	0760      	lsls	r0, r4, #29
 80014aa:	d503      	bpl.n	80014b4 <HAL_CAN_IRQHandler+0x84>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014ac:	f01b 0f08 	tst.w	fp, #8
 80014b0:	f040 8082 	bne.w	80015b8 <HAL_CAN_IRQHandler+0x188>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014b4:	07a1      	lsls	r1, r4, #30
 80014b6:	d504      	bpl.n	80014c2 <HAL_CAN_IRQHandler+0x92>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b8:	6833      	ldr	r3, [r6, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	079a      	lsls	r2, r3, #30
 80014be:	f040 8090 	bne.w	80015e2 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c2:	0663      	lsls	r3, r4, #25
 80014c4:	d502      	bpl.n	80014cc <HAL_CAN_IRQHandler+0x9c>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014c6:	f019 0f10 	tst.w	r9, #16
 80014ca:	d159      	bne.n	8001580 <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014cc:	06a7      	lsls	r7, r4, #26
 80014ce:	d503      	bpl.n	80014d8 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014d0:	f019 0f08 	tst.w	r9, #8
 80014d4:	f040 8089 	bne.w	80015ea <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014d8:	06e0      	lsls	r0, r4, #27
 80014da:	d504      	bpl.n	80014e6 <HAL_CAN_IRQHandler+0xb6>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	0799      	lsls	r1, r3, #30
 80014e2:	f040 8089 	bne.w	80015f8 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014e6:	03a2      	lsls	r2, r4, #14
 80014e8:	d502      	bpl.n	80014f0 <HAL_CAN_IRQHandler+0xc0>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014ea:	f018 0f10 	tst.w	r8, #16
 80014ee:	d16a      	bne.n	80015c6 <HAL_CAN_IRQHandler+0x196>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014f0:	03e3      	lsls	r3, r4, #15
 80014f2:	d502      	bpl.n	80014fa <HAL_CAN_IRQHandler+0xca>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014f4:	f018 0f08 	tst.w	r8, #8
 80014f8:	d16c      	bne.n	80015d4 <HAL_CAN_IRQHandler+0x1a4>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014fa:	0427      	lsls	r7, r4, #16
 80014fc:	d505      	bpl.n	800150a <HAL_CAN_IRQHandler+0xda>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014fe:	f018 0f04 	tst.w	r8, #4
 8001502:	d10b      	bne.n	800151c <HAL_CAN_IRQHandler+0xec>
 8001504:	6833      	ldr	r3, [r6, #0]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001506:	2204      	movs	r2, #4
 8001508:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800150a:	b12d      	cbz	r5, 8001518 <HAL_CAN_IRQHandler+0xe8>
    hcan->ErrorCode |= errorcode;
 800150c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800150e:	431d      	orrs	r5, r3
 8001510:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff ff8a 	bl	800142c <HAL_CAN_ErrorCallback>
 8001518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800151c:	05e0      	lsls	r0, r4, #23
 800151e:	d504      	bpl.n	800152a <HAL_CAN_IRQHandler+0xfa>
 8001520:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001524:	bf18      	it	ne
 8001526:	f045 0501 	orrne.w	r5, r5, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800152a:	05a1      	lsls	r1, r4, #22
 800152c:	d504      	bpl.n	8001538 <HAL_CAN_IRQHandler+0x108>
 800152e:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8001532:	bf18      	it	ne
 8001534:	f045 0502 	orrne.w	r5, r5, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001538:	0562      	lsls	r2, r4, #21
 800153a:	d504      	bpl.n	8001546 <HAL_CAN_IRQHandler+0x116>
 800153c:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8001540:	bf18      	it	ne
 8001542:	f045 0504 	orrne.w	r5, r5, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001546:	0523      	lsls	r3, r4, #20
 8001548:	d5dc      	bpl.n	8001504 <HAL_CAN_IRQHandler+0xd4>
 800154a:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800154e:	d0d9      	beq.n	8001504 <HAL_CAN_IRQHandler+0xd4>
        switch (esrflags & CAN_ESR_LEC)
 8001550:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001554:	f000 808d 	beq.w	8001672 <HAL_CAN_IRQHandler+0x242>
 8001558:	d970      	bls.n	800163c <HAL_CAN_IRQHandler+0x20c>
 800155a:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800155e:	f000 8085 	beq.w	800166c <HAL_CAN_IRQHandler+0x23c>
 8001562:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8001566:	f000 8087 	beq.w	8001678 <HAL_CAN_IRQHandler+0x248>
 800156a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800156e:	d101      	bne.n	8001574 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_BR;
 8001570:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	e7c2      	b.n	8001506 <HAL_CAN_IRQHandler+0xd6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001580:	6833      	ldr	r3, [r6, #0]
 8001582:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001584:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	e79f      	b.n	80014cc <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800158c:	6833      	ldr	r3, [r6, #0]
 800158e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001590:	f445 7500 	orr.w	r5, r5, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	e787      	b.n	80014a8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001598:	2201      	movs	r2, #1
 800159a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800159c:	07bb      	lsls	r3, r7, #30
 800159e:	d437      	bmi.n	8001610 <HAL_CAN_IRQHandler+0x1e0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015a0:	077d      	lsls	r5, r7, #29
 80015a2:	d43d      	bmi.n	8001620 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015a4:	f017 0508 	ands.w	r5, r7, #8
 80015a8:	d059      	beq.n	800165e <HAL_CAN_IRQHandler+0x22e>
 80015aa:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80015ae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015b2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80015b6:	e754      	b.n	8001462 <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015b8:	6833      	ldr	r3, [r6, #0]
 80015ba:	2208      	movs	r2, #8
 80015bc:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015be:	4630      	mov	r0, r6
 80015c0:	f7ff ff2a 	bl	8001418 <HAL_CAN_RxFifo0FullCallback>
 80015c4:	e776      	b.n	80014b4 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015c6:	6833      	ldr	r3, [r6, #0]
 80015c8:	2210      	movs	r2, #16
 80015ca:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80015cc:	4630      	mov	r0, r6
 80015ce:	f7ff ff29 	bl	8001424 <HAL_CAN_SleepCallback>
 80015d2:	e78d      	b.n	80014f0 <HAL_CAN_IRQHandler+0xc0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	2208      	movs	r2, #8
 80015d8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015da:	4630      	mov	r0, r6
 80015dc:	f7ff ff24 	bl	8001428 <HAL_CAN_WakeUpFromRxMsgCallback>
 80015e0:	e78b      	b.n	80014fa <HAL_CAN_IRQHandler+0xca>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015e2:	4630      	mov	r0, r6
 80015e4:	f001 f8ae 	bl	8002744 <HAL_CAN_RxFifo0MsgPendingCallback>
 80015e8:	e76b      	b.n	80014c2 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015ea:	6833      	ldr	r3, [r6, #0]
 80015ec:	2208      	movs	r2, #8
 80015ee:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015f0:	4630      	mov	r0, r6
 80015f2:	f7ff ff15 	bl	8001420 <HAL_CAN_RxFifo1FullCallback>
 80015f6:	e76f      	b.n	80014d8 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff ff0f 	bl	800141c <HAL_CAN_RxFifo1MsgPendingCallback>
 80015fe:	e772      	b.n	80014e6 <HAL_CAN_IRQHandler+0xb6>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001600:	4630      	mov	r0, r6
 8001602:	f7ff ff01 	bl	8001408 <HAL_CAN_TxMailbox2CompleteCallback>
 8001606:	e74a      	b.n	800149e <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001608:	4630      	mov	r0, r6
 800160a:	f7ff fefb 	bl	8001404 <HAL_CAN_TxMailbox1CompleteCallback>
 800160e:	e738      	b.n	8001482 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001610:	f7ff fef6 	bl	8001400 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001614:	2500      	movs	r5, #0
 8001616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161e:	e720      	b.n	8001462 <HAL_CAN_IRQHandler+0x32>
 8001620:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001624:	f44f 5220 	mov.w	r2, #10240	; 0x2800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001628:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800162c:	e719      	b.n	8001462 <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800162e:	4615      	mov	r5, r2
 8001630:	e727      	b.n	8001482 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001632:	033b      	lsls	r3, r7, #12
 8001634:	d50b      	bpl.n	800164e <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001636:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 800163a:	e730      	b.n	800149e <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 800163c:	f1ba 0f10 	cmp.w	sl, #16
 8001640:	d01d      	beq.n	800167e <HAL_CAN_IRQHandler+0x24e>
 8001642:	f1ba 0f20 	cmp.w	sl, #32
 8001646:	d195      	bne.n	8001574 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001648:	f045 0510 	orr.w	r5, r5, #16
            break;
 800164c:	e792      	b.n	8001574 <HAL_CAN_IRQHandler+0x144>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800164e:	4630      	mov	r0, r6
 8001650:	f7ff fee0 	bl	8001414 <HAL_CAN_TxMailbox2AbortCallback>
 8001654:	e723      	b.n	800149e <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001656:	4630      	mov	r0, r6
 8001658:	f7ff feda 	bl	8001410 <HAL_CAN_TxMailbox1AbortCallback>
 800165c:	e711      	b.n	8001482 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800165e:	f7ff fed5 	bl	800140c <HAL_CAN_TxMailbox0AbortCallback>
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	e6fa      	b.n	8001462 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 800166c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            break;
 8001670:	e780      	b.n	8001574 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001672:	f045 0520 	orr.w	r5, r5, #32
            break;
 8001676:	e77d      	b.n	8001574 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001678:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            break;
 800167c:	e77a      	b.n	8001574 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_STF;
 800167e:	f045 0508 	orr.w	r5, r5, #8
            break;
 8001682:	e777      	b.n	8001574 <HAL_CAN_IRQHandler+0x144>

08001684 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001686:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001688:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800168c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800168e:	0200      	lsls	r0, r0, #8
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800169c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800169e:	60d3      	str	r3, [r2, #12]
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b470      	push	{r4, r5, r6}
 80016ac:	68dc      	ldr	r4, [r3, #12]
 80016ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b2:	f1c4 0607 	rsb	r6, r4, #7
 80016b6:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	bf28      	it	cs
 80016be:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c0:	2b06      	cmp	r3, #6
 80016c2:	d917      	bls.n	80016f4 <HAL_NVIC_SetPriority+0x4c>
 80016c4:	3c03      	subs	r4, #3
 80016c6:	2501      	movs	r5, #1
 80016c8:	40a5      	lsls	r5, r4
 80016ca:	3d01      	subs	r5, #1
 80016cc:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ce:	2301      	movs	r3, #1
 80016d0:	40b3      	lsls	r3, r6
 80016d2:	3b01      	subs	r3, #1
 80016d4:	4019      	ands	r1, r3
 80016d6:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80016d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016da:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80016de:	db0c      	blt.n	80016fa <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80016e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80016e8:	0109      	lsls	r1, r1, #4
 80016ea:	b2c9      	uxtb	r1, r1
 80016ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016f0:	bc70      	pop	{r4, r5, r6}
 80016f2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f4:	2200      	movs	r2, #0
 80016f6:	4614      	mov	r4, r2
 80016f8:	e7e9      	b.n	80016ce <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_NVIC_SetPriority+0x68>)
 80016fc:	f000 000f 	and.w	r0, r0, #15
 8001700:	0109      	lsls	r1, r1, #4
 8001702:	4403      	add	r3, r0
 8001704:	b2c9      	uxtb	r1, r1
 8001706:	7619      	strb	r1, [r3, #24]
 8001708:	bc70      	pop	{r4, r5, r6}
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	e000ecfc 	.word	0xe000ecfc

08001714 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001714:	f000 011f 	and.w	r1, r0, #31
 8001718:	2301      	movs	r3, #1
 800171a:	0940      	lsrs	r0, r0, #5
 800171c:	4a02      	ldr	r2, [pc, #8]	; (8001728 <HAL_NVIC_EnableIRQ+0x14>)
 800171e:	408b      	lsls	r3, r1
 8001720:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	3801      	subs	r0, #1
 800172e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001732:	d20e      	bcs.n	8001752 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	4c08      	ldr	r4, [pc, #32]	; (800175c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	20f0      	movs	r0, #240	; 0xf0
 800173e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001742:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001744:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001746:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800174c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001750:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001762:	6809      	ldr	r1, [r1, #0]
 8001764:	2900      	cmp	r1, #0
 8001766:	f000 80d9 	beq.w	800191c <HAL_GPIO_Init+0x1bc>
{
 800176a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176e:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001930 <HAL_GPIO_Init+0x1d0>
{
 8001772:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001774:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001776:	f04f 0801 	mov.w	r8, #1
 800177a:	e079      	b.n	8001870 <HAL_GPIO_Init+0x110>
 800177c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001780:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001782:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	fa03 f309 	lsl.w	r3, r3, r9
 800178a:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178c:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001790:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001798:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179c:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80017a4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a6:	f240 8098 	bls.w	80018da <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 80017aa:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b0:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b2:	fa02 f209 	lsl.w	r2, r2, r9
 80017b6:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b8:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 80017ba:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017bc:	d554      	bpl.n	8001868 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_GPIO_Init+0x1c0>)
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_GPIO_Init+0x1c0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	6993      	ldr	r3, [r2, #24]
 80017cc:	f025 0603 	bic.w	r6, r5, #3
 80017d0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80017dc:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80017de:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80017e4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f04f 090f 	mov.w	r9, #15
 80017ec:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80017f4:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f8:	f000 8086 	beq.w	8001908 <HAL_GPIO_Init+0x1a8>
 80017fc:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x1c4>)
 80017fe:	4290      	cmp	r0, r2
 8001800:	f000 8084 	beq.w	800190c <HAL_GPIO_Init+0x1ac>
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x1c8>)
 8001806:	4290      	cmp	r0, r2
 8001808:	f000 8083 	beq.w	8001912 <HAL_GPIO_Init+0x1b2>
 800180c:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_GPIO_Init+0x1cc>)
 800180e:	4290      	cmp	r0, r2
 8001810:	bf0b      	itete	eq
 8001812:	f04f 0903 	moveq.w	r9, #3
 8001816:	2205      	movne	r2, #5
 8001818:	fa09 f303 	lsleq.w	r3, r9, r3
 800181c:	fa02 f303 	lslne.w	r3, r2, r3
 8001820:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001824:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001826:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800182a:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 800182e:	bf54      	ite	pl
 8001830:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001832:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001834:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001838:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 800183e:	bf54      	ite	pl
 8001840:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001842:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8001844:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001848:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 800184e:	bf54      	ite	pl
 8001850:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001852:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8001854:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001858:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800185e:	bf54      	ite	pl
 8001860:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001862:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8001864:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001868:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800186a:	fa31 f305 	lsrs.w	r3, r1, r5
 800186e:	d048      	beq.n	8001902 <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001870:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8001874:	ea12 0701 	ands.w	r7, r2, r1
 8001878:	d0f6      	beq.n	8001868 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800187e:	f024 0a10 	bic.w	sl, r4, #16
 8001882:	f1ba 0f02 	cmp.w	sl, #2
 8001886:	f47f af79 	bne.w	800177c <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 800188a:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 800188e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001892:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001896:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f04f 0a0f 	mov.w	sl, #15
 80018a0:	fa0a fb03 	lsl.w	fp, sl, r3
 80018a4:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a8:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80018ac:	fa06 f303 	lsl.w	r3, r6, r3
 80018b0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80018b4:	f8c9 3020 	str.w	r3, [r9, #32]
 80018b8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018bc:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80018be:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c2:	fa03 f309 	lsl.w	r3, r3, r9
 80018c6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018cc:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	fa06 f609 	lsl.w	r6, r6, r9
 80018d4:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80018d8:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80018da:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e0:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80018e4:	fa06 f609 	lsl.w	r6, r6, r9
 80018e8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80018ec:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80018ee:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018fa:	40ae      	lsls	r6, r5
 80018fc:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80018fe:	6046      	str	r6, [r0, #4]
 8001900:	e753      	b.n	80017aa <HAL_GPIO_Init+0x4a>
  }
}
 8001902:	b003      	add	sp, #12
 8001904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001908:	2300      	movs	r3, #0
 800190a:	e789      	b.n	8001820 <HAL_GPIO_Init+0xc0>
 800190c:	fa08 f303 	lsl.w	r3, r8, r3
 8001910:	e786      	b.n	8001820 <HAL_GPIO_Init+0xc0>
 8001912:	f04f 0902 	mov.w	r9, #2
 8001916:	fa09 f303 	lsl.w	r3, r9, r3
 800191a:	e781      	b.n	8001820 <HAL_GPIO_Init+0xc0>
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	b90a      	cbnz	r2, 800193a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001936:	6281      	str	r1, [r0, #40]	; 0x28
 8001938:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	6181      	str	r1, [r0, #24]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001940:	6943      	ldr	r3, [r0, #20]
 8001942:	4059      	eors	r1, r3
 8001944:	6141      	str	r1, [r0, #20]
 8001946:	4770      	bx	lr

08001948 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001948:	2800      	cmp	r0, #0
 800194a:	f000 82cb 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x59c>
{
 800194e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	6803      	ldr	r3, [r0, #0]
 8001954:	07d9      	lsls	r1, r3, #31
{
 8001956:	b083      	sub	sp, #12
 8001958:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	d543      	bpl.n	80019e4 <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195c:	49b7      	ldr	r1, [pc, #732]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 800195e:	684a      	ldr	r2, [r1, #4]
 8001960:	f002 020c 	and.w	r2, r2, #12
 8001964:	2a04      	cmp	r2, #4
 8001966:	f000 81b0 	beq.w	8001cca <HAL_RCC_OscConfig+0x382>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196a:	684a      	ldr	r2, [r1, #4]
 800196c:	f002 020c 	and.w	r2, r2, #12
 8001970:	2a08      	cmp	r2, #8
 8001972:	f000 81a6 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x37a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	6863      	ldr	r3, [r4, #4]
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	f000 8218 	beq.w	8001db0 <HAL_RCC_OscConfig+0x468>
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8161 	beq.w	8001c48 <HAL_RCC_OscConfig+0x300>
 8001986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198a:	f000 829e 	beq.w	8001eca <HAL_RCC_OscConfig+0x582>
 800198e:	4bab      	ldr	r3, [pc, #684]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800199e:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a0:	4da6      	ldr	r5, [pc, #664]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 80019a2:	68a2      	ldr	r2, [r4, #8]
 80019a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80019a6:	f023 030f 	bic.w	r3, r3, #15
 80019aa:	4313      	orrs	r3, r2
 80019ac:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fc1d 	bl	80011ec <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80019b6:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b8:	2601      	movs	r6, #1
 80019ba:	e005      	b.n	80019c8 <HAL_RCC_OscConfig+0x80>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fc16 	bl	80011ec <HAL_GetTick>
 80019c0:	1bc0      	subs	r0, r0, r7
 80019c2:	2864      	cmp	r0, #100	; 0x64
 80019c4:	f200 8179 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 80019c8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	682a      	ldr	r2, [r5, #0]
 80019ce:	fa98 f3a8 	rbit	r3, r8
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	fa06 f303 	lsl.w	r3, r6, r3
 80019de:	4213      	tst	r3, r2
 80019e0:	d0ec      	beq.n	80019bc <HAL_RCC_OscConfig+0x74>
 80019e2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e4:	079f      	lsls	r7, r3, #30
 80019e6:	d542      	bpl.n	8001a6e <HAL_RCC_OscConfig+0x126>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019e8:	4a94      	ldr	r2, [pc, #592]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 80019ea:	6851      	ldr	r1, [r2, #4]
 80019ec:	f011 0f0c 	tst.w	r1, #12
 80019f0:	f000 80c9 	beq.w	8001b86 <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019f4:	6851      	ldr	r1, [r2, #4]
 80019f6:	f001 010c 	and.w	r1, r1, #12
 80019fa:	2908      	cmp	r1, #8
 80019fc:	f000 80bf 	beq.w	8001b7e <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	6922      	ldr	r2, [r4, #16]
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	f000 81ae 	beq.w	8001d64 <HAL_RCC_OscConfig+0x41c>
 8001a08:	2201      	movs	r2, #1
 8001a0a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a1a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8001a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a20:	f7ff fbe4 	bl	80011ec <HAL_GetTick>
 8001a24:	f04f 0802 	mov.w	r8, #2
 8001a28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4d84      	ldr	r5, [pc, #528]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001a2c:	e005      	b.n	8001a3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fbdd 	bl	80011ec <HAL_GetTick>
 8001a32:	1bc0      	subs	r0, r0, r7
 8001a34:	2802      	cmp	r0, #2
 8001a36:	f200 8140 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001a3a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	682a      	ldr	r2, [r5, #0]
 8001a40:	fa98 f3a8 	rbit	r3, r8
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa06 f303 	lsl.w	r3, r6, r3
 8001a50:	4213      	tst	r3, r2
 8001a52:	d0ec      	beq.n	8001a2e <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	6829      	ldr	r1, [r5, #0]
 8001a56:	22f8      	movs	r2, #248	; 0xf8
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	6963      	ldr	r3, [r4, #20]
 8001a5e:	fab2 f282 	clz	r2, r2
 8001a62:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001a66:	4093      	lsls	r3, r2
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	602b      	str	r3, [r5, #0]
 8001a6c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	071d      	lsls	r5, r3, #28
 8001a70:	d421      	bmi.n	8001ab6 <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a72:	0758      	lsls	r0, r3, #29
 8001a74:	d54d      	bpl.n	8001b12 <HAL_RCC_OscConfig+0x1ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	00d1      	lsls	r1, r2, #3
 8001a7c:	f140 80c1 	bpl.w	8001c02 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001a80:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4d6e      	ldr	r5, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x2f8>)
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	05da      	lsls	r2, r3, #23
 8001a8a:	f140 8106 	bpl.w	8001c9a <HAL_RCC_OscConfig+0x352>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	68e3      	ldr	r3, [r4, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	f000 8193 	beq.w	8001dbc <HAL_RCC_OscConfig+0x474>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 812e 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x3b0>
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	f000 81b5 	beq.w	8001e10 <HAL_RCC_OscConfig+0x4c8>
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	621a      	str	r2, [r3, #32]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	621a      	str	r2, [r3, #32]
 8001ab4:	e187      	b.n	8001dc6 <HAL_RCC_OscConfig+0x47e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab6:	69a2      	ldr	r2, [r4, #24]
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d07b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x26c>
 8001abc:	2201      	movs	r2, #1
 8001abe:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac4:	4e5d      	ldr	r6, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	fab1 f181 	clz	r1, r1
 8001aca:	440b      	add	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8001ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fb8b 	bl	80011ec <HAL_GetTick>
 8001ad6:	f04f 0802 	mov.w	r8, #2
 8001ada:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001adc:	e005      	b.n	8001aea <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff fb85 	bl	80011ec <HAL_GetTick>
 8001ae2:	1bc0      	subs	r0, r0, r7
 8001ae4:	2802      	cmp	r0, #2
 8001ae6:	f200 80e8 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001aea:	fa98 f3a8 	rbit	r3, r8
 8001aee:	fa98 f3a8 	rbit	r3, r8
 8001af2:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001af8:	fa98 f3a8 	rbit	r3, r8
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa05 f303 	lsl.w	r3, r5, r3
 8001b08:	4213      	tst	r3, r2
 8001b0a:	d0e8      	beq.n	8001ade <HAL_RCC_OscConfig+0x196>
 8001b0c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0e:	0758      	lsls	r0, r3, #29
 8001b10:	d4b1      	bmi.n	8001a76 <HAL_RCC_OscConfig+0x12e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b12:	69e3      	ldr	r3, [r4, #28]
 8001b14:	b37b      	cbz	r3, 8001b76 <HAL_RCC_OscConfig+0x22e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b16:	4d49      	ldr	r5, [pc, #292]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001b18:	686a      	ldr	r2, [r5, #4]
 8001b1a:	f002 020c 	and.w	r2, r2, #12
 8001b1e:	2a08      	cmp	r2, #8
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_OscConfig+0x264>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b28:	f000 817a 	beq.w	8001e20 <HAL_RCC_OscConfig+0x4d8>
 8001b2c:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb53 	bl	80011ec <HAL_GetTick>
 8001b46:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b4a:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	2601      	movs	r6, #1
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fb4c 	bl	80011ec <HAL_GetTick>
 8001b54:	1bc0      	subs	r0, r0, r7
 8001b56:	2802      	cmp	r0, #2
 8001b58:	f200 80af 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001b5c:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	682a      	ldr	r2, [r5, #0]
 8001b62:	fa94 f3a4 	rbit	r3, r4
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	fa06 f303 	lsl.w	r3, r6, r3
 8001b72:	4213      	tst	r3, r2
 8001b74:	d1ec      	bne.n	8001b50 <HAL_RCC_OscConfig+0x208>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
}
 8001b78:	b003      	add	sp, #12
 8001b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b7e:	6852      	ldr	r2, [r2, #4]
 8001b80:	03d6      	lsls	r6, r2, #15
 8001b82:	f53f af3d 	bmi.w	8001a00 <HAL_RCC_OscConfig+0xb8>
 8001b86:	2202      	movs	r2, #2
 8001b88:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8c:	492b      	ldr	r1, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001b8e:	6808      	ldr	r0, [r1, #0]
 8001b90:	fa92 f2a2 	rbit	r2, r2
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4202      	tst	r2, r0
 8001ba4:	d039      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2d2>
 8001ba6:	6922      	ldr	r2, [r4, #16]
 8001ba8:	428a      	cmp	r2, r1
 8001baa:	d036      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2d2>
    return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bb4:	2501      	movs	r5, #1
 8001bb6:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4e1f      	ldr	r6, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	fab1 f181 	clz	r1, r1
 8001bc2:	440b      	add	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f04f 0802 	mov.w	r8, #2
 8001bca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fb0e 	bl	80011ec <HAL_GetTick>
 8001bd0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd2:	e004      	b.n	8001bde <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fb0a 	bl	80011ec <HAL_GetTick>
 8001bd8:	1bc0      	subs	r0, r0, r7
 8001bda:	2802      	cmp	r0, #2
 8001bdc:	d86d      	bhi.n	8001cba <HAL_RCC_OscConfig+0x372>
 8001bde:	fa98 f3a8 	rbit	r3, r8
 8001be2:	fa98 f3a8 	rbit	r3, r8
 8001be6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001bec:	fa98 f3a8 	rbit	r3, r8
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa05 f303 	lsl.w	r3, r5, r3
 8001bfc:	4213      	tst	r3, r2
 8001bfe:	d1e9      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x28c>
 8001c00:	e784      	b.n	8001b0c <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c14:	f04f 0801 	mov.w	r8, #1
 8001c18:	e734      	b.n	8001a84 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4d08      	ldr	r5, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x2f4>)
 8001c1c:	21f8      	movs	r1, #248	; 0xf8
 8001c1e:	6828      	ldr	r0, [r5, #0]
 8001c20:	fa91 f1a1 	rbit	r1, r1
 8001c24:	6962      	ldr	r2, [r4, #20]
 8001c26:	fab1 f181 	clz	r1, r1
 8001c2a:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001c2e:	408a      	lsls	r2, r1
 8001c30:	4302      	orrs	r2, r0
 8001c32:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c34:	071d      	lsls	r5, r3, #28
 8001c36:	f57f af1c 	bpl.w	8001a72 <HAL_RCC_OscConfig+0x12a>
 8001c3a:	e73c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x16e>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	10908120 	.word	0x10908120
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c48:	4da7      	ldr	r5, [pc, #668]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001c4a:	682b      	ldr	r3, [r5, #0]
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c50:	602b      	str	r3, [r5, #0]
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c58:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001c5c:	68a2      	ldr	r2, [r4, #8]
 8001c5e:	f023 030f 	bic.w	r3, r3, #15
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001c66:	f7ff fac1 	bl	80011ec <HAL_GetTick>
 8001c6a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001c6e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c70:	2601      	movs	r6, #1
 8001c72:	e004      	b.n	8001c7e <HAL_RCC_OscConfig+0x336>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff faba 	bl	80011ec <HAL_GetTick>
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	2864      	cmp	r0, #100	; 0x64
 8001c7c:	d81d      	bhi.n	8001cba <HAL_RCC_OscConfig+0x372>
 8001c7e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	682a      	ldr	r2, [r5, #0]
 8001c84:	fa98 f3a8 	rbit	r3, r8
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa06 f303 	lsl.w	r3, r6, r3
 8001c94:	4213      	tst	r3, r2
 8001c96:	d1ed      	bne.n	8001c74 <HAL_RCC_OscConfig+0x32c>
 8001c98:	e6a3      	b.n	80019e2 <HAL_RCC_OscConfig+0x9a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ca2:	f7ff faa3 	bl	80011ec <HAL_GetTick>
 8001ca6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	f53f aeef 	bmi.w	8001a8e <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff fa9c 	bl	80011ec <HAL_GetTick>
 8001cb4:	1b80      	subs	r0, r0, r6
 8001cb6:	2864      	cmp	r0, #100	; 0x64
 8001cb8:	d9f6      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8001cba:	2003      	movs	r0, #3
}
 8001cbc:	b003      	add	sp, #12
 8001cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc2:	684a      	ldr	r2, [r1, #4]
 8001cc4:	03d2      	lsls	r2, r2, #15
 8001cc6:	f57f ae56 	bpl.w	8001976 <HAL_RCC_OscConfig+0x2e>
 8001cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cce:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4985      	ldr	r1, [pc, #532]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001cd4:	6808      	ldr	r0, [r1, #0]
 8001cd6:	fa92 f2a2 	rbit	r2, r2
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4202      	tst	r2, r0
 8001cea:	f43f ae7b 	beq.w	80019e4 <HAL_RCC_OscConfig+0x9c>
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	f47f ae77 	bne.w	80019e4 <HAL_RCC_OscConfig+0x9c>
 8001cf6:	e759      	b.n	8001bac <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	4d7b      	ldr	r5, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001cfa:	6a2b      	ldr	r3, [r5, #32]
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	622b      	str	r3, [r5, #32]
 8001d02:	6a2b      	ldr	r3, [r5, #32]
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fa6f 	bl	80011ec <HAL_GetTick>
 8001d0e:	f04f 0902 	mov.w	r9, #2
 8001d12:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d14:	2601      	movs	r6, #1
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_OscConfig+0x3f8>
 8001d18:	fa99 f3a9 	rbit	r3, r9
 8001d1c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d1e:	fa99 f3a9 	rbit	r3, r9
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	fa06 f303 	lsl.w	r3, r6, r3
 8001d2e:	4213      	tst	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fa5b 	bl	80011ec <HAL_GetTick>
 8001d36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d3a:	1bc0      	subs	r0, r0, r7
 8001d3c:	4298      	cmp	r0, r3
 8001d3e:	d8bc      	bhi.n	8001cba <HAL_RCC_OscConfig+0x372>
 8001d40:	fa99 f3a9 	rbit	r3, r9
 8001d44:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0e5      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3d0>
 8001d4c:	6a2a      	ldr	r2, [r5, #32]
 8001d4e:	e7e6      	b.n	8001d1e <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8001d50:	f1b8 0f00 	cmp.w	r8, #0
 8001d54:	f43f aedd 	beq.w	8001b12 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4a63      	ldr	r2, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001d5a:	69d3      	ldr	r3, [r2, #28]
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	e6d6      	b.n	8001b12 <HAL_RCC_OscConfig+0x1ca>
 8001d64:	2501      	movs	r5, #1
 8001d66:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f04f 0802 	mov.w	r8, #2
 8001d7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fa35 	bl	80011ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4e59      	ldr	r6, [pc, #356]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001d84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e004      	b.n	8001d92 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fa30 	bl	80011ec <HAL_GetTick>
 8001d8c:	1bc0      	subs	r0, r0, r7
 8001d8e:	2802      	cmp	r0, #2
 8001d90:	d893      	bhi.n	8001cba <HAL_RCC_OscConfig+0x372>
 8001d92:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	6832      	ldr	r2, [r6, #0]
 8001d98:	fa98 f3a8 	rbit	r3, r8
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa05 f303 	lsl.w	r3, r5, r3
 8001da8:	4213      	tst	r3, r2
 8001daa:	d1ed      	bne.n	8001d88 <HAL_RCC_OscConfig+0x440>
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	e65e      	b.n	8001a6e <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db0:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e5f1      	b.n	80019a0 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001dbe:	6a13      	ldr	r3, [r2, #32]
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa11 	bl	80011ec <HAL_GetTick>
 8001dca:	f04f 0902 	mov.w	r9, #2
 8001dce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4e45      	ldr	r6, [pc, #276]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
 8001dd2:	2501      	movs	r5, #1
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0x4b8>
 8001dd6:	fa99 f3a9 	rbit	r3, r9
 8001dda:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001ddc:	fa99 f3a9 	rbit	r3, r9
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa05 f303 	lsl.w	r3, r5, r3
 8001dec:	4213      	tst	r3, r2
 8001dee:	d1af      	bne.n	8001d50 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff f9fc 	bl	80011ec <HAL_GetTick>
 8001df4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001df8:	1bc0      	subs	r0, r0, r7
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	f63f af5d 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001e00:	fa99 f3a9 	rbit	r3, r9
 8001e04:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0e4      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x48e>
 8001e0c:	6a32      	ldr	r2, [r6, #32]
 8001e0e:	e7e5      	b.n	8001ddc <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	f042 0204 	orr.w	r2, r2, #4
 8001e14:	621a      	str	r2, [r3, #32]
 8001e16:	6a1a      	ldr	r2, [r3, #32]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	621a      	str	r2, [r3, #32]
 8001e1e:	e7d2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x47e>
 8001e20:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e36:	f7ff f9d9 	bl	80011ec <HAL_GetTick>
 8001e3a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001e3e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	2601      	movs	r6, #1
 8001e42:	e005      	b.n	8001e50 <HAL_RCC_OscConfig+0x508>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f9d2 	bl	80011ec <HAL_GetTick>
 8001e48:	1bc0      	subs	r0, r0, r7
 8001e4a:	2802      	cmp	r0, #2
 8001e4c:	f63f af35 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001e50:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	682a      	ldr	r2, [r5, #0]
 8001e56:	fa98 f3a8 	rbit	r3, r8
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	fa06 f303 	lsl.w	r3, r6, r3
 8001e66:	4213      	tst	r3, r2
 8001e68:	d1ec      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6a:	686a      	ldr	r2, [r5, #4]
 8001e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e6e:	6a21      	ldr	r1, [r4, #32]
 8001e70:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e74:	430b      	orrs	r3, r1
 8001e76:	4313      	orrs	r3, r2
 8001e78:	606b      	str	r3, [r5, #4]
 8001e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001e94:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001e96:	f7ff f9a9 	bl	80011ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9a:	4e13      	ldr	r6, [pc, #76]	; (8001ee8 <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001e9c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9e:	2501      	movs	r5, #1
 8001ea0:	e005      	b.n	8001eae <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f9a3 	bl	80011ec <HAL_GetTick>
 8001ea6:	1bc0      	subs	r0, r0, r7
 8001ea8:	2802      	cmp	r0, #2
 8001eaa:	f63f af06 	bhi.w	8001cba <HAL_RCC_OscConfig+0x372>
 8001eae:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb2:	6832      	ldr	r2, [r6, #0]
 8001eb4:	fa94 f3a4 	rbit	r3, r4
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa05 f303 	lsl.w	r3, r5, r3
 8001ec4:	4213      	tst	r3, r2
 8001ec6:	d0ec      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x55a>
 8001ec8:	e655      	b.n	8001b76 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ece:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e55d      	b.n	80019a0 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
}
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eec:	b178      	cbz	r0, 8001f0e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eee:	4a65      	ldr	r2, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x198>)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	428b      	cmp	r3, r1
 8001ef8:	d20b      	bcs.n	8001f12 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f023 0307 	bic.w	r3, r3, #7
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	6813      	ldr	r3, [r2, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001f10:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f12:	6803      	ldr	r3, [r0, #0]
{
 8001f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	079f      	lsls	r7, r3, #30
 8001f1a:	d506      	bpl.n	8001f2a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4c5a      	ldr	r4, [pc, #360]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f1e:	6885      	ldr	r5, [r0, #8]
 8001f20:	6862      	ldr	r2, [r4, #4]
 8001f22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f26:	432a      	orrs	r2, r5
 8001f28:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	07de      	lsls	r6, r3, #31
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	d530      	bpl.n	8001f94 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	6842      	ldr	r2, [r0, #4]
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	f000 8093 	beq.w	8002060 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	2a02      	cmp	r2, #2
 8001f3c:	bf0c      	ite	eq
 8001f3e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001f42:	2302      	movne	r3, #2
 8001f44:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	494f      	ldr	r1, [pc, #316]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f4a:	6808      	ldr	r0, [r1, #0]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	4203      	tst	r3, r0
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4e49      	ldr	r6, [pc, #292]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f64:	6873      	ldr	r3, [r6, #4]
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001f6e:	f7ff f93d 	bl	80011ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f76:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	e005      	b.n	8001f86 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7ff f937 	bl	80011ec <HAL_GetTick>
 8001f7e:	eba0 0008 	sub.w	r0, r0, r8
 8001f82:	42b8      	cmp	r0, r7
 8001f84:	d869      	bhi.n	800205a <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	6873      	ldr	r3, [r6, #4]
 8001f88:	6862      	ldr	r2, [r4, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f92:	d1f2      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_RCC_ClockConfig+0x198>)
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	429d      	cmp	r5, r3
 8001f9e:	d20c      	bcs.n	8001fba <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	432b      	orrs	r3, r5
 8001fa8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	429d      	cmp	r5, r3
 8001fb2:	d002      	beq.n	8001fba <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	0758      	lsls	r0, r3, #29
 8001fbe:	d506      	bpl.n	8001fce <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4931      	ldr	r1, [pc, #196]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001fc2:	68e0      	ldr	r0, [r4, #12]
 8001fc4:	684a      	ldr	r2, [r1, #4]
 8001fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fca:	4302      	orrs	r2, r0
 8001fcc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	0719      	lsls	r1, r3, #28
 8001fd0:	d507      	bpl.n	8001fe2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001fd4:	6921      	ldr	r1, [r4, #16]
 8001fd6:	6853      	ldr	r3, [r2, #4]
 8001fd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fe0:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe6:	f002 010c 	and.w	r1, r2, #12
 8001fea:	2908      	cmp	r1, #8
 8001fec:	d016      	beq.n	800201c <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001ff2:	22f0      	movs	r2, #240	; 0xf0
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002002:	40d3      	lsrs	r3, r2
 8002004:	4822      	ldr	r0, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1a4>)
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_RCC_ClockConfig+0x1a8>)
 8002008:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 800200a:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
 8002010:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002012:	f7ff f8a9 	bl	8001168 <HAL_InitTick>
  return HAL_OK;
 8002016:	2000      	movs	r0, #0
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800201c:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8002020:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002024:	fab1 f181 	clz	r1, r1
 8002028:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 800202c:	40c8      	lsrs	r0, r1
 800202e:	4c1a      	ldr	r4, [pc, #104]	; (8002098 <HAL_RCC_ClockConfig+0x1ac>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002032:	5c23      	ldrb	r3, [r4, r0]
 8002034:	200f      	movs	r0, #15
 8002036:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800203a:	fab0 f080 	clz	r0, r0
 800203e:	f001 010f 	and.w	r1, r1, #15
 8002042:	40c1      	lsrs	r1, r0
 8002044:	4815      	ldr	r0, [pc, #84]	; (800209c <HAL_RCC_ClockConfig+0x1b0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002046:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002048:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800204a:	bf4a      	itet	mi
 800204c:	490f      	ldrmi	r1, [pc, #60]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800204e:	4914      	ldrpl	r1, [pc, #80]	; (80020a0 <HAL_RCC_ClockConfig+0x1b4>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002050:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002054:	fb01 f103 	mul.w	r1, r1, r3
 8002058:	e7ca      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800205a:	2003      	movs	r0, #3
}
 800205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	420b      	tst	r3, r1
 800207e:	f47f af70 	bne.w	8001f62 <HAL_RCC_ClockConfig+0x76>
 8002082:	e797      	b.n	8001fb4 <HAL_RCC_ClockConfig+0xc8>
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	007a1200 	.word	0x007a1200
 8002090:	08003f88 	.word	0x08003f88
 8002094:	20000008 	.word	0x20000008
 8002098:	08003ef4 	.word	0x08003ef4
 800209c:	08003f04 	.word	0x08003f04
 80020a0:	003d0900 	.word	0x003d0900

080020a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80020a6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	f003 010c 	and.w	r1, r3, #12
 80020ac:	2908      	cmp	r1, #8
 80020ae:	d121      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
 80020b0:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80020b4:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020b8:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80020bc:	fab1 f181 	clz	r1, r1
 80020c0:	fa20 f101 	lsr.w	r1, r0, r1
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020c8:	5c40      	ldrb	r0, [r0, r1]
 80020ca:	210f      	movs	r1, #15
 80020cc:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020d0:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020d2:	fab1 f181 	clz	r1, r1
 80020d6:	f002 020f 	and.w	r2, r2, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020da:	bf4c      	ite	mi
 80020dc:	4b08      	ldrmi	r3, [pc, #32]	; (8002100 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020de:	4b09      	ldrpl	r3, [pc, #36]	; (8002104 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020e0:	fa22 f201 	lsr.w	r2, r2, r1
 80020e4:	4908      	ldr	r1, [pc, #32]	; (8002108 <HAL_RCC_GetSysClockFreq+0x64>)
 80020e6:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020e8:	bf48      	it	mi
 80020ea:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80020ee:	fb03 f000 	mul.w	r0, r3, r0
 80020f2:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08003ef4 	.word	0x08003ef4
 8002100:	007a1200 	.word	0x007a1200
 8002104:	003d0900 	.word	0x003d0900
 8002108:	08003f04 	.word	0x08003f04

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002120:	40d3      	lsrs	r3, r2
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	6810      	ldr	r0, [r2, #0]
}    
 800212a:	40d8      	lsrs	r0, r3
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	08003f98 	.word	0x08003f98
 8002138:	20000008 	.word	0x20000008

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x24>)
 800213e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002150:	40d3      	lsrs	r3, r2
 8002152:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	6810      	ldr	r0, [r2, #0]
} 
 800215a:	40d8      	lsrs	r0, r3
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	08003f98 	.word	0x08003f98
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800216c:	2800      	cmp	r0, #0
 800216e:	d066      	beq.n	800223e <HAL_TIM_Base_Init+0xd2>
{ 
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002172:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002176:	4604      	mov	r4, r0
 8002178:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800217c:	2b00      	cmp	r3, #0
 800217e:	d039      	beq.n	80021f4 <HAL_TIM_Base_Init+0x88>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002180:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002182:	4930      	ldr	r1, [pc, #192]	; (8002244 <HAL_TIM_Base_Init+0xd8>)
  htim->State= HAL_TIM_STATE_BUSY;
 8002184:	2202      	movs	r2, #2
 8002186:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800218a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800218c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800218e:	d04f      	beq.n	8002230 <HAL_TIM_Base_Init+0xc4>
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d033      	beq.n	80021fe <HAL_TIM_Base_Init+0x92>
 8002196:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800219a:	428b      	cmp	r3, r1
 800219c:	d02f      	beq.n	80021fe <HAL_TIM_Base_Init+0x92>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 80021a2:	428b      	cmp	r3, r1
 80021a4:	d016      	beq.n	80021d4 <HAL_TIM_Base_Init+0x68>
 80021a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d012      	beq.n	80021d4 <HAL_TIM_Base_Init+0x68>
 80021ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d00e      	beq.n	80021d4 <HAL_TIM_Base_Init+0x68>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b6:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b8:	68e0      	ldr	r0, [r4, #12]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ba:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80021c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021c6:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80021c8:	2201      	movs	r2, #1
 80021ca:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80021ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80021d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021dc:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e2:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80021e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e6:	68e2      	ldr	r2, [r4, #12]
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ea:	6862      	ldr	r2, [r4, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80021ee:	6962      	ldr	r2, [r4, #20]
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
 80021f2:	e7e9      	b.n	80021c8 <HAL_TIM_Base_Init+0x5c>
    htim->Lock = HAL_UNLOCKED;
 80021f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021f8:	f000 fe50 	bl	8002e9c <HAL_TIM_Base_MspInit>
 80021fc:	e7c0      	b.n	8002180 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80021fe:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002200:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002202:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002206:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002208:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800220c:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002218:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800221a:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_TIM_Base_Init+0xdc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221e:	62df      	str	r7, [r3, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002220:	4293      	cmp	r3, r2
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002222:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002224:	d0e3      	beq.n	80021ee <HAL_TIM_Base_Init+0x82>
 8002226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222a:	4293      	cmp	r3, r2
 800222c:	d1cc      	bne.n	80021c8 <HAL_TIM_Base_Init+0x5c>
 800222e:	e7de      	b.n	80021ee <HAL_TIM_Base_Init+0x82>
    tmpcr1 |= Structure->CounterMode;
 8002230:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002234:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002236:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800223a:	432a      	orrs	r2, r5
 800223c:	e7cc      	b.n	80021d8 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40014400 	.word	0x40014400

0800224c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	2000      	movs	r0, #0
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop

08002264 <HAL_TIM_OC_DelayElapsedCallback>:
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_TIM_IC_CaptureCallback>:
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <HAL_TIM_PWM_PulseFinishedCallback>:
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <HAL_TIM_TriggerCallback>:
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002274:	6803      	ldr	r3, [r0, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	0791      	lsls	r1, r2, #30
{
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227e:	d502      	bpl.n	8002286 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0792      	lsls	r2, r2, #30
 8002284:	d465      	bmi.n	8002352 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	0752      	lsls	r2, r2, #29
 800228a:	d502      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	0750      	lsls	r0, r2, #29
 8002290:	d44c      	bmi.n	800232c <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	0711      	lsls	r1, r2, #28
 8002296:	d502      	bpl.n	800229e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	0712      	lsls	r2, r2, #28
 800229c:	d434      	bmi.n	8002308 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	06d0      	lsls	r0, r2, #27
 80022a2:	d502      	bpl.n	80022aa <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	06d1      	lsls	r1, r2, #27
 80022a8:	d41e      	bmi.n	80022e8 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	07d2      	lsls	r2, r2, #31
 80022ae:	d502      	bpl.n	80022b6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	07d0      	lsls	r0, r2, #31
 80022b4:	d46b      	bmi.n	800238e <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	0611      	lsls	r1, r2, #24
 80022ba:	d502      	bpl.n	80022c2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	0612      	lsls	r2, r2, #24
 80022c0:	d46d      	bmi.n	800239e <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	05d0      	lsls	r0, r2, #23
 80022c6:	d502      	bpl.n	80022ce <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	0611      	lsls	r1, r2, #24
 80022cc:	d46f      	bmi.n	80023ae <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	0652      	lsls	r2, r2, #25
 80022d2:	d502      	bpl.n	80022da <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	0650      	lsls	r0, r2, #25
 80022d8:	d451      	bmi.n	800237e <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	0691      	lsls	r1, r2, #26
 80022de:	d502      	bpl.n	80022e6 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	0692      	lsls	r2, r2, #26
 80022e4:	d443      	bmi.n	800236e <HAL_TIM_IRQHandler+0xfa>
 80022e6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80022f8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fa:	d06c      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 80022fc:	f7ff ffb4 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002300:	2200      	movs	r2, #0
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	7722      	strb	r2, [r4, #28]
 8002306:	e7d0      	b.n	80022aa <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002308:	f06f 0208 	mvn.w	r2, #8
 800230c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002310:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002312:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002314:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002318:	d15a      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	f7ff ffa3 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff ffa4 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002324:	2200      	movs	r2, #0
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	7722      	strb	r2, [r4, #28]
 800232a:	e7b8      	b.n	800229e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800232c:	f06f 0204 	mvn.w	r2, #4
 8002330:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002332:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002334:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002336:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800233a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800233c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800233e:	d144      	bne.n	80023ca <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002340:	f7ff ff90 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ff91 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	2200      	movs	r2, #0
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	7722      	strb	r2, [r4, #28]
 8002350:	e79f      	b.n	8002292 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002352:	f06f 0202 	mvn.w	r2, #2
 8002356:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002358:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002360:	d02d      	beq.n	80023be <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	f7ff ff81 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	2200      	movs	r2, #0
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	7722      	strb	r2, [r4, #28]
 800236c:	e78b      	b.n	8002286 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800236e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002372:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002374:	611a      	str	r2, [r3, #16]
}
 8002376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800237a:	f000 b859 	b.w	8002430 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800237e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002382:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ff73 	bl	8002270 <HAL_TIM_TriggerCallback>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	e7a5      	b.n	80022da <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800238e:	f06f 0201 	mvn.w	r2, #1
 8002392:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002394:	4620      	mov	r0, r4
 8002396:	f000 fa4b 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	e78b      	b.n	80022b6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800239e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f000 f845 	bl	8002434 <HAL_TIMEx_BreakCallback>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	e789      	b.n	80022c2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80023b4:	4620      	mov	r0, r4
 80023b6:	f000 f83f 	bl	8002438 <HAL_TIMEx_Break2Callback>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	e787      	b.n	80022ce <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	f7ff ff51 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff ff52 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
 80023c8:	e7cd      	b.n	8002366 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	f7ff ff4d 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 80023ce:	e7bc      	b.n	800234a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	f7ff ff4a 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e7a6      	b.n	8002324 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	f7ff ff45 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff ff46 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
 80023e0:	e78e      	b.n	8002300 <HAL_TIM_IRQHandler+0x8c>
 80023e2:	bf00      	nop

080023e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d016      	beq.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023ec:	6802      	ldr	r2, [r0, #0]
{
 80023ee:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023f0:	4d0e      	ldr	r5, [pc, #56]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80023f2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80023f4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023f6:	42aa      	cmp	r2, r5
 80023f8:	d012      	beq.n	8002420 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023fa:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023fc:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002402:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002406:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002408:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800240a:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 800240c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 800240e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002410:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8002414:	4620      	mov	r0, r4
 8002416:	bc70      	pop	{r4, r5, r6}
 8002418:	4770      	bx	lr
  __HAL_LOCK(htim);
 800241a:	2302      	movs	r3, #2
} 
 800241c:	4618      	mov	r0, r3
 800241e:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002420:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002422:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002426:	432b      	orrs	r3, r5
 8002428:	e7e7      	b.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0x16>
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00

08002430 <HAL_TIMEx_CommutationCallback>:
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop

08002434 <HAL_TIMEx_BreakCallback>:
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800243c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800243e:	07da      	lsls	r2, r3, #31
{
 8002440:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002442:	d506      	bpl.n	8002452 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002444:	6801      	ldr	r1, [r0, #0]
 8002446:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002448:	684a      	ldr	r2, [r1, #4]
 800244a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800244e:	4322      	orrs	r2, r4
 8002450:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002452:	079c      	lsls	r4, r3, #30
 8002454:	d506      	bpl.n	8002464 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002456:	6801      	ldr	r1, [r0, #0]
 8002458:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800245a:	684a      	ldr	r2, [r1, #4]
 800245c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002460:	4322      	orrs	r2, r4
 8002462:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002464:	0759      	lsls	r1, r3, #29
 8002466:	d506      	bpl.n	8002476 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002468:	6801      	ldr	r1, [r0, #0]
 800246a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800246c:	684a      	ldr	r2, [r1, #4]
 800246e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002472:	4322      	orrs	r2, r4
 8002474:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002476:	071a      	lsls	r2, r3, #28
 8002478:	d506      	bpl.n	8002488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800247a:	6801      	ldr	r1, [r0, #0]
 800247c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800247e:	684a      	ldr	r2, [r1, #4]
 8002480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002484:	4322      	orrs	r2, r4
 8002486:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002488:	06dc      	lsls	r4, r3, #27
 800248a:	d506      	bpl.n	800249a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800248c:	6801      	ldr	r1, [r0, #0]
 800248e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002490:	688a      	ldr	r2, [r1, #8]
 8002492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002496:	4322      	orrs	r2, r4
 8002498:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800249a:	0699      	lsls	r1, r3, #26
 800249c:	d506      	bpl.n	80024ac <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800249e:	6801      	ldr	r1, [r0, #0]
 80024a0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024a2:	688a      	ldr	r2, [r1, #8]
 80024a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a8:	4322      	orrs	r2, r4
 80024aa:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024ac:	065a      	lsls	r2, r3, #25
 80024ae:	d509      	bpl.n	80024c4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024b0:	6801      	ldr	r1, [r0, #0]
 80024b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024b4:	684a      	ldr	r2, [r1, #4]
 80024b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80024ba:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024c0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024c2:	d00b      	beq.n	80024dc <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	d506      	bpl.n	80024d6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024c8:	6802      	ldr	r2, [r0, #0]
 80024ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024cc:	6853      	ldr	r3, [r2, #4]
 80024ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6053      	str	r3, [r2, #4]
  }
}
 80024d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024da:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024dc:	684a      	ldr	r2, [r1, #4]
 80024de:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024e0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80024e4:	4322      	orrs	r2, r4
 80024e6:	604a      	str	r2, [r1, #4]
 80024e8:	e7ec      	b.n	80024c4 <UART_AdvFeatureConfig+0x88>
 80024ea:	bf00      	nop

080024ec <HAL_UART_Init>:
  if(huart == NULL)
 80024ec:	2800      	cmp	r0, #0
 80024ee:	f000 80af 	beq.w	8002650 <HAL_UART_Init+0x164>
{
 80024f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80024f4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80024f8:	4604      	mov	r4, r0
 80024fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d031      	beq.n	8002566 <HAL_UART_Init+0x7a>
  __HAL_UART_DISABLE(huart);
 8002502:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002504:	6927      	ldr	r7, [r4, #16]
 8002506:	6966      	ldr	r6, [r4, #20]
 8002508:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800250a:	4a89      	ldr	r2, [pc, #548]	; (8002730 <HAL_UART_Init+0x244>)
  huart->gState = HAL_UART_STATE_BUSY;
 800250c:	2324      	movs	r3, #36	; 0x24
 800250e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002512:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002514:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002516:	f020 0001 	bic.w	r0, r0, #1
 800251a:	6028      	str	r0, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800251c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800251e:	433b      	orrs	r3, r7
 8002520:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002522:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002524:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002526:	4313      	orrs	r3, r2
 8002528:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800252a:	686a      	ldr	r2, [r5, #4]
 800252c:	68e6      	ldr	r6, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800252e:	69a3      	ldr	r3, [r4, #24]
 8002530:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002532:	4880      	ldr	r0, [pc, #512]	; (8002734 <HAL_UART_Init+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002534:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002538:	4332      	orrs	r2, r6
 800253a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800253c:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800253e:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002540:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002544:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002546:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002548:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800254a:	d06f      	beq.n	800262c <HAL_UART_Init+0x140>
 800254c:	4b7a      	ldr	r3, [pc, #488]	; (8002738 <HAL_UART_Init+0x24c>)
 800254e:	429d      	cmp	r5, r3
 8002550:	d00e      	beq.n	8002570 <HAL_UART_Init+0x84>
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	429d      	cmp	r5, r3
 8002558:	d00a      	beq.n	8002570 <HAL_UART_Init+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800255e:	f000 80a2 	beq.w	80026a6 <HAL_UART_Init+0x1ba>
    return HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8002566:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800256a:	f000 fcd5 	bl	8002f18 <HAL_UART_MspInit>
 800256e:	e7c8      	b.n	8002502 <HAL_UART_Init+0x16>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002570:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002574:	f000 8094 	beq.w	80026a0 <HAL_UART_Init+0x1b4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002578:	f7ff fdc8 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 800257c:	6862      	ldr	r2, [r4, #4]
 800257e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002582:	fbb3 f3f2 	udiv	r3, r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800258a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d149      	bne.n	8002624 <HAL_UART_Init+0x138>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002598:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025a2:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ac:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80025ae:	f7fe fe1d 	bl	80011ec <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80025b8:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ba:	d40b      	bmi.n	80025d4 <HAL_UART_Init+0xe8>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	0752      	lsls	r2, r2, #29
 80025c0:	d424      	bmi.n	800260c <HAL_UART_Init+0x120>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80025c2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025c4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80025c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80025ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80025ce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80025d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d4:	69dd      	ldr	r5, [r3, #28]
 80025d6:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80025da:	d1ef      	bne.n	80025bc <HAL_UART_Init+0xd0>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025dc:	f7fe fe06 	bl	80011ec <HAL_GetTick>
 80025e0:	1b80      	subs	r0, r0, r6
 80025e2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e6:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025e8:	d3f4      	bcc.n	80025d4 <HAL_UART_Init+0xe8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	689a      	ldr	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80025f4:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80025fc:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80025fe:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002602:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8002606:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 800260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800260c:	69dd      	ldr	r5, [r3, #28]
 800260e:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8002612:	d1d6      	bne.n	80025c2 <HAL_UART_Init+0xd6>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002614:	f7fe fdea 	bl	80011ec <HAL_GetTick>
 8002618:	1b80      	subs	r0, r0, r6
 800261a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261e:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002620:	d3f4      	bcc.n	800260c <HAL_UART_Init+0x120>
 8002622:	e7e2      	b.n	80025ea <HAL_UART_Init+0xfe>
    UART_AdvFeatureConfig(huart);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff09 	bl	800243c <UART_AdvFeatureConfig>
 800262a:	e7b1      	b.n	8002590 <HAL_UART_Init+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_UART_Init+0x250>)
 800262e:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_UART_Init+0x254>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002636:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	d13b      	bne.n	80026b6 <HAL_UART_Init+0x1ca>
    switch (clocksource)
 800263e:	2b08      	cmp	r3, #8
 8002640:	d834      	bhi.n	80026ac <HAL_UART_Init+0x1c0>
 8002642:	e8df f003 	tbb	[pc, r3]
 8002646:	2a2d      	.short	0x2a2d
 8002648:	33153320 	.word	0x33153320
 800264c:	3333      	.short	0x3333
 800264e:	07          	.byte	0x07
 800264f:	00          	.byte	0x00
    return HAL_ERROR;
 8002650:	2001      	movs	r0, #1
}
 8002652:	4770      	bx	lr
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002654:	6862      	ldr	r2, [r4, #4]
 8002656:	0853      	lsrs	r3, r2, #1
 8002658:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800265c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002660:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002662:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002666:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800266a:	4313      	orrs	r3, r2
 800266c:	60eb      	str	r3, [r5, #12]
 800266e:	e78c      	b.n	800258a <HAL_UART_Init+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002670:	f7ff fd18 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002674:	6862      	ldr	r2, [r4, #4]
 8002676:	6825      	ldr	r5, [r4, #0]
 8002678:	0853      	lsrs	r3, r2, #1
 800267a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800267e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	e7ed      	b.n	8002662 <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002686:	6862      	ldr	r2, [r4, #4]
 8002688:	0853      	lsrs	r3, r2, #1
 800268a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800268e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002692:	fbb3 f3f2 	udiv	r3, r3, r2
 8002696:	b29b      	uxth	r3, r3
 8002698:	e7e3      	b.n	8002662 <HAL_UART_Init+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800269a:	f7ff fd4f 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 800269e:	e7e9      	b.n	8002674 <HAL_UART_Init+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026a0:	f7ff fd34 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 80026a4:	e7e6      	b.n	8002674 <HAL_UART_Init+0x188>
    huart->Instance->BRR = brrtemp;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60eb      	str	r3, [r5, #12]
 80026aa:	e75a      	b.n	8002562 <HAL_UART_Init+0x76>
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_UART_Init+0x248>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
 80026b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	f63f af53 	bhi.w	8002562 <HAL_UART_Init+0x76>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <HAL_UART_Init+0x1d8>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	08002579 	.word	0x08002579
 80026c8:	080026e9 	.word	0x080026e9
 80026cc:	08002719 	.word	0x08002719
 80026d0:	08002563 	.word	0x08002563
 80026d4:	08002713 	.word	0x08002713
 80026d8:	08002563 	.word	0x08002563
 80026dc:	08002563 	.word	0x08002563
 80026e0:	08002563 	.word	0x08002563
 80026e4:	080026ff 	.word	0x080026ff
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026e8:	f7ff fd28 	bl	800213c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026ec:	6862      	ldr	r2, [r4, #4]
 80026ee:	4911      	ldr	r1, [pc, #68]	; (8002734 <HAL_UART_Init+0x248>)
 80026f0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80026f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e745      	b.n	800258a <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026fe:	6862      	ldr	r2, [r4, #4]
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <HAL_UART_Init+0x248>)
 8002702:	0853      	lsrs	r3, r2, #1
 8002704:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002708:	fbb3 f3f2 	udiv	r3, r3, r2
 800270c:	b29b      	uxth	r3, r3
 800270e:	60cb      	str	r3, [r1, #12]
 8002710:	e73b      	b.n	800258a <HAL_UART_Init+0x9e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002712:	f7ff fcc7 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002716:	e7e9      	b.n	80026ec <HAL_UART_Init+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002718:	6862      	ldr	r2, [r4, #4]
 800271a:	4906      	ldr	r1, [pc, #24]	; (8002734 <HAL_UART_Init+0x248>)
 800271c:	0853      	lsrs	r3, r2, #1
 800271e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002722:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002726:	fbb3 f3f2 	udiv	r3, r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	60cb      	str	r3, [r1, #12]
 800272e:	e72c      	b.n	800258a <HAL_UART_Init+0x9e>
 8002730:	efff69f3 	.word	0xefff69f3
 8002734:	40013800 	.word	0x40013800
 8002738:	40004400 	.word	0x40004400
 800273c:	40021000 	.word	0x40021000
 8002740:	08003f14 	.word	0x08003f14

08002744 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_CAN_Start(&hcan);
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8002744:	b510      	push	{r4, lr}
	   HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RXmsg,RxFIFO_Data);
 8002746:	4c08      	ldr	r4, [pc, #32]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002748:	2100      	movs	r1, #0
 800274a:	4623      	mov	r3, r4
 800274c:	f104 0208 	add.w	r2, r4, #8
 8002750:	f7fe fdd4 	bl	80012fc <HAL_CAN_GetRxMessage>
	   CanRxFlag=true;
 8002754:	2301      	movs	r3, #1
 8002756:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	   HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800275a:	2120      	movs	r1, #32
 800275c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 }
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002764:	f7ff b8ec 	b.w	8001940 <HAL_GPIO_TogglePin>
 8002768:	2000008c 	.word	0x2000008c

0800276c <_ZN6CanBus4SendEmhPh>:

short CanBus::Send(unsigned long ID,unsigned char DLC,unsigned char *data)
{
 800276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002770:	4604      	mov	r4, r0
 8002772:	4d28      	ldr	r5, [pc, #160]	; (8002814 <_ZN6CanBus4SendEmhPh+0xa8>)
	Txmsg.DLC=DLC;
	Txmsg.ExtId=ID;
	Txmsg.IDE=this->IDE;
 8002774:	6a80      	ldr	r0, [r0, #40]	; 0x28
	Txmsg.RTR=this->RTR;
 8002776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
								break;
							case 5:
								printf("bit dominant error");
								break;
							case 6:
								printf("CRC error");
 8002778:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800282c <_ZN6CanBus4SendEmhPh+0xc0>
								printf("bit dominant error");
 800277c:	4f26      	ldr	r7, [pc, #152]	; (8002818 <_ZN6CanBus4SendEmhPh+0xac>)
	Txmsg.DLC=DLC;
 800277e:	6122      	str	r2, [r4, #16]
	Txmsg.ExtId=ID;
 8002780:	6061      	str	r1, [r4, #4]
	Txmsg.IDE=this->IDE;
 8002782:	60a0      	str	r0, [r4, #8]
	Txmsg.RTR=this->RTR;
 8002784:	60e3      	str	r3, [r4, #12]
	while(Txok==false)
 8002786:	f894 3020 	ldrb.w	r3, [r4, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d140      	bne.n	8002810 <_ZN6CanBus4SendEmhPh+0xa4>
 800278e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8002792:	6a60      	ldr	r0, [r4, #36]	; 0x24
								printf("bit recessive error");
 8002794:	4e21      	ldr	r6, [pc, #132]	; (800281c <_ZN6CanBus4SendEmhPh+0xb0>)
		if((hcan.Instance->TSR&(0x1<<26))==1)//TME0 is Empty
 8002796:	682b      	ldr	r3, [r5, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
		else if((hcan.Instance->TSR&(0x1<<27))==1)//TME1 is empty
 800279a:	6899      	ldr	r1, [r3, #8]
		else if((hcan.Instance->TSR&(0x1<<28))==1)//TME2 is empty
 800279c:	689b      	ldr	r3, [r3, #8]
						if(error_flag)
 800279e:	2a00      	cmp	r2, #0
 80027a0:	d0f9      	beq.n	8002796 <_ZN6CanBus4SendEmhPh+0x2a>
							switch(error_code)
 80027a2:	1e43      	subs	r3, r0, #1
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d8f6      	bhi.n	8002796 <_ZN6CanBus4SendEmhPh+0x2a>
 80027a8:	e8df f003 	tbb	[pc, r3]
 80027ac:	1a20262c 	.word	0x1a20262c
 80027b0:	030d      	.short	0x030d
								printf("CRC error");
 80027b2:	4640      	mov	r0, r8
 80027b4:	f000 fc42 	bl	800303c <iprintf>
 80027b8:	f894 3020 	ldrb.w	r3, [r4, #32]
								break;
							}
						}
						if(Txok)
 80027bc:	b953      	cbnz	r3, 80027d4 <_ZN6CanBus4SendEmhPh+0x68>
 80027be:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80027c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027c4:	e7e7      	b.n	8002796 <_ZN6CanBus4SendEmhPh+0x2a>
								printf("bit dominant error");
 80027c6:	4638      	mov	r0, r7
 80027c8:	f000 fc38 	bl	800303c <iprintf>
 80027cc:	f894 3020 	ldrb.w	r3, [r4, #32]
						if(Txok)
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f4      	beq.n	80027be <_ZN6CanBus4SendEmhPh+0x52>
						{
							HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 80027d4:	2110      	movs	r1, #16
 80027d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027da:	f7ff f8b1 	bl	8001940 <HAL_GPIO_TogglePin>
 80027de:	e7d2      	b.n	8002786 <_ZN6CanBus4SendEmhPh+0x1a>
								printf("bit recessive error");
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 fc2b 	bl	800303c <iprintf>
 80027e6:	f894 3020 	ldrb.w	r3, [r4, #32]
								break;
 80027ea:	e7e7      	b.n	80027bc <_ZN6CanBus4SendEmhPh+0x50>
								printf("ACK error");
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <_ZN6CanBus4SendEmhPh+0xb4>)
 80027ee:	f000 fc25 	bl	800303c <iprintf>
 80027f2:	f894 3020 	ldrb.w	r3, [r4, #32]
								break;
 80027f6:	e7e1      	b.n	80027bc <_ZN6CanBus4SendEmhPh+0x50>
								printf("form error");
 80027f8:	480a      	ldr	r0, [pc, #40]	; (8002824 <_ZN6CanBus4SendEmhPh+0xb8>)
 80027fa:	f000 fc1f 	bl	800303c <iprintf>
 80027fe:	f894 3020 	ldrb.w	r3, [r4, #32]
								break;
 8002802:	e7db      	b.n	80027bc <_ZN6CanBus4SendEmhPh+0x50>
								printf("staff error");
 8002804:	4808      	ldr	r0, [pc, #32]	; (8002828 <_ZN6CanBus4SendEmhPh+0xbc>)
 8002806:	f000 fc19 	bl	800303c <iprintf>
 800280a:	f894 3020 	ldrb.w	r3, [r4, #32]
								break;
 800280e:	e7d5      	b.n	80027bc <_ZN6CanBus4SendEmhPh+0x50>
						}
	}
}
 8002810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002814:	200000d0 	.word	0x200000d0
 8002818:	08003f68 	.word	0x08003f68
 800281c:	08003f54 	.word	0x08003f54
 8002820:	08003f48 	.word	0x08003f48
 8002824:	08003f3c 	.word	0x08003f3c
 8002828:	08003f30 	.word	0x08003f30
 800282c:	08003f7c 	.word	0x08003f7c

08002830 <HAL_TIM_PeriodElapsedCallback>:
#include "LowlayerHandel.hpp"
extern LowlayerHandelTypedef *plow;
bool IntFlag=false;
int warikan=0;
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 			{
 8002830:	b508      	push	{r3, lr}
	 	 	 	if(htim->Instance==TIM6)
 8002832:	6802      	ldr	r2, [r0, #0]
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002836:	429a      	cmp	r2, r3
 8002838:	d000      	beq.n	800283c <HAL_TIM_PeriodElapsedCallback+0xc>
 800283a:	bd08      	pop	{r3, pc}
	 	 	 		{
 					plow->loca.SendReqest();
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 8002844:	f000 f80a 	bl	800285c <_ZN12localization10SendReqestEv>
 					IntFlag=true;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	bd08      	pop	{r3, pc}
 8002850:	40001000 	.word	0x40001000
 8002854:	200000bc 	.word	0x200000bc
 8002858:	200000b4 	.word	0x200000b4

0800285c <_ZN12localization10SendReqestEv>:
extern unsigned char RxFIFO_Data[6];

 /****************localization*****************************************/

void localization::SendReqest()
{
 800285c:	b508      	push	{r3, lr}
	if(canbus_r->Send(GET_LOCA<<ORDER_BIT_Pos,0,0)!=0)
 800285e:	2300      	movs	r3, #0
 8002860:	6840      	ldr	r0, [r0, #4]
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002868:	f7ff ff80 	bl	800276c <_ZN6CanBus4SendEmhPh>
 800286c:	b900      	cbnz	r0, 8002870 <_ZN12localization10SendReqestEv+0x14>
 800286e:	bd08      	pop	{r3, pc}
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 8002870:	2108      	movs	r1, #8
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
}
 8002876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 800287a:	f7ff b861 	b.w	8001940 <HAL_GPIO_TogglePin>
 800287e:	bf00      	nop

08002880 <MX_CAN_Init>:

/* CAN init function */
void MX_CAN_Init(void)
{

  hcan.Instance = CAN;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_CAN_Init+0x40>)
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <MX_CAN_Init+0x44>)
{
 8002884:	b570      	push	{r4, r5, r6, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = ENABLE;
 8002886:	2101      	movs	r1, #1
  hcan.Instance = CAN;
 8002888:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800288a:	2604      	movs	r6, #4
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800288c:	2200      	movs	r2, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800288e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8002892:	f44f 24c0 	mov.w	r4, #393216	; 0x60000
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002896:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 4;
 8002898:	605e      	str	r6, [r3, #4]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800289a:	60dd      	str	r5, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 800289c:	611c      	str	r4, [r3, #16]
  hcan.Init.AutoBusOff = ENABLE;
 800289e:	7659      	strb	r1, [r3, #25]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80028a0:	609a      	str	r2, [r3, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80028a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80028a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoWakeUp = DISABLE;
 80028a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80028a8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80028aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80028ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80028ae:	f7fe fca3 	bl	80011f8 <HAL_CAN_Init>
 80028b2:	b900      	cbnz	r0, 80028b6 <MX_CAN_Init+0x36>
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 80028b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80028ba:	f000 b9ff 	b.w	8002cbc <Error_Handler>
 80028be:	bf00      	nop
 80028c0:	200000d0 	.word	0x200000d0
 80028c4:	40006400 	.word	0x40006400

080028c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_CAN_MspInit+0x84>)
{
 80028ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 80028d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	9404      	str	r4, [sp, #16]
 80028d6:	9403      	str	r4, [sp, #12]
 80028d8:	9405      	str	r4, [sp, #20]
 80028da:	9406      	str	r4, [sp, #24]
 80028dc:	9407      	str	r4, [sp, #28]
  if(canHandle->Instance==CAN)
 80028de:	d001      	beq.n	80028e4 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80028e0:	b009      	add	sp, #36	; 0x24
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028e4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80028f0:	61da      	str	r2, [r3, #28]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80028f8:	9201      	str	r2, [sp, #4]
 80028fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002902:	615a      	str	r2, [r3, #20]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800290e:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002910:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800291a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291c:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002920:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f7fe ff1c 	bl	8001760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8002928:	4622      	mov	r2, r4
 800292a:	4621      	mov	r1, r4
 800292c:	2014      	movs	r0, #20
 800292e:	f7fe febb 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8002932:	2014      	movs	r0, #20
 8002934:	f7fe feee 	bl	8001714 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8002938:	4622      	mov	r2, r4
 800293a:	4621      	mov	r1, r4
 800293c:	2015      	movs	r0, #21
 800293e:	f7fe feb3 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8002942:	2015      	movs	r0, #21
 8002944:	f7fe fee6 	bl	8001714 <HAL_NVIC_EnableIRQ>
}
 8002948:	b009      	add	sp, #36	; 0x24
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294c:	40006400 	.word	0x40006400

08002950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <MX_GPIO_Init+0x8c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	9404      	str	r4, [sp, #16]
 800295a:	9403      	str	r4, [sp, #12]
 800295c:	9405      	str	r4, [sp, #20]
 800295e:	9406      	str	r4, [sp, #24]
 8002960:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002962:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002964:	4d1e      	ldr	r5, [pc, #120]	; (80029e0 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002996:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002998:	4622      	mov	r2, r4
 800299a:	2138      	movs	r1, #56	; 0x38
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029a2:	f7fe ffc7 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80029a6:	4622      	mov	r2, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	2108      	movs	r1, #8
 80029ac:	f7fe ffc2 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029b4:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f7fe fecd 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80029c6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80029c8:	a903      	add	r1, sp, #12
 80029ca:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = LD3_Pin;
 80029d2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f7fe fec4 	bl	8001760 <HAL_GPIO_Init>

}
 80029d8:	b008      	add	sp, #32
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	48000400 	.word	0x48000400

080029e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e8:	a806      	add	r0, sp, #24
 80029ea:	2228      	movs	r2, #40	; 0x28
 80029ec:	2100      	movs	r1, #0
 80029ee:	f000 fb1d 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f2:	2400      	movs	r4, #0

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f4:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f6:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f8:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029fc:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029fe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a00:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a02:	9402      	str	r4, [sp, #8]
 8002a04:	9401      	str	r4, [sp, #4]
 8002a06:	9403      	str	r4, [sp, #12]
 8002a08:	9404      	str	r4, [sp, #16]
 8002a0a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	f7fe ff9c 	bl	8001948 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a10:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a12:	a801      	add	r0, sp, #4
 8002a14:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a16:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a18:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a1a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a1c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a1e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a20:	f7ff fa64 	bl	8001eec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002a24:	b010      	add	sp, #64	; 0x40
 8002a26:	bd10      	pop	{r4, pc}

08002a28 <main>:
{
 8002a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	ed2d 8b04 	vpush	{d8-d9}
 8002a30:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
  HAL_Init();
 8002a34:	f7fe fbbc 	bl	80011b0 <HAL_Init>
	unsigned char nodeID;

public:
	 void open();
	 void close();
	Aircylinder(CanBus *can,unsigned char ID):canbus(can),nodeID(ID)
 8002a38:	2401      	movs	r4, #1
  SystemClock_Config();
 8002a3a:	f7ff ffd3 	bl	80029e4 <_Z18SystemClock_Configv>
 8002a3e:	2703      	movs	r7, #3
  MX_GPIO_Init();
 8002a40:	f7ff ff86 	bl	8002950 <MX_GPIO_Init>
 8002a44:	2607      	movs	r6, #7
  MX_CAN_Init();
 8002a46:	f7ff ff1b 	bl	8002880 <MX_CAN_Init>
 8002a4a:	2508      	movs	r5, #8
  MX_USART2_UART_Init();
 8002a4c:	f000 fa46 	bl	8002edc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002a50:	f000 f9fe 	bl	8002e50 <MX_TIM6_Init>
	bool txend=false;
	int error_code=0;
	unsigned long IDE;
	unsigned long RTR;
public:
	CanBus(unsigned long _IDE,unsigned long _RTR):IDE(_IDE),RTR(_RTR){
 8002a54:	2300      	movs	r3, #0
	CanBus *canbus;
	void DivideData(float data);
	unsigned char tx_buff[8]={0,};
	unsigned short node_id;
public:
	Motor(CanBus *_canbus,unsigned short _node_id):canbus(_canbus),node_id(_node_id)
 8002a56:	aa18      	add	r2, sp, #96	; 0x60
 8002a58:	2104      	movs	r1, #4
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f04f 0c05 	mov.w	ip, #5
 8002a60:	f04f 0e06 	mov.w	lr, #6
	float currentX=0;
	float currentY=0;
	float currentyaw=0;
	unsigned long timcount1=0,timcount2=0;
public:
	 localization(CanBus *_canbus,CanBus *_canbus_r):canbus(_canbus),canbus_r(_canbus_r)
 8002a64:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002ca4 <main+0x27c>
 8002a68:	f88d 4094 	strb.w	r4, [sp, #148]	; 0x94
 8002a6c:	f8cd d090 	str.w	sp, [sp, #144]	; 0x90
 8002a70:	f8cd d098 	str.w	sp, [sp, #152]	; 0x98
 8002a74:	f8cd d0a0 	str.w	sp, [sp, #160]	; 0xa0
 8002a78:	f8cd d0a8 	str.w	sp, [sp, #168]	; 0xa8
 8002a7c:	f88d 3020 	strb.w	r3, [sp, #32]
 8002a80:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8002a84:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8002a88:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a8c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8002a90:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 8002a94:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8002a98:	9315      	str	r3, [sp, #84]	; 0x54
 8002a9a:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002a9e:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
 8002aa2:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
 8002aa6:	9321      	str	r3, [sp, #132]	; 0x84
 8002aa8:	9322      	str	r3, [sp, #136]	; 0x88
 8002aaa:	9323      	str	r3, [sp, #140]	; 0x8c
 8002aac:	9306      	str	r3, [sp, #24]
 8002aae:	9307      	str	r3, [sp, #28]
 8002ab0:	910a      	str	r1, [sp, #40]	; 0x28
 8002ab2:	9116      	str	r1, [sp, #88]	; 0x58
 8002ab4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8002ab8:	9312      	str	r3, [sp, #72]	; 0x48
 8002aba:	9313      	str	r3, [sp, #76]	; 0x4c
 8002abc:	9017      	str	r0, [sp, #92]	; 0x5c
 8002abe:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
 8002ac2:	931e      	str	r3, [sp, #120]	; 0x78
 8002ac4:	931f      	str	r3, [sp, #124]	; 0x7c
 8002ac6:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
 8002aca:	f8cd d0b0 	str.w	sp, [sp, #176]	; 0xb0
 8002ace:	f8ad 40dc 	strh.w	r4, [sp, #220]	; 0xdc
 8002ad2:	f88d c0b4 	strb.w	ip, [sp, #180]	; 0xb4
 8002ad6:	f8ad c11c 	strh.w	ip, [sp, #284]	; 0x11c
 8002ada:	f88d e0bc 	strb.w	lr, [sp, #188]	; 0xbc
 8002ade:	f8ad e12c 	strh.w	lr, [sp, #300]	; 0x12c
 8002ae2:	f88d 60c4 	strb.w	r6, [sp, #196]	; 0xc4
 8002ae6:	f88d 50cc 	strb.w	r5, [sp, #204]	; 0xcc
 8002aea:	9234      	str	r2, [sp, #208]	; 0xd0
 8002aec:	9238      	str	r2, [sp, #224]	; 0xe0
 8002aee:	923c      	str	r2, [sp, #240]	; 0xf0
 8002af0:	9240      	str	r2, [sp, #256]	; 0x100
 8002af2:	9244      	str	r2, [sp, #272]	; 0x110
 8002af4:	9248      	str	r2, [sp, #288]	; 0x120
 8002af6:	924c      	str	r2, [sp, #304]	; 0x130
 8002af8:	f8cd d0b8 	str.w	sp, [sp, #184]	; 0xb8
 8002afc:	f8cd d0c0 	str.w	sp, [sp, #192]	; 0xc0
 8002b00:	f8cd d0c8 	str.w	sp, [sp, #200]	; 0xc8
 8002b04:	f8ad 00ec 	strh.w	r0, [sp, #236]	; 0xec
 8002b08:	f8ad 70fc 	strh.w	r7, [sp, #252]	; 0xfc
 8002b0c:	f8ad 110c 	strh.w	r1, [sp, #268]	; 0x10c
 8002b10:	9335      	str	r3, [sp, #212]	; 0xd4
 8002b12:	9336      	str	r3, [sp, #216]	; 0xd8
 8002b14:	9339      	str	r3, [sp, #228]	; 0xe4
 8002b16:	933a      	str	r3, [sp, #232]	; 0xe8
 8002b18:	933d      	str	r3, [sp, #244]	; 0xf4
 8002b1a:	933e      	str	r3, [sp, #248]	; 0xf8
 8002b1c:	9341      	str	r3, [sp, #260]	; 0x104
 8002b1e:	9342      	str	r3, [sp, #264]	; 0x108
 8002b20:	9345      	str	r3, [sp, #276]	; 0x114
 8002b22:	9346      	str	r3, [sp, #280]	; 0x118
 8002b24:	9349      	str	r3, [sp, #292]	; 0x124
 8002b26:	934a      	str	r3, [sp, #296]	; 0x128
 8002b28:	934d      	str	r3, [sp, #308]	; 0x134
	CanBus *canbus;
	void DivideData(float data);
	unsigned char tx_buff[8]={0,};
	unsigned short node_id;
public:
	Servo(CanBus *_canbus,unsigned short _node_id):canbus(_canbus),node_id(_node_id)
 8002b2a:	f8ad e1ac 	strh.w	lr, [sp, #428]	; 0x1ac
  plow=&hlow;
 8002b2e:	f8df e180 	ldr.w	lr, [pc, #384]	; 8002cb0 <main+0x288>
 8002b32:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002cb4 <main+0x28c>
 8002b36:	9250      	str	r2, [sp, #320]	; 0x140
 8002b38:	f8ad c19c 	strh.w	ip, [sp, #412]	; 0x19c
	short Maskbyte(int matrixnum,int shiftnum);
	const unsigned long begincmd=0x70;
	unsigned long timecount=0;
	bool beginend=false;
public:
	PS3controller(CanBus *_canbus):canbus(_canbus)
 8002b3c:	aa0c      	add	r2, sp, #48	; 0x30
 8002b3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8002cb8 <main+0x290>
	TIM_HandleTypeDef *htim;
public:
	Timer1(TIM_HandleTypeDef *timhandle,float p):period(p/1000),htim(timhandle),ajustperiod(0)
	{
		/**************initialization******************/
		while(ajustperiod!=period)
 8002b42:	eddf 8a59 	vldr	s17, [pc, #356]	; 8002ca8 <main+0x280>
 8002b46:	f8ad 613c 	strh.w	r6, [sp, #316]	; 0x13c
 8002b4a:	f04f 0a70 	mov.w	sl, #112	; 0x70
 8002b4e:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8002b52:	f8ad 514c 	strh.w	r5, [sp, #332]	; 0x14c
 8002b56:	f8ad 415c 	strh.w	r4, [sp, #348]	; 0x15c
 8002b5a:	934e      	str	r3, [sp, #312]	; 0x138
 8002b5c:	f8cd d150 	str.w	sp, [sp, #336]	; 0x150
 8002b60:	f8cd d160 	str.w	sp, [sp, #352]	; 0x160
 8002b64:	f8ad 016c 	strh.w	r0, [sp, #364]	; 0x16c
 8002b68:	f8cd d170 	str.w	sp, [sp, #368]	; 0x170
 8002b6c:	935d      	str	r3, [sp, #372]	; 0x174
 8002b6e:	f8ad 717c 	strh.w	r7, [sp, #380]	; 0x17c
 8002b72:	f8cd d180 	str.w	sp, [sp, #384]	; 0x180
 8002b76:	9361      	str	r3, [sp, #388]	; 0x184
 8002b78:	f8ad 118c 	strh.w	r1, [sp, #396]	; 0x18c
 8002b7c:	f8cd d190 	str.w	sp, [sp, #400]	; 0x190
 8002b80:	9365      	str	r3, [sp, #404]	; 0x194
 8002b82:	f8cd d1a0 	str.w	sp, [sp, #416]	; 0x1a0
 8002b86:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002b88:	f8cd d1b0 	str.w	sp, [sp, #432]	; 0x1b0
 8002b8c:	936d      	str	r3, [sp, #436]	; 0x1b4
 8002b8e:	935e      	str	r3, [sp, #376]	; 0x178
 8002b90:	9362      	str	r3, [sp, #392]	; 0x188
 8002b92:	9366      	str	r3, [sp, #408]	; 0x198
 8002b94:	936a      	str	r3, [sp, #424]	; 0x1a8
 8002b96:	9351      	str	r3, [sp, #324]	; 0x144
 8002b98:	9352      	str	r3, [sp, #328]	; 0x148
 8002b9a:	9355      	str	r3, [sp, #340]	; 0x154
 8002b9c:	9356      	str	r3, [sp, #344]	; 0x158
 8002b9e:	9359      	str	r3, [sp, #356]	; 0x164
 8002ba0:	935a      	str	r3, [sp, #360]	; 0x168
	Timer1(TIM_HandleTypeDef *timhandle,float p):period(p/1000),htim(timhandle),ajustperiod(0)
 8002ba2:	eef0 7a47 	vmov.f32	s15, s14
 8002ba6:	936e      	str	r3, [sp, #440]	; 0x1b8
 8002ba8:	9375      	str	r3, [sp, #468]	; 0x1d4
 8002baa:	f8ad 61bc 	strh.w	r6, [sp, #444]	; 0x1bc
 8002bae:	f8ad 51cc 	strh.w	r5, [sp, #460]	; 0x1cc
	unsigned short nodeID;
	void Sendreqest(unsigned long cmd);
	long countdata=0;
	float dist=0;
public:
	Encoder(CanBus *_canbus,unsigned char ID):canbus(_canbus),nodeID(ID){
 8002bb2:	f8ad 4234 	strh.w	r4, [sp, #564]	; 0x234
 8002bb6:	f8cd d1c0 	str.w	sp, [sp, #448]	; 0x1c0
 8002bba:	9371      	str	r3, [sp, #452]	; 0x1c4
 8002bbc:	f8cd 31d7 	str.w	r3, [sp, #471]	; 0x1d7
 8002bc0:	9378      	str	r3, [sp, #480]	; 0x1e0
 8002bc2:	f88d 31e4 	strb.w	r3, [sp, #484]	; 0x1e4
 8002bc6:	f8cd d1e8 	str.w	sp, [sp, #488]	; 0x1e8
 8002bca:	f88d 3218 	strb.w	r3, [sp, #536]	; 0x218
 8002bce:	f88d 3219 	strb.w	r3, [sp, #537]	; 0x219
 8002bd2:	938a      	str	r3, [sp, #552]	; 0x228
 8002bd4:	938b      	str	r3, [sp, #556]	; 0x22c
 8002bd6:	938e      	str	r3, [sp, #568]	; 0x238
 8002bd8:	f8ad 0244 	strh.w	r0, [sp, #580]	; 0x244
 8002bdc:	f8cd a1dc 	str.w	sl, [sp, #476]	; 0x1dc
 8002be0:	9372      	str	r3, [sp, #456]	; 0x1c8
 8002be2:	f8cd 91f0 	str.w	r9, [sp, #496]	; 0x1f0
 8002be6:	f8cd c1f4 	str.w	ip, [sp, #500]	; 0x1f4
 8002bea:	9274      	str	r2, [sp, #464]	; 0x1d0
 8002bec:	927b      	str	r2, [sp, #492]	; 0x1ec
 8002bee:	928c      	str	r2, [sp, #560]	; 0x230
 8002bf0:	9290      	str	r2, [sp, #576]	; 0x240
 8002bf2:	f8cd 81f8 	str.w	r8, [sp, #504]	; 0x1f8
 8002bf6:	f8cd 81fc 	str.w	r8, [sp, #508]	; 0x1fc
 8002bfa:	ed8d 7a80 	vstr	s14, [sp, #512]	; 0x200
 8002bfe:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8002c02:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 8002c06:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 8002c0a:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 8002c0e:	ed8d 7a8f 	vstr	s14, [sp, #572]	; 0x23c
 8002c12:	461e      	mov	r6, r3
 8002c14:	9392      	str	r3, [sp, #584]	; 0x248
 8002c16:	461c      	mov	r4, r3
		{
			Prescaler++;
			for(counterperiod=0;counterperiod<65535;counterperiod++)
 8002c18:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002c1c:	f8ad 7254 	strh.w	r7, [sp, #596]	; 0x254
 8002c20:	ed8d 7a93 	vstr	s14, [sp, #588]	; 0x24c
 8002c24:	9294      	str	r2, [sp, #592]	; 0x250
 8002c26:	9396      	str	r3, [sp, #600]	; 0x258
 8002c28:	ed8d 7a97 	vstr	s14, [sp, #604]	; 0x25c
 8002c2c:	9298      	str	r2, [sp, #608]	; 0x260
 8002c2e:	f8ad 1264 	strh.w	r1, [sp, #612]	; 0x264
 8002c32:	939a      	str	r3, [sp, #616]	; 0x268
 8002c34:	ed8d 7a9b 	vstr	s14, [sp, #620]	; 0x26c
 8002c38:	f8ce d000 	str.w	sp, [lr]
		while(ajustperiod!=period)
 8002c3c:	eef4 7a68 	vcmp.f32	s15, s17
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	d026      	beq.n	8002c94 <main+0x26c>
			Prescaler++;
 8002c46:	3601      	adds	r6, #1
 8002c48:	b2b6      	uxth	r6, r6
 8002c4a:	ee07 6a90 	vmov	s15, r6
 8002c4e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8002c52:	2400      	movs	r4, #0
			{
			ajustperiod=((float)Prescaler*((float)counterperiod+1))/HAL_RCC_GetPCLK1Freq();
 8002c54:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8002c58:	ee07 4a90 	vmov	s15, r4
 8002c5c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002c60:	f7ff fa54 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8002c64:	ee38 8a09 	vadd.f32	s16, s16, s18
 8002c68:	ee07 0a90 	vmov	s15, r0
 8002c6c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8002c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			for(counterperiod=0;counterperiod<65535;counterperiod++)
 8002c74:	1c63      	adds	r3, r4, #1
			ajustperiod=((float)Prescaler*((float)counterperiod+1))/HAL_RCC_GetPCLK1Freq();
 8002c76:	eec8 7a07 	vdiv.f32	s15, s16, s14
				if(ajustperiod==period)
 8002c7a:	eef4 7a68 	vcmp.f32	s15, s17
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d0db      	beq.n	8002c3c <main+0x214>
			for(counterperiod=0;counterperiod<65535;counterperiod++)
 8002c84:	b29c      	uxth	r4, r3
 8002c86:	42ac      	cmp	r4, r5
 8002c88:	d1e6      	bne.n	8002c58 <main+0x230>
		while(ajustperiod!=period)
 8002c8a:	eef4 7a68 	vcmp.f32	s15, s17
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	d1d8      	bne.n	8002c46 <main+0x21e>
				{
					break;
				}
			}
		}
		timhandle->Init.Prescaler=(unsigned short)Prescaler-1;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <main+0x284>)
 8002c96:	3e01      	subs	r6, #1

		/***********************************************/
	}
	void Start()
		{
			HAL_TIM_Base_Start_IT(htim);
 8002c98:	4618      	mov	r0, r3
		timhandle->Init.Prescaler=(unsigned short)Prescaler-1;
 8002c9a:	605e      	str	r6, [r3, #4]
		timhandle->Init.Period=(unsigned short)counterperiod;
 8002c9c:	60dc      	str	r4, [r3, #12]
			HAL_TIM_Base_Start_IT(htim);
 8002c9e:	f7ff fad5 	bl	800224c <HAL_TIM_Base_Start_IT>
 8002ca2:	e7fe      	b.n	8002ca2 <main+0x27a>
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	3c23d70b 	.word	0x3c23d70b
 8002cac:	200000f8 	.word	0x200000f8
 8002cb0:	200000bc 	.word	0x200000bc
 8002cb4:	3e851eb8 	.word	0x3e851eb8
 8002cb8:	3d27ef9e 	.word	0x3d27ef9e

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_MspInit+0x2c>)
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	619a      	str	r2, [r3, #24]
 8002cca:	699a      	ldr	r2, [r3, #24]
{
 8002ccc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	f002 0201 	and.w	r2, r2, #1
 8002cd2:	9200      	str	r2, [sp, #0]
 8002cd4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cdc:	61da      	str	r2, [r3, #28]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce8:	b002      	add	sp, #8
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000

08002cf0 <NMI_Handler>:
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf4:	e7fe      	b.n	8002cf4 <HardFault_Handler>
 8002cf6:	bf00      	nop

08002cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <MemManage_Handler>
 8002cfa:	bf00      	nop

08002cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfc:	e7fe      	b.n	8002cfc <BusFault_Handler>
 8002cfe:	bf00      	nop

08002d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler>
 8002d02:	bf00      	nop

08002d04 <SVC_Handler>:
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <DebugMon_Handler>:
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop

08002d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d10:	f7fe ba60 	b.w	80011d4 <HAL_IncTick>

08002d14 <CAN_RX0_IRQHandler>:
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <CAN_RX0_IRQHandler+0x8>)
 8002d16:	f7fe bb8b 	b.w	8001430 <HAL_CAN_IRQHandler>
 8002d1a:	bf00      	nop
 8002d1c:	200000d0 	.word	0x200000d0

08002d20 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <CAN_RX1_IRQHandler+0x8>)
 8002d22:	f7fe bb85 	b.w	8001430 <HAL_CAN_IRQHandler>
 8002d26:	bf00      	nop
 8002d28:	200000d0 	.word	0x200000d0

08002d2c <TIM6_DAC1_IRQHandler>:
void TIM6_DAC1_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <TIM6_DAC1_IRQHandler+0x8>)
 8002d2e:	f7ff baa1 	b.w	8002274 <HAL_TIM_IRQHandler>
 8002d32:	bf00      	nop
 8002d34:	200000f8 	.word	0x200000f8

08002d38 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002d38:	2001      	movs	r0, #1
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002d3e:	f000 f94b 	bl	8002fd8 <__errno>
 8002d42:	2316      	movs	r3, #22
 8002d44:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <_exit>:

void _exit (int status)
{
 8002d4c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002d4e:	f000 f943 	bl	8002fd8 <__errno>
 8002d52:	2316      	movs	r3, #22
 8002d54:	6003      	str	r3, [r0, #0]
 8002d56:	e7fe      	b.n	8002d56 <_exit+0xa>

08002d58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	1e16      	subs	r6, r2, #0
 8002d5c:	dd07      	ble.n	8002d6e <_read+0x16>
 8002d5e:	460c      	mov	r4, r1
 8002d60:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002d62:	f3af 8000 	nop.w
 8002d66:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	42a5      	cmp	r5, r4
 8002d6c:	d1f9      	bne.n	8002d62 <_read+0xa>
	}

return len;
}
 8002d6e:	4630      	mov	r0, r6
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	bf00      	nop

08002d74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d74:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	1e16      	subs	r6, r2, #0
 8002d78:	dd07      	ble.n	8002d8a <_write+0x16>
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002d7e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	42ac      	cmp	r4, r5
 8002d88:	d1f9      	bne.n	8002d7e <_write+0xa>
	}
	return len;
}
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	bf00      	nop

08002d90 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <_sbrk+0x2c>)
{
 8002d92:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	b173      	cbz	r3, 8002db6 <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002d98:	4418      	add	r0, r3
 8002d9a:	4669      	mov	r1, sp
 8002d9c:	4288      	cmp	r0, r1
 8002d9e:	d802      	bhi.n	8002da6 <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002da0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 8002da6:	f000 f917 	bl	8002fd8 <__errno>
 8002daa:	230c      	movs	r3, #12
 8002dac:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002db6:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <_sbrk+0x30>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e7ed      	b.n	8002d98 <_sbrk+0x8>
 8002dbc:	200000c0 	.word	0x200000c0
 8002dc0:	200001ac 	.word	0x200001ac

08002dc4 <_close>:

int _close(int file)
{
	return -1;
}
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002dd8:	2001      	movs	r0, #1
 8002dda:	4770      	bx	lr

08002ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4770      	bx	lr

08002de0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4917      	ldr	r1, [pc, #92]	; (8002e40 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002de6:	4819      	ldr	r0, [pc, #100]	; (8002e4c <SystemInit+0x6c>)
{
 8002de8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dea:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8002dee:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8002df2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8002df6:	681c      	ldr	r4, [r3, #0]
 8002df8:	f044 0401 	orr.w	r4, r4, #1
 8002dfc:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8002dfe:	685c      	ldr	r4, [r3, #4]
 8002e00:	4022      	ands	r2, r4
 8002e02:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e0e:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e16:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e1e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	f022 020f 	bic.w	r2, r2, #15
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002e2a:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002e2c:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002e32:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8002e34:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e36:	608a      	str	r2, [r1, #8]
#endif
}
 8002e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000ed00 	.word	0xe000ed00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	f87fc00c 	.word	0xf87fc00c
 8002e4c:	ff00fccc 	.word	0xff00fccc

08002e50 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e50:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <MX_TIM6_Init+0x44>)
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <MX_TIM6_Init+0x48>)
 8002e56:	6013      	str	r3, [r2, #0]
{
 8002e58:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 0;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e5c:	4610      	mov	r0, r2
  htim6.Init.Prescaler = 0;
 8002e5e:	6053      	str	r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e60:	9301      	str	r3, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	6093      	str	r3, [r2, #8]
  htim6.Init.Period = 0;
 8002e64:	60d3      	str	r3, [r2, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e66:	6193      	str	r3, [r2, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e6c:	f7ff f97e 	bl	800216c <HAL_TIM_Base_Init>
 8002e70:	b960      	cbnz	r0, 8002e8c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e72:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e74:	a901      	add	r1, sp, #4
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e78:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e7c:	f7ff fab2 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	b108      	cbz	r0, 8002e86 <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 8002e82:	f7ff ff1b 	bl	8002cbc <Error_Handler>
  }

}
 8002e86:	b005      	add	sp, #20
 8002e88:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002e8c:	f7ff ff16 	bl	8002cbc <Error_Handler>
 8002e90:	e7ef      	b.n	8002e72 <MX_TIM6_Init+0x22>
 8002e92:	bf00      	nop
 8002e94:	200000f8 	.word	0x200000f8
 8002e98:	40001000 	.word	0x40001000

08002e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_TIM_Base_MspInit+0x3c>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d000      	beq.n	8002ea6 <HAL_TIM_Base_MspInit+0xa>
 8002ea4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ea6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8002eaa:	b500      	push	{lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	f042 0210 	orr.w	r2, r2, #16
 8002eb2:	61da      	str	r2, [r3, #28]
 8002eb4:	69db      	ldr	r3, [r3, #28]
{
 8002eb6:	b083      	sub	sp, #12

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ec4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002ec6:	f7fe fbef 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002eca:	2036      	movs	r0, #54	; 0x36
 8002ecc:	f7fe fc22 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002ed0:	b003      	add	sp, #12
 8002ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ed6:	bf00      	nop
 8002ed8:	40001000 	.word	0x40001000

08002edc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_USART2_UART_Init+0x34>)
 8002ede:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <MX_USART2_UART_Init+0x38>)
{
 8002ee0:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee2:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8002ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002ee6:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eec:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 8002eee:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	6159      	str	r1, [r3, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f00:	f7ff faf4 	bl	80024ec <HAL_UART_Init>
 8002f04:	b900      	cbnz	r0, 8002f08 <MX_USART2_UART_Init+0x2c>
 8002f06:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002f0c:	f7ff bed6 	b.w	8002cbc <Error_Handler>
 8002f10:	20000138 	.word	0x20000138
 8002f14:	40004400 	.word	0x40004400

08002f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f18:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8002f1a:	6801      	ldr	r1, [r0, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_UART_MspInit+0x68>)
{
 8002f1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8002f22:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	9304      	str	r3, [sp, #16]
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	9305      	str	r3, [sp, #20]
 8002f2a:	9306      	str	r3, [sp, #24]
 8002f2c:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f30:	b008      	add	sp, #32
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f38:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002f4c:	9201      	str	r2, [sp, #4]
 8002f4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f56:	615a      	str	r2, [r3, #20]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f60:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f62:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002f64:	f248 0504 	movw	r5, #32772	; 0x8004
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002f70:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f7fe fbf2 	bl	8001760 <HAL_GPIO_Init>
}
 8002f7c:	b008      	add	sp, #32
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	40004400 	.word	0x40004400

08002f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f8a:	e003      	b.n	8002f94 <LoopCopyDataInit>

08002f8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f92:	3104      	adds	r1, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f9c:	d3f6      	bcc.n	8002f8c <CopyDataInit>
	ldr	r2, =_sbss
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fa0:	e002      	b.n	8002fa8 <LoopFillZerobss>

08002fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fa4:	f842 3b04 	str.w	r3, [r2], #4

08002fa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <LoopForever+0x16>)
	cmp	r2, r3
 8002faa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fac:	d3f9      	bcc.n	8002fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fae:	f7ff ff17 	bl	8002de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb2:	f000 f817 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fb6:	f7ff fd37 	bl	8002a28 <main>

08002fba <LoopForever>:

LoopForever:
    b LoopForever
 8002fba:	e7fe      	b.n	8002fba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fbc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002fc0:	08004174 	.word	0x08004174
	ldr	r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fc8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002fcc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002fd0:	200001ac 	.word	0x200001ac

08002fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <ADC1_2_IRQHandler>
	...

08002fd8 <__errno>:
 8002fd8:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <__errno+0x8>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2000000c 	.word	0x2000000c

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	4e0d      	ldr	r6, [pc, #52]	; (800301c <__libc_init_array+0x38>)
 8002fe8:	4c0d      	ldr	r4, [pc, #52]	; (8003020 <__libc_init_array+0x3c>)
 8002fea:	1ba4      	subs	r4, r4, r6
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	2500      	movs	r5, #0
 8002ff0:	42a5      	cmp	r5, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	4e0b      	ldr	r6, [pc, #44]	; (8003024 <__libc_init_array+0x40>)
 8002ff6:	4c0c      	ldr	r4, [pc, #48]	; (8003028 <__libc_init_array+0x44>)
 8002ff8:	f000 ff70 	bl	8003edc <_init>
 8002ffc:	1ba4      	subs	r4, r4, r6
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	2500      	movs	r5, #0
 8003002:	42a5      	cmp	r5, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800300c:	4798      	blx	r3
 800300e:	3501      	adds	r5, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003016:	4798      	blx	r3
 8003018:	3501      	adds	r5, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	0800416c 	.word	0x0800416c
 8003020:	0800416c 	.word	0x0800416c
 8003024:	0800416c 	.word	0x0800416c
 8003028:	08004170 	.word	0x08004170

0800302c <memset>:
 800302c:	4402      	add	r2, r0
 800302e:	4603      	mov	r3, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <iprintf>:
 800303c:	b40f      	push	{r0, r1, r2, r3}
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <iprintf+0x2c>)
 8003040:	b513      	push	{r0, r1, r4, lr}
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	b124      	cbz	r4, 8003050 <iprintf+0x14>
 8003046:	69a3      	ldr	r3, [r4, #24]
 8003048:	b913      	cbnz	r3, 8003050 <iprintf+0x14>
 800304a:	4620      	mov	r0, r4
 800304c:	f000 f84e 	bl	80030ec <__sinit>
 8003050:	ab05      	add	r3, sp, #20
 8003052:	9a04      	ldr	r2, [sp, #16]
 8003054:	68a1      	ldr	r1, [r4, #8]
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	4620      	mov	r0, r4
 800305a:	f000 f959 	bl	8003310 <_vfiprintf_r>
 800305e:	b002      	add	sp, #8
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003064:	b004      	add	sp, #16
 8003066:	4770      	bx	lr
 8003068:	2000000c 	.word	0x2000000c

0800306c <_cleanup_r>:
 800306c:	4901      	ldr	r1, [pc, #4]	; (8003074 <_cleanup_r+0x8>)
 800306e:	f000 b8a9 	b.w	80031c4 <_fwalk_reent>
 8003072:	bf00      	nop
 8003074:	08003be5 	.word	0x08003be5

08003078 <std.isra.0>:
 8003078:	2300      	movs	r3, #0
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	6003      	str	r3, [r0, #0]
 8003080:	6043      	str	r3, [r0, #4]
 8003082:	6083      	str	r3, [r0, #8]
 8003084:	8181      	strh	r1, [r0, #12]
 8003086:	6643      	str	r3, [r0, #100]	; 0x64
 8003088:	81c2      	strh	r2, [r0, #14]
 800308a:	6103      	str	r3, [r0, #16]
 800308c:	6143      	str	r3, [r0, #20]
 800308e:	6183      	str	r3, [r0, #24]
 8003090:	4619      	mov	r1, r3
 8003092:	2208      	movs	r2, #8
 8003094:	305c      	adds	r0, #92	; 0x5c
 8003096:	f7ff ffc9 	bl	800302c <memset>
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <std.isra.0+0x38>)
 800309c:	6263      	str	r3, [r4, #36]	; 0x24
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <std.isra.0+0x3c>)
 80030a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <std.isra.0+0x40>)
 80030a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <std.isra.0+0x44>)
 80030a8:	6224      	str	r4, [r4, #32]
 80030aa:	6323      	str	r3, [r4, #48]	; 0x30
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	bf00      	nop
 80030b0:	08003889 	.word	0x08003889
 80030b4:	080038ab 	.word	0x080038ab
 80030b8:	080038e3 	.word	0x080038e3
 80030bc:	08003907 	.word	0x08003907

080030c0 <__sfmoreglue>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	1e4a      	subs	r2, r1, #1
 80030c4:	2568      	movs	r5, #104	; 0x68
 80030c6:	4355      	muls	r5, r2
 80030c8:	460e      	mov	r6, r1
 80030ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030ce:	f000 f897 	bl	8003200 <_malloc_r>
 80030d2:	4604      	mov	r4, r0
 80030d4:	b140      	cbz	r0, 80030e8 <__sfmoreglue+0x28>
 80030d6:	2100      	movs	r1, #0
 80030d8:	e880 0042 	stmia.w	r0, {r1, r6}
 80030dc:	300c      	adds	r0, #12
 80030de:	60a0      	str	r0, [r4, #8]
 80030e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030e4:	f7ff ffa2 	bl	800302c <memset>
 80030e8:	4620      	mov	r0, r4
 80030ea:	bd70      	pop	{r4, r5, r6, pc}

080030ec <__sinit>:
 80030ec:	6983      	ldr	r3, [r0, #24]
 80030ee:	b510      	push	{r4, lr}
 80030f0:	4604      	mov	r4, r0
 80030f2:	bb33      	cbnz	r3, 8003142 <__sinit+0x56>
 80030f4:	6483      	str	r3, [r0, #72]	; 0x48
 80030f6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80030f8:	6503      	str	r3, [r0, #80]	; 0x50
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <__sinit+0x58>)
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <__sinit+0x5c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6282      	str	r2, [r0, #40]	; 0x28
 8003102:	4298      	cmp	r0, r3
 8003104:	bf04      	itt	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	6183      	streq	r3, [r0, #24]
 800310a:	f000 f81f 	bl	800314c <__sfp>
 800310e:	6060      	str	r0, [r4, #4]
 8003110:	4620      	mov	r0, r4
 8003112:	f000 f81b 	bl	800314c <__sfp>
 8003116:	60a0      	str	r0, [r4, #8]
 8003118:	4620      	mov	r0, r4
 800311a:	f000 f817 	bl	800314c <__sfp>
 800311e:	2200      	movs	r2, #0
 8003120:	60e0      	str	r0, [r4, #12]
 8003122:	2104      	movs	r1, #4
 8003124:	6860      	ldr	r0, [r4, #4]
 8003126:	f7ff ffa7 	bl	8003078 <std.isra.0>
 800312a:	2201      	movs	r2, #1
 800312c:	2109      	movs	r1, #9
 800312e:	68a0      	ldr	r0, [r4, #8]
 8003130:	f7ff ffa2 	bl	8003078 <std.isra.0>
 8003134:	2202      	movs	r2, #2
 8003136:	2112      	movs	r1, #18
 8003138:	68e0      	ldr	r0, [r4, #12]
 800313a:	f7ff ff9d 	bl	8003078 <std.isra.0>
 800313e:	2301      	movs	r3, #1
 8003140:	61a3      	str	r3, [r4, #24]
 8003142:	bd10      	pop	{r4, pc}
 8003144:	08003fa0 	.word	0x08003fa0
 8003148:	0800306d 	.word	0x0800306d

0800314c <__sfp>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <__sfp+0x74>)
 8003150:	681e      	ldr	r6, [r3, #0]
 8003152:	69b3      	ldr	r3, [r6, #24]
 8003154:	4607      	mov	r7, r0
 8003156:	b913      	cbnz	r3, 800315e <__sfp+0x12>
 8003158:	4630      	mov	r0, r6
 800315a:	f7ff ffc7 	bl	80030ec <__sinit>
 800315e:	3648      	adds	r6, #72	; 0x48
 8003160:	68b4      	ldr	r4, [r6, #8]
 8003162:	6873      	ldr	r3, [r6, #4]
 8003164:	3b01      	subs	r3, #1
 8003166:	d503      	bpl.n	8003170 <__sfp+0x24>
 8003168:	6833      	ldr	r3, [r6, #0]
 800316a:	b133      	cbz	r3, 800317a <__sfp+0x2e>
 800316c:	6836      	ldr	r6, [r6, #0]
 800316e:	e7f7      	b.n	8003160 <__sfp+0x14>
 8003170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003174:	b16d      	cbz	r5, 8003192 <__sfp+0x46>
 8003176:	3468      	adds	r4, #104	; 0x68
 8003178:	e7f4      	b.n	8003164 <__sfp+0x18>
 800317a:	2104      	movs	r1, #4
 800317c:	4638      	mov	r0, r7
 800317e:	f7ff ff9f 	bl	80030c0 <__sfmoreglue>
 8003182:	6030      	str	r0, [r6, #0]
 8003184:	2800      	cmp	r0, #0
 8003186:	d1f1      	bne.n	800316c <__sfp+0x20>
 8003188:	230c      	movs	r3, #12
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4604      	mov	r4, r0
 800318e:	4620      	mov	r0, r4
 8003190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003196:	81e3      	strh	r3, [r4, #14]
 8003198:	2301      	movs	r3, #1
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	6665      	str	r5, [r4, #100]	; 0x64
 800319e:	6025      	str	r5, [r4, #0]
 80031a0:	60a5      	str	r5, [r4, #8]
 80031a2:	6065      	str	r5, [r4, #4]
 80031a4:	6125      	str	r5, [r4, #16]
 80031a6:	6165      	str	r5, [r4, #20]
 80031a8:	61a5      	str	r5, [r4, #24]
 80031aa:	2208      	movs	r2, #8
 80031ac:	4629      	mov	r1, r5
 80031ae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031b2:	f7ff ff3b 	bl	800302c <memset>
 80031b6:	6365      	str	r5, [r4, #52]	; 0x34
 80031b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80031ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80031bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80031be:	e7e6      	b.n	800318e <__sfp+0x42>
 80031c0:	08003fa0 	.word	0x08003fa0

080031c4 <_fwalk_reent>:
 80031c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031c8:	4680      	mov	r8, r0
 80031ca:	4689      	mov	r9, r1
 80031cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031d0:	2600      	movs	r6, #0
 80031d2:	b914      	cbnz	r4, 80031da <_fwalk_reent+0x16>
 80031d4:	4630      	mov	r0, r6
 80031d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031da:	68a5      	ldr	r5, [r4, #8]
 80031dc:	6867      	ldr	r7, [r4, #4]
 80031de:	3f01      	subs	r7, #1
 80031e0:	d501      	bpl.n	80031e6 <_fwalk_reent+0x22>
 80031e2:	6824      	ldr	r4, [r4, #0]
 80031e4:	e7f5      	b.n	80031d2 <_fwalk_reent+0xe>
 80031e6:	89ab      	ldrh	r3, [r5, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d907      	bls.n	80031fc <_fwalk_reent+0x38>
 80031ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031f0:	3301      	adds	r3, #1
 80031f2:	d003      	beq.n	80031fc <_fwalk_reent+0x38>
 80031f4:	4629      	mov	r1, r5
 80031f6:	4640      	mov	r0, r8
 80031f8:	47c8      	blx	r9
 80031fa:	4306      	orrs	r6, r0
 80031fc:	3568      	adds	r5, #104	; 0x68
 80031fe:	e7ee      	b.n	80031de <_fwalk_reent+0x1a>

08003200 <_malloc_r>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	1ccd      	adds	r5, r1, #3
 8003204:	f025 0503 	bic.w	r5, r5, #3
 8003208:	3508      	adds	r5, #8
 800320a:	2d0c      	cmp	r5, #12
 800320c:	bf38      	it	cc
 800320e:	250c      	movcc	r5, #12
 8003210:	2d00      	cmp	r5, #0
 8003212:	4606      	mov	r6, r0
 8003214:	db01      	blt.n	800321a <_malloc_r+0x1a>
 8003216:	42a9      	cmp	r1, r5
 8003218:	d903      	bls.n	8003222 <_malloc_r+0x22>
 800321a:	230c      	movs	r3, #12
 800321c:	6033      	str	r3, [r6, #0]
 800321e:	2000      	movs	r0, #0
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	f000 fd8a 	bl	8003d3a <__malloc_lock>
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <_malloc_r+0xb4>)
 8003228:	6814      	ldr	r4, [r2, #0]
 800322a:	4621      	mov	r1, r4
 800322c:	b991      	cbnz	r1, 8003254 <_malloc_r+0x54>
 800322e:	4c22      	ldr	r4, [pc, #136]	; (80032b8 <_malloc_r+0xb8>)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	b91b      	cbnz	r3, 800323c <_malloc_r+0x3c>
 8003234:	4630      	mov	r0, r6
 8003236:	f000 fb17 	bl	8003868 <_sbrk_r>
 800323a:	6020      	str	r0, [r4, #0]
 800323c:	4629      	mov	r1, r5
 800323e:	4630      	mov	r0, r6
 8003240:	f000 fb12 	bl	8003868 <_sbrk_r>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d126      	bne.n	8003296 <_malloc_r+0x96>
 8003248:	230c      	movs	r3, #12
 800324a:	6033      	str	r3, [r6, #0]
 800324c:	4630      	mov	r0, r6
 800324e:	f000 fd75 	bl	8003d3c <__malloc_unlock>
 8003252:	e7e4      	b.n	800321e <_malloc_r+0x1e>
 8003254:	680b      	ldr	r3, [r1, #0]
 8003256:	1b5b      	subs	r3, r3, r5
 8003258:	d41a      	bmi.n	8003290 <_malloc_r+0x90>
 800325a:	2b0b      	cmp	r3, #11
 800325c:	d90f      	bls.n	800327e <_malloc_r+0x7e>
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	50cd      	str	r5, [r1, r3]
 8003262:	18cc      	adds	r4, r1, r3
 8003264:	4630      	mov	r0, r6
 8003266:	f000 fd69 	bl	8003d3c <__malloc_unlock>
 800326a:	f104 000b 	add.w	r0, r4, #11
 800326e:	1d23      	adds	r3, r4, #4
 8003270:	f020 0007 	bic.w	r0, r0, #7
 8003274:	1ac3      	subs	r3, r0, r3
 8003276:	d01b      	beq.n	80032b0 <_malloc_r+0xb0>
 8003278:	425a      	negs	r2, r3
 800327a:	50e2      	str	r2, [r4, r3]
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	428c      	cmp	r4, r1
 8003280:	bf0d      	iteet	eq
 8003282:	6863      	ldreq	r3, [r4, #4]
 8003284:	684b      	ldrne	r3, [r1, #4]
 8003286:	6063      	strne	r3, [r4, #4]
 8003288:	6013      	streq	r3, [r2, #0]
 800328a:	bf18      	it	ne
 800328c:	460c      	movne	r4, r1
 800328e:	e7e9      	b.n	8003264 <_malloc_r+0x64>
 8003290:	460c      	mov	r4, r1
 8003292:	6849      	ldr	r1, [r1, #4]
 8003294:	e7ca      	b.n	800322c <_malloc_r+0x2c>
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d005      	beq.n	80032ac <_malloc_r+0xac>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 fae0 	bl	8003868 <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d0cd      	beq.n	8003248 <_malloc_r+0x48>
 80032ac:	6025      	str	r5, [r4, #0]
 80032ae:	e7d9      	b.n	8003264 <_malloc_r+0x64>
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
 80032b2:	bf00      	nop
 80032b4:	200000c4 	.word	0x200000c4
 80032b8:	200000c8 	.word	0x200000c8

080032bc <__sfputc_r>:
 80032bc:	6893      	ldr	r3, [r2, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	b410      	push	{r4}
 80032c4:	6093      	str	r3, [r2, #8]
 80032c6:	da09      	bge.n	80032dc <__sfputc_r+0x20>
 80032c8:	6994      	ldr	r4, [r2, #24]
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	db02      	blt.n	80032d4 <__sfputc_r+0x18>
 80032ce:	b2cb      	uxtb	r3, r1
 80032d0:	2b0a      	cmp	r3, #10
 80032d2:	d103      	bne.n	80032dc <__sfputc_r+0x20>
 80032d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032d8:	f000 bb1a 	b.w	8003910 <__swbuf_r>
 80032dc:	6813      	ldr	r3, [r2, #0]
 80032de:	1c58      	adds	r0, r3, #1
 80032e0:	6010      	str	r0, [r2, #0]
 80032e2:	7019      	strb	r1, [r3, #0]
 80032e4:	b2c8      	uxtb	r0, r1
 80032e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <__sfputs_r>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	4606      	mov	r6, r0
 80032f0:	460f      	mov	r7, r1
 80032f2:	4614      	mov	r4, r2
 80032f4:	18d5      	adds	r5, r2, r3
 80032f6:	42ac      	cmp	r4, r5
 80032f8:	d101      	bne.n	80032fe <__sfputs_r+0x12>
 80032fa:	2000      	movs	r0, #0
 80032fc:	e007      	b.n	800330e <__sfputs_r+0x22>
 80032fe:	463a      	mov	r2, r7
 8003300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003304:	4630      	mov	r0, r6
 8003306:	f7ff ffd9 	bl	80032bc <__sfputc_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	d1f3      	bne.n	80032f6 <__sfputs_r+0xa>
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003310 <_vfiprintf_r>:
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	b09d      	sub	sp, #116	; 0x74
 8003316:	460c      	mov	r4, r1
 8003318:	4617      	mov	r7, r2
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	4606      	mov	r6, r0
 800331e:	b118      	cbz	r0, 8003328 <_vfiprintf_r+0x18>
 8003320:	6983      	ldr	r3, [r0, #24]
 8003322:	b90b      	cbnz	r3, 8003328 <_vfiprintf_r+0x18>
 8003324:	f7ff fee2 	bl	80030ec <__sinit>
 8003328:	4b7c      	ldr	r3, [pc, #496]	; (800351c <_vfiprintf_r+0x20c>)
 800332a:	429c      	cmp	r4, r3
 800332c:	d157      	bne.n	80033de <_vfiprintf_r+0xce>
 800332e:	6874      	ldr	r4, [r6, #4]
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	0718      	lsls	r0, r3, #28
 8003334:	d55d      	bpl.n	80033f2 <_vfiprintf_r+0xe2>
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d05a      	beq.n	80033f2 <_vfiprintf_r+0xe2>
 800333c:	2300      	movs	r3, #0
 800333e:	9309      	str	r3, [sp, #36]	; 0x24
 8003340:	2320      	movs	r3, #32
 8003342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003346:	2330      	movs	r3, #48	; 0x30
 8003348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800334c:	f04f 0b01 	mov.w	fp, #1
 8003350:	46b8      	mov	r8, r7
 8003352:	4645      	mov	r5, r8
 8003354:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d155      	bne.n	8003408 <_vfiprintf_r+0xf8>
 800335c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003360:	d00b      	beq.n	800337a <_vfiprintf_r+0x6a>
 8003362:	4653      	mov	r3, sl
 8003364:	463a      	mov	r2, r7
 8003366:	4621      	mov	r1, r4
 8003368:	4630      	mov	r0, r6
 800336a:	f7ff ffbf 	bl	80032ec <__sfputs_r>
 800336e:	3001      	adds	r0, #1
 8003370:	f000 80c4 	beq.w	80034fc <_vfiprintf_r+0x1ec>
 8003374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003376:	4453      	add	r3, sl
 8003378:	9309      	str	r3, [sp, #36]	; 0x24
 800337a:	f898 3000 	ldrb.w	r3, [r8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80bc 	beq.w	80034fc <_vfiprintf_r+0x1ec>
 8003384:	2300      	movs	r3, #0
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	9307      	str	r3, [sp, #28]
 800338e:	9205      	str	r2, [sp, #20]
 8003390:	9306      	str	r3, [sp, #24]
 8003392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003396:	931a      	str	r3, [sp, #104]	; 0x68
 8003398:	2205      	movs	r2, #5
 800339a:	7829      	ldrb	r1, [r5, #0]
 800339c:	4860      	ldr	r0, [pc, #384]	; (8003520 <_vfiprintf_r+0x210>)
 800339e:	f7fc ff17 	bl	80001d0 <memchr>
 80033a2:	f105 0801 	add.w	r8, r5, #1
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d131      	bne.n	8003410 <_vfiprintf_r+0x100>
 80033ac:	06d9      	lsls	r1, r3, #27
 80033ae:	bf44      	itt	mi
 80033b0:	2220      	movmi	r2, #32
 80033b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033b6:	071a      	lsls	r2, r3, #28
 80033b8:	bf44      	itt	mi
 80033ba:	222b      	movmi	r2, #43	; 0x2b
 80033bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033c0:	782a      	ldrb	r2, [r5, #0]
 80033c2:	2a2a      	cmp	r2, #42	; 0x2a
 80033c4:	d02c      	beq.n	8003420 <_vfiprintf_r+0x110>
 80033c6:	9a07      	ldr	r2, [sp, #28]
 80033c8:	2100      	movs	r1, #0
 80033ca:	200a      	movs	r0, #10
 80033cc:	46a8      	mov	r8, r5
 80033ce:	3501      	adds	r5, #1
 80033d0:	f898 3000 	ldrb.w	r3, [r8]
 80033d4:	3b30      	subs	r3, #48	; 0x30
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d96d      	bls.n	80034b6 <_vfiprintf_r+0x1a6>
 80033da:	b371      	cbz	r1, 800343a <_vfiprintf_r+0x12a>
 80033dc:	e026      	b.n	800342c <_vfiprintf_r+0x11c>
 80033de:	4b51      	ldr	r3, [pc, #324]	; (8003524 <_vfiprintf_r+0x214>)
 80033e0:	429c      	cmp	r4, r3
 80033e2:	d101      	bne.n	80033e8 <_vfiprintf_r+0xd8>
 80033e4:	68b4      	ldr	r4, [r6, #8]
 80033e6:	e7a3      	b.n	8003330 <_vfiprintf_r+0x20>
 80033e8:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <_vfiprintf_r+0x218>)
 80033ea:	429c      	cmp	r4, r3
 80033ec:	bf08      	it	eq
 80033ee:	68f4      	ldreq	r4, [r6, #12]
 80033f0:	e79e      	b.n	8003330 <_vfiprintf_r+0x20>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4630      	mov	r0, r6
 80033f6:	f000 faef 	bl	80039d8 <__swsetup_r>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d09e      	beq.n	800333c <_vfiprintf_r+0x2c>
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003402:	b01d      	add	sp, #116	; 0x74
 8003404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003408:	2b25      	cmp	r3, #37	; 0x25
 800340a:	d0a7      	beq.n	800335c <_vfiprintf_r+0x4c>
 800340c:	46a8      	mov	r8, r5
 800340e:	e7a0      	b.n	8003352 <_vfiprintf_r+0x42>
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <_vfiprintf_r+0x210>)
 8003412:	1a80      	subs	r0, r0, r2
 8003414:	fa0b f000 	lsl.w	r0, fp, r0
 8003418:	4318      	orrs	r0, r3
 800341a:	9004      	str	r0, [sp, #16]
 800341c:	4645      	mov	r5, r8
 800341e:	e7bb      	b.n	8003398 <_vfiprintf_r+0x88>
 8003420:	9a03      	ldr	r2, [sp, #12]
 8003422:	1d11      	adds	r1, r2, #4
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	9103      	str	r1, [sp, #12]
 8003428:	2a00      	cmp	r2, #0
 800342a:	db01      	blt.n	8003430 <_vfiprintf_r+0x120>
 800342c:	9207      	str	r2, [sp, #28]
 800342e:	e004      	b.n	800343a <_vfiprintf_r+0x12a>
 8003430:	4252      	negs	r2, r2
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	9207      	str	r2, [sp, #28]
 8003438:	9304      	str	r3, [sp, #16]
 800343a:	f898 3000 	ldrb.w	r3, [r8]
 800343e:	2b2e      	cmp	r3, #46	; 0x2e
 8003440:	d110      	bne.n	8003464 <_vfiprintf_r+0x154>
 8003442:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003446:	2b2a      	cmp	r3, #42	; 0x2a
 8003448:	f108 0101 	add.w	r1, r8, #1
 800344c:	d137      	bne.n	80034be <_vfiprintf_r+0x1ae>
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9203      	str	r2, [sp, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfb8      	it	lt
 800345a:	f04f 33ff 	movlt.w	r3, #4294967295
 800345e:	f108 0802 	add.w	r8, r8, #2
 8003462:	9305      	str	r3, [sp, #20]
 8003464:	4d31      	ldr	r5, [pc, #196]	; (800352c <_vfiprintf_r+0x21c>)
 8003466:	f898 1000 	ldrb.w	r1, [r8]
 800346a:	2203      	movs	r2, #3
 800346c:	4628      	mov	r0, r5
 800346e:	f7fc feaf 	bl	80001d0 <memchr>
 8003472:	b140      	cbz	r0, 8003486 <_vfiprintf_r+0x176>
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	1b40      	subs	r0, r0, r5
 8003478:	fa03 f000 	lsl.w	r0, r3, r0
 800347c:	9b04      	ldr	r3, [sp, #16]
 800347e:	4303      	orrs	r3, r0
 8003480:	9304      	str	r3, [sp, #16]
 8003482:	f108 0801 	add.w	r8, r8, #1
 8003486:	f898 1000 	ldrb.w	r1, [r8]
 800348a:	4829      	ldr	r0, [pc, #164]	; (8003530 <_vfiprintf_r+0x220>)
 800348c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003490:	2206      	movs	r2, #6
 8003492:	f108 0701 	add.w	r7, r8, #1
 8003496:	f7fc fe9b 	bl	80001d0 <memchr>
 800349a:	2800      	cmp	r0, #0
 800349c:	d034      	beq.n	8003508 <_vfiprintf_r+0x1f8>
 800349e:	4b25      	ldr	r3, [pc, #148]	; (8003534 <_vfiprintf_r+0x224>)
 80034a0:	bb03      	cbnz	r3, 80034e4 <_vfiprintf_r+0x1d4>
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	3307      	adds	r3, #7
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	3308      	adds	r3, #8
 80034ac:	9303      	str	r3, [sp, #12]
 80034ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b0:	444b      	add	r3, r9
 80034b2:	9309      	str	r3, [sp, #36]	; 0x24
 80034b4:	e74c      	b.n	8003350 <_vfiprintf_r+0x40>
 80034b6:	fb00 3202 	mla	r2, r0, r2, r3
 80034ba:	2101      	movs	r1, #1
 80034bc:	e786      	b.n	80033cc <_vfiprintf_r+0xbc>
 80034be:	2300      	movs	r3, #0
 80034c0:	9305      	str	r3, [sp, #20]
 80034c2:	4618      	mov	r0, r3
 80034c4:	250a      	movs	r5, #10
 80034c6:	4688      	mov	r8, r1
 80034c8:	3101      	adds	r1, #1
 80034ca:	f898 2000 	ldrb.w	r2, [r8]
 80034ce:	3a30      	subs	r2, #48	; 0x30
 80034d0:	2a09      	cmp	r2, #9
 80034d2:	d903      	bls.n	80034dc <_vfiprintf_r+0x1cc>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0c5      	beq.n	8003464 <_vfiprintf_r+0x154>
 80034d8:	9005      	str	r0, [sp, #20]
 80034da:	e7c3      	b.n	8003464 <_vfiprintf_r+0x154>
 80034dc:	fb05 2000 	mla	r0, r5, r0, r2
 80034e0:	2301      	movs	r3, #1
 80034e2:	e7f0      	b.n	80034c6 <_vfiprintf_r+0x1b6>
 80034e4:	ab03      	add	r3, sp, #12
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4622      	mov	r2, r4
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <_vfiprintf_r+0x228>)
 80034ec:	a904      	add	r1, sp, #16
 80034ee:	4630      	mov	r0, r6
 80034f0:	f3af 8000 	nop.w
 80034f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034f8:	4681      	mov	r9, r0
 80034fa:	d1d8      	bne.n	80034ae <_vfiprintf_r+0x19e>
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	065b      	lsls	r3, r3, #25
 8003500:	f53f af7d 	bmi.w	80033fe <_vfiprintf_r+0xee>
 8003504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003506:	e77c      	b.n	8003402 <_vfiprintf_r+0xf2>
 8003508:	ab03      	add	r3, sp, #12
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	4622      	mov	r2, r4
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <_vfiprintf_r+0x228>)
 8003510:	a904      	add	r1, sp, #16
 8003512:	4630      	mov	r0, r6
 8003514:	f000 f888 	bl	8003628 <_printf_i>
 8003518:	e7ec      	b.n	80034f4 <_vfiprintf_r+0x1e4>
 800351a:	bf00      	nop
 800351c:	08003fc4 	.word	0x08003fc4
 8003520:	08004004 	.word	0x08004004
 8003524:	08003fe4 	.word	0x08003fe4
 8003528:	08003fa4 	.word	0x08003fa4
 800352c:	0800400a 	.word	0x0800400a
 8003530:	0800400e 	.word	0x0800400e
 8003534:	00000000 	.word	0x00000000
 8003538:	080032ed 	.word	0x080032ed

0800353c <_printf_common>:
 800353c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003540:	4691      	mov	r9, r2
 8003542:	461f      	mov	r7, r3
 8003544:	688a      	ldr	r2, [r1, #8]
 8003546:	690b      	ldr	r3, [r1, #16]
 8003548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354c:	4293      	cmp	r3, r2
 800354e:	bfb8      	it	lt
 8003550:	4613      	movlt	r3, r2
 8003552:	f8c9 3000 	str.w	r3, [r9]
 8003556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800355a:	4606      	mov	r6, r0
 800355c:	460c      	mov	r4, r1
 800355e:	b112      	cbz	r2, 8003566 <_printf_common+0x2a>
 8003560:	3301      	adds	r3, #1
 8003562:	f8c9 3000 	str.w	r3, [r9]
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	0699      	lsls	r1, r3, #26
 800356a:	bf42      	ittt	mi
 800356c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003570:	3302      	addmi	r3, #2
 8003572:	f8c9 3000 	strmi.w	r3, [r9]
 8003576:	6825      	ldr	r5, [r4, #0]
 8003578:	f015 0506 	ands.w	r5, r5, #6
 800357c:	d107      	bne.n	800358e <_printf_common+0x52>
 800357e:	f104 0a19 	add.w	sl, r4, #25
 8003582:	68e3      	ldr	r3, [r4, #12]
 8003584:	f8d9 2000 	ldr.w	r2, [r9]
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	429d      	cmp	r5, r3
 800358c:	db29      	blt.n	80035e2 <_printf_common+0xa6>
 800358e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	3300      	adds	r3, #0
 8003596:	bf18      	it	ne
 8003598:	2301      	movne	r3, #1
 800359a:	0692      	lsls	r2, r2, #26
 800359c:	d42e      	bmi.n	80035fc <_printf_common+0xc0>
 800359e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a2:	4639      	mov	r1, r7
 80035a4:	4630      	mov	r0, r6
 80035a6:	47c0      	blx	r8
 80035a8:	3001      	adds	r0, #1
 80035aa:	d021      	beq.n	80035f0 <_printf_common+0xb4>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	68e5      	ldr	r5, [r4, #12]
 80035b0:	f8d9 2000 	ldr.w	r2, [r9]
 80035b4:	f003 0306 	and.w	r3, r3, #6
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	bf08      	it	eq
 80035bc:	1aad      	subeq	r5, r5, r2
 80035be:	68a3      	ldr	r3, [r4, #8]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	bf0c      	ite	eq
 80035c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c8:	2500      	movne	r5, #0
 80035ca:	4293      	cmp	r3, r2
 80035cc:	bfc4      	itt	gt
 80035ce:	1a9b      	subgt	r3, r3, r2
 80035d0:	18ed      	addgt	r5, r5, r3
 80035d2:	f04f 0900 	mov.w	r9, #0
 80035d6:	341a      	adds	r4, #26
 80035d8:	454d      	cmp	r5, r9
 80035da:	d11b      	bne.n	8003614 <_printf_common+0xd8>
 80035dc:	2000      	movs	r0, #0
 80035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e2:	2301      	movs	r3, #1
 80035e4:	4652      	mov	r2, sl
 80035e6:	4639      	mov	r1, r7
 80035e8:	4630      	mov	r0, r6
 80035ea:	47c0      	blx	r8
 80035ec:	3001      	adds	r0, #1
 80035ee:	d103      	bne.n	80035f8 <_printf_common+0xbc>
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f8:	3501      	adds	r5, #1
 80035fa:	e7c2      	b.n	8003582 <_printf_common+0x46>
 80035fc:	18e1      	adds	r1, r4, r3
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	2030      	movs	r0, #48	; 0x30
 8003602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003606:	4422      	add	r2, r4
 8003608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800360c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003610:	3302      	adds	r3, #2
 8003612:	e7c4      	b.n	800359e <_printf_common+0x62>
 8003614:	2301      	movs	r3, #1
 8003616:	4622      	mov	r2, r4
 8003618:	4639      	mov	r1, r7
 800361a:	4630      	mov	r0, r6
 800361c:	47c0      	blx	r8
 800361e:	3001      	adds	r0, #1
 8003620:	d0e6      	beq.n	80035f0 <_printf_common+0xb4>
 8003622:	f109 0901 	add.w	r9, r9, #1
 8003626:	e7d7      	b.n	80035d8 <_printf_common+0x9c>

08003628 <_printf_i>:
 8003628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800362c:	4617      	mov	r7, r2
 800362e:	7e0a      	ldrb	r2, [r1, #24]
 8003630:	b085      	sub	sp, #20
 8003632:	2a6e      	cmp	r2, #110	; 0x6e
 8003634:	4698      	mov	r8, r3
 8003636:	4606      	mov	r6, r0
 8003638:	460c      	mov	r4, r1
 800363a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800363c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003640:	f000 80bc 	beq.w	80037bc <_printf_i+0x194>
 8003644:	d81a      	bhi.n	800367c <_printf_i+0x54>
 8003646:	2a63      	cmp	r2, #99	; 0x63
 8003648:	d02e      	beq.n	80036a8 <_printf_i+0x80>
 800364a:	d80a      	bhi.n	8003662 <_printf_i+0x3a>
 800364c:	2a00      	cmp	r2, #0
 800364e:	f000 80c8 	beq.w	80037e2 <_printf_i+0x1ba>
 8003652:	2a58      	cmp	r2, #88	; 0x58
 8003654:	f000 808a 	beq.w	800376c <_printf_i+0x144>
 8003658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800365c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003660:	e02a      	b.n	80036b8 <_printf_i+0x90>
 8003662:	2a64      	cmp	r2, #100	; 0x64
 8003664:	d001      	beq.n	800366a <_printf_i+0x42>
 8003666:	2a69      	cmp	r2, #105	; 0x69
 8003668:	d1f6      	bne.n	8003658 <_printf_i+0x30>
 800366a:	6821      	ldr	r1, [r4, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003672:	d023      	beq.n	80036bc <_printf_i+0x94>
 8003674:	1d11      	adds	r1, r2, #4
 8003676:	6019      	str	r1, [r3, #0]
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	e027      	b.n	80036cc <_printf_i+0xa4>
 800367c:	2a73      	cmp	r2, #115	; 0x73
 800367e:	f000 80b4 	beq.w	80037ea <_printf_i+0x1c2>
 8003682:	d808      	bhi.n	8003696 <_printf_i+0x6e>
 8003684:	2a6f      	cmp	r2, #111	; 0x6f
 8003686:	d02a      	beq.n	80036de <_printf_i+0xb6>
 8003688:	2a70      	cmp	r2, #112	; 0x70
 800368a:	d1e5      	bne.n	8003658 <_printf_i+0x30>
 800368c:	680a      	ldr	r2, [r1, #0]
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	600a      	str	r2, [r1, #0]
 8003694:	e003      	b.n	800369e <_printf_i+0x76>
 8003696:	2a75      	cmp	r2, #117	; 0x75
 8003698:	d021      	beq.n	80036de <_printf_i+0xb6>
 800369a:	2a78      	cmp	r2, #120	; 0x78
 800369c:	d1dc      	bne.n	8003658 <_printf_i+0x30>
 800369e:	2278      	movs	r2, #120	; 0x78
 80036a0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80036a4:	496e      	ldr	r1, [pc, #440]	; (8003860 <_printf_i+0x238>)
 80036a6:	e064      	b.n	8003772 <_printf_i+0x14a>
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80036ae:	1d11      	adds	r1, r2, #4
 80036b0:	6019      	str	r1, [r3, #0]
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0a3      	b.n	8003804 <_printf_i+0x1dc>
 80036bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80036c0:	f102 0104 	add.w	r1, r2, #4
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	d0d7      	beq.n	8003678 <_printf_i+0x50>
 80036c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da03      	bge.n	80036d8 <_printf_i+0xb0>
 80036d0:	222d      	movs	r2, #45	; 0x2d
 80036d2:	425b      	negs	r3, r3
 80036d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036d8:	4962      	ldr	r1, [pc, #392]	; (8003864 <_printf_i+0x23c>)
 80036da:	220a      	movs	r2, #10
 80036dc:	e017      	b.n	800370e <_printf_i+0xe6>
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036e6:	d003      	beq.n	80036f0 <_printf_i+0xc8>
 80036e8:	1d08      	adds	r0, r1, #4
 80036ea:	6018      	str	r0, [r3, #0]
 80036ec:	680b      	ldr	r3, [r1, #0]
 80036ee:	e006      	b.n	80036fe <_printf_i+0xd6>
 80036f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036f4:	f101 0004 	add.w	r0, r1, #4
 80036f8:	6018      	str	r0, [r3, #0]
 80036fa:	d0f7      	beq.n	80036ec <_printf_i+0xc4>
 80036fc:	880b      	ldrh	r3, [r1, #0]
 80036fe:	4959      	ldr	r1, [pc, #356]	; (8003864 <_printf_i+0x23c>)
 8003700:	2a6f      	cmp	r2, #111	; 0x6f
 8003702:	bf14      	ite	ne
 8003704:	220a      	movne	r2, #10
 8003706:	2208      	moveq	r2, #8
 8003708:	2000      	movs	r0, #0
 800370a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800370e:	6865      	ldr	r5, [r4, #4]
 8003710:	60a5      	str	r5, [r4, #8]
 8003712:	2d00      	cmp	r5, #0
 8003714:	f2c0 809c 	blt.w	8003850 <_printf_i+0x228>
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	f020 0004 	bic.w	r0, r0, #4
 800371e:	6020      	str	r0, [r4, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13f      	bne.n	80037a4 <_printf_i+0x17c>
 8003724:	2d00      	cmp	r5, #0
 8003726:	f040 8095 	bne.w	8003854 <_printf_i+0x22c>
 800372a:	4675      	mov	r5, lr
 800372c:	2a08      	cmp	r2, #8
 800372e:	d10b      	bne.n	8003748 <_printf_i+0x120>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	07da      	lsls	r2, r3, #31
 8003734:	d508      	bpl.n	8003748 <_printf_i+0x120>
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	6862      	ldr	r2, [r4, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	bfde      	ittt	le
 800373e:	2330      	movle	r3, #48	; 0x30
 8003740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003744:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003748:	ebae 0305 	sub.w	r3, lr, r5
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	f8cd 8000 	str.w	r8, [sp]
 8003752:	463b      	mov	r3, r7
 8003754:	aa03      	add	r2, sp, #12
 8003756:	4621      	mov	r1, r4
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff feef 	bl	800353c <_printf_common>
 800375e:	3001      	adds	r0, #1
 8003760:	d155      	bne.n	800380e <_printf_i+0x1e6>
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	b005      	add	sp, #20
 8003768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800376c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003770:	493c      	ldr	r1, [pc, #240]	; (8003864 <_printf_i+0x23c>)
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	f012 0f80 	tst.w	r2, #128	; 0x80
 800377a:	f100 0504 	add.w	r5, r0, #4
 800377e:	601d      	str	r5, [r3, #0]
 8003780:	d001      	beq.n	8003786 <_printf_i+0x15e>
 8003782:	6803      	ldr	r3, [r0, #0]
 8003784:	e002      	b.n	800378c <_printf_i+0x164>
 8003786:	0655      	lsls	r5, r2, #25
 8003788:	d5fb      	bpl.n	8003782 <_printf_i+0x15a>
 800378a:	8803      	ldrh	r3, [r0, #0]
 800378c:	07d0      	lsls	r0, r2, #31
 800378e:	bf44      	itt	mi
 8003790:	f042 0220 	orrmi.w	r2, r2, #32
 8003794:	6022      	strmi	r2, [r4, #0]
 8003796:	b91b      	cbnz	r3, 80037a0 <_printf_i+0x178>
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	f022 0220 	bic.w	r2, r2, #32
 800379e:	6022      	str	r2, [r4, #0]
 80037a0:	2210      	movs	r2, #16
 80037a2:	e7b1      	b.n	8003708 <_printf_i+0xe0>
 80037a4:	4675      	mov	r5, lr
 80037a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80037aa:	fb02 3310 	mls	r3, r2, r0, r3
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037b4:	4603      	mov	r3, r0
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1f5      	bne.n	80037a6 <_printf_i+0x17e>
 80037ba:	e7b7      	b.n	800372c <_printf_i+0x104>
 80037bc:	6808      	ldr	r0, [r1, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6949      	ldr	r1, [r1, #20]
 80037c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80037c6:	d004      	beq.n	80037d2 <_printf_i+0x1aa>
 80037c8:	1d10      	adds	r0, r2, #4
 80037ca:	6018      	str	r0, [r3, #0]
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	6019      	str	r1, [r3, #0]
 80037d0:	e007      	b.n	80037e2 <_printf_i+0x1ba>
 80037d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037d6:	f102 0004 	add.w	r0, r2, #4
 80037da:	6018      	str	r0, [r3, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	d0f6      	beq.n	80037ce <_printf_i+0x1a6>
 80037e0:	8019      	strh	r1, [r3, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	4675      	mov	r5, lr
 80037e8:	e7b1      	b.n	800374e <_printf_i+0x126>
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	1d11      	adds	r1, r2, #4
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	6815      	ldr	r5, [r2, #0]
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7fc fcea 	bl	80001d0 <memchr>
 80037fc:	b108      	cbz	r0, 8003802 <_printf_i+0x1da>
 80037fe:	1b40      	subs	r0, r0, r5
 8003800:	6060      	str	r0, [r4, #4]
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	6123      	str	r3, [r4, #16]
 8003806:	2300      	movs	r3, #0
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380c:	e79f      	b.n	800374e <_printf_i+0x126>
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	462a      	mov	r2, r5
 8003812:	4639      	mov	r1, r7
 8003814:	4630      	mov	r0, r6
 8003816:	47c0      	blx	r8
 8003818:	3001      	adds	r0, #1
 800381a:	d0a2      	beq.n	8003762 <_printf_i+0x13a>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	079b      	lsls	r3, r3, #30
 8003820:	d507      	bpl.n	8003832 <_printf_i+0x20a>
 8003822:	2500      	movs	r5, #0
 8003824:	f104 0919 	add.w	r9, r4, #25
 8003828:	68e3      	ldr	r3, [r4, #12]
 800382a:	9a03      	ldr	r2, [sp, #12]
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	429d      	cmp	r5, r3
 8003830:	db05      	blt.n	800383e <_printf_i+0x216>
 8003832:	68e0      	ldr	r0, [r4, #12]
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	4298      	cmp	r0, r3
 8003838:	bfb8      	it	lt
 800383a:	4618      	movlt	r0, r3
 800383c:	e793      	b.n	8003766 <_printf_i+0x13e>
 800383e:	2301      	movs	r3, #1
 8003840:	464a      	mov	r2, r9
 8003842:	4639      	mov	r1, r7
 8003844:	4630      	mov	r0, r6
 8003846:	47c0      	blx	r8
 8003848:	3001      	adds	r0, #1
 800384a:	d08a      	beq.n	8003762 <_printf_i+0x13a>
 800384c:	3501      	adds	r5, #1
 800384e:	e7eb      	b.n	8003828 <_printf_i+0x200>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1a7      	bne.n	80037a4 <_printf_i+0x17c>
 8003854:	780b      	ldrb	r3, [r1, #0]
 8003856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800385a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800385e:	e765      	b.n	800372c <_printf_i+0x104>
 8003860:	08004026 	.word	0x08004026
 8003864:	08004015 	.word	0x08004015

08003868 <_sbrk_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4c06      	ldr	r4, [pc, #24]	; (8003884 <_sbrk_r+0x1c>)
 800386c:	2300      	movs	r3, #0
 800386e:	4605      	mov	r5, r0
 8003870:	4608      	mov	r0, r1
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	f7ff fa8c 	bl	8002d90 <_sbrk>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_sbrk_r+0x1a>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	b103      	cbz	r3, 8003882 <_sbrk_r+0x1a>
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	200001a8 	.word	0x200001a8

08003888 <__sread>:
 8003888:	b510      	push	{r4, lr}
 800388a:	460c      	mov	r4, r1
 800388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003890:	f000 faa4 	bl	8003ddc <_read_r>
 8003894:	2800      	cmp	r0, #0
 8003896:	bfab      	itete	ge
 8003898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800389a:	89a3      	ldrhlt	r3, [r4, #12]
 800389c:	181b      	addge	r3, r3, r0
 800389e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038a2:	bfac      	ite	ge
 80038a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038a6:	81a3      	strhlt	r3, [r4, #12]
 80038a8:	bd10      	pop	{r4, pc}

080038aa <__swrite>:
 80038aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ae:	461f      	mov	r7, r3
 80038b0:	898b      	ldrh	r3, [r1, #12]
 80038b2:	05db      	lsls	r3, r3, #23
 80038b4:	4605      	mov	r5, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	4616      	mov	r6, r2
 80038ba:	d505      	bpl.n	80038c8 <__swrite+0x1e>
 80038bc:	2302      	movs	r3, #2
 80038be:	2200      	movs	r2, #0
 80038c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c4:	f000 f9b8 	bl	8003c38 <_lseek_r>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	4632      	mov	r2, r6
 80038d6:	463b      	mov	r3, r7
 80038d8:	4628      	mov	r0, r5
 80038da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038de:	f000 b869 	b.w	80039b4 <_write_r>

080038e2 <__sseek>:
 80038e2:	b510      	push	{r4, lr}
 80038e4:	460c      	mov	r4, r1
 80038e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ea:	f000 f9a5 	bl	8003c38 <_lseek_r>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	bf15      	itete	ne
 80038f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80038f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038fe:	81a3      	strheq	r3, [r4, #12]
 8003900:	bf18      	it	ne
 8003902:	81a3      	strhne	r3, [r4, #12]
 8003904:	bd10      	pop	{r4, pc}

08003906 <__sclose>:
 8003906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390a:	f000 b8d3 	b.w	8003ab4 <_close_r>
	...

08003910 <__swbuf_r>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	460e      	mov	r6, r1
 8003914:	4614      	mov	r4, r2
 8003916:	4605      	mov	r5, r0
 8003918:	b118      	cbz	r0, 8003922 <__swbuf_r+0x12>
 800391a:	6983      	ldr	r3, [r0, #24]
 800391c:	b90b      	cbnz	r3, 8003922 <__swbuf_r+0x12>
 800391e:	f7ff fbe5 	bl	80030ec <__sinit>
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <__swbuf_r+0x98>)
 8003924:	429c      	cmp	r4, r3
 8003926:	d12a      	bne.n	800397e <__swbuf_r+0x6e>
 8003928:	686c      	ldr	r4, [r5, #4]
 800392a:	69a3      	ldr	r3, [r4, #24]
 800392c:	60a3      	str	r3, [r4, #8]
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	071a      	lsls	r2, r3, #28
 8003932:	d52e      	bpl.n	8003992 <__swbuf_r+0x82>
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	b363      	cbz	r3, 8003992 <__swbuf_r+0x82>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	1ac0      	subs	r0, r0, r3
 800393e:	6963      	ldr	r3, [r4, #20]
 8003940:	b2f6      	uxtb	r6, r6
 8003942:	4298      	cmp	r0, r3
 8003944:	4637      	mov	r7, r6
 8003946:	db04      	blt.n	8003952 <__swbuf_r+0x42>
 8003948:	4621      	mov	r1, r4
 800394a:	4628      	mov	r0, r5
 800394c:	f000 f94a 	bl	8003be4 <_fflush_r>
 8003950:	bb28      	cbnz	r0, 800399e <__swbuf_r+0x8e>
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	60a3      	str	r3, [r4, #8]
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	6022      	str	r2, [r4, #0]
 800395e:	701e      	strb	r6, [r3, #0]
 8003960:	6963      	ldr	r3, [r4, #20]
 8003962:	3001      	adds	r0, #1
 8003964:	4298      	cmp	r0, r3
 8003966:	d004      	beq.n	8003972 <__swbuf_r+0x62>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	07db      	lsls	r3, r3, #31
 800396c:	d519      	bpl.n	80039a2 <__swbuf_r+0x92>
 800396e:	2e0a      	cmp	r6, #10
 8003970:	d117      	bne.n	80039a2 <__swbuf_r+0x92>
 8003972:	4621      	mov	r1, r4
 8003974:	4628      	mov	r0, r5
 8003976:	f000 f935 	bl	8003be4 <_fflush_r>
 800397a:	b190      	cbz	r0, 80039a2 <__swbuf_r+0x92>
 800397c:	e00f      	b.n	800399e <__swbuf_r+0x8e>
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <__swbuf_r+0x9c>)
 8003980:	429c      	cmp	r4, r3
 8003982:	d101      	bne.n	8003988 <__swbuf_r+0x78>
 8003984:	68ac      	ldr	r4, [r5, #8]
 8003986:	e7d0      	b.n	800392a <__swbuf_r+0x1a>
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <__swbuf_r+0xa0>)
 800398a:	429c      	cmp	r4, r3
 800398c:	bf08      	it	eq
 800398e:	68ec      	ldreq	r4, [r5, #12]
 8003990:	e7cb      	b.n	800392a <__swbuf_r+0x1a>
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f81f 	bl	80039d8 <__swsetup_r>
 800399a:	2800      	cmp	r0, #0
 800399c:	d0cc      	beq.n	8003938 <__swbuf_r+0x28>
 800399e:	f04f 37ff 	mov.w	r7, #4294967295
 80039a2:	4638      	mov	r0, r7
 80039a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	08003fc4 	.word	0x08003fc4
 80039ac:	08003fe4 	.word	0x08003fe4
 80039b0:	08003fa4 	.word	0x08003fa4

080039b4 <_write_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4c07      	ldr	r4, [pc, #28]	; (80039d4 <_write_r+0x20>)
 80039b8:	4605      	mov	r5, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	6022      	str	r2, [r4, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7ff f9d6 	bl	8002d74 <_write>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d102      	bne.n	80039d2 <_write_r+0x1e>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	b103      	cbz	r3, 80039d2 <_write_r+0x1e>
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	200001a8 	.word	0x200001a8

080039d8 <__swsetup_r>:
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <__swsetup_r+0xcc>)
 80039da:	b570      	push	{r4, r5, r6, lr}
 80039dc:	681d      	ldr	r5, [r3, #0]
 80039de:	4606      	mov	r6, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	b125      	cbz	r5, 80039ee <__swsetup_r+0x16>
 80039e4:	69ab      	ldr	r3, [r5, #24]
 80039e6:	b913      	cbnz	r3, 80039ee <__swsetup_r+0x16>
 80039e8:	4628      	mov	r0, r5
 80039ea:	f7ff fb7f 	bl	80030ec <__sinit>
 80039ee:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <__swsetup_r+0xd0>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d10f      	bne.n	8003a14 <__swsetup_r+0x3c>
 80039f4:	686c      	ldr	r4, [r5, #4]
 80039f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	0715      	lsls	r5, r2, #28
 80039fe:	d42c      	bmi.n	8003a5a <__swsetup_r+0x82>
 8003a00:	06d0      	lsls	r0, r2, #27
 8003a02:	d411      	bmi.n	8003a28 <__swsetup_r+0x50>
 8003a04:	2209      	movs	r2, #9
 8003a06:	6032      	str	r2, [r6, #0]
 8003a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <__swsetup_r+0xd4>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d101      	bne.n	8003a1e <__swsetup_r+0x46>
 8003a1a:	68ac      	ldr	r4, [r5, #8]
 8003a1c:	e7eb      	b.n	80039f6 <__swsetup_r+0x1e>
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <__swsetup_r+0xd8>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	bf08      	it	eq
 8003a24:	68ec      	ldreq	r4, [r5, #12]
 8003a26:	e7e6      	b.n	80039f6 <__swsetup_r+0x1e>
 8003a28:	0751      	lsls	r1, r2, #29
 8003a2a:	d512      	bpl.n	8003a52 <__swsetup_r+0x7a>
 8003a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a2e:	b141      	cbz	r1, 8003a42 <__swsetup_r+0x6a>
 8003a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a34:	4299      	cmp	r1, r3
 8003a36:	d002      	beq.n	8003a3e <__swsetup_r+0x66>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f000 f981 	bl	8003d40 <_free_r>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6363      	str	r3, [r4, #52]	; 0x34
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6063      	str	r3, [r4, #4]
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	b94b      	cbnz	r3, 8003a72 <__swsetup_r+0x9a>
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a68:	d003      	beq.n	8003a72 <__swsetup_r+0x9a>
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 f919 	bl	8003ca4 <__smakebuf_r>
 8003a72:	89a2      	ldrh	r2, [r4, #12]
 8003a74:	f012 0301 	ands.w	r3, r2, #1
 8003a78:	d00c      	beq.n	8003a94 <__swsetup_r+0xbc>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	6963      	ldr	r3, [r4, #20]
 8003a80:	425b      	negs	r3, r3
 8003a82:	61a3      	str	r3, [r4, #24]
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	b953      	cbnz	r3, 8003a9e <__swsetup_r+0xc6>
 8003a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a90:	d1ba      	bne.n	8003a08 <__swsetup_r+0x30>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	0792      	lsls	r2, r2, #30
 8003a96:	bf58      	it	pl
 8003a98:	6963      	ldrpl	r3, [r4, #20]
 8003a9a:	60a3      	str	r3, [r4, #8]
 8003a9c:	e7f2      	b.n	8003a84 <__swsetup_r+0xac>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e7f7      	b.n	8003a92 <__swsetup_r+0xba>
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c
 8003aa8:	08003fc4 	.word	0x08003fc4
 8003aac:	08003fe4 	.word	0x08003fe4
 8003ab0:	08003fa4 	.word	0x08003fa4

08003ab4 <_close_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4c06      	ldr	r4, [pc, #24]	; (8003ad0 <_close_r+0x1c>)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4605      	mov	r5, r0
 8003abc:	4608      	mov	r0, r1
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	f7ff f980 	bl	8002dc4 <_close>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_close_r+0x1a>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_close_r+0x1a>
 8003acc:	602b      	str	r3, [r5, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	200001a8 	.word	0x200001a8

08003ad4 <__sflush_r>:
 8003ad4:	898a      	ldrh	r2, [r1, #12]
 8003ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ada:	4605      	mov	r5, r0
 8003adc:	0710      	lsls	r0, r2, #28
 8003ade:	460c      	mov	r4, r1
 8003ae0:	d45a      	bmi.n	8003b98 <__sflush_r+0xc4>
 8003ae2:	684b      	ldr	r3, [r1, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dc05      	bgt.n	8003af4 <__sflush_r+0x20>
 8003ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dc02      	bgt.n	8003af4 <__sflush_r+0x20>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	d0f9      	beq.n	8003aee <__sflush_r+0x1a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b00:	682f      	ldr	r7, [r5, #0]
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	d033      	beq.n	8003b6e <__sflush_r+0x9a>
 8003b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	075a      	lsls	r2, r3, #29
 8003b0c:	d505      	bpl.n	8003b1a <__sflush_r+0x46>
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	1ac0      	subs	r0, r0, r3
 8003b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b14:	b10b      	cbz	r3, 8003b1a <__sflush_r+0x46>
 8003b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b18:	1ac0      	subs	r0, r0, r3
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b20:	6a21      	ldr	r1, [r4, #32]
 8003b22:	4628      	mov	r0, r5
 8003b24:	47b0      	blx	r6
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	d106      	bne.n	8003b3a <__sflush_r+0x66>
 8003b2c:	6829      	ldr	r1, [r5, #0]
 8003b2e:	291d      	cmp	r1, #29
 8003b30:	d84b      	bhi.n	8003bca <__sflush_r+0xf6>
 8003b32:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <__sflush_r+0x10c>)
 8003b34:	40ca      	lsrs	r2, r1
 8003b36:	07d6      	lsls	r6, r2, #31
 8003b38:	d547      	bpl.n	8003bca <__sflush_r+0xf6>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	6062      	str	r2, [r4, #4]
 8003b3e:	04d9      	lsls	r1, r3, #19
 8003b40:	6922      	ldr	r2, [r4, #16]
 8003b42:	6022      	str	r2, [r4, #0]
 8003b44:	d504      	bpl.n	8003b50 <__sflush_r+0x7c>
 8003b46:	1c42      	adds	r2, r0, #1
 8003b48:	d101      	bne.n	8003b4e <__sflush_r+0x7a>
 8003b4a:	682b      	ldr	r3, [r5, #0]
 8003b4c:	b903      	cbnz	r3, 8003b50 <__sflush_r+0x7c>
 8003b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8003b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b52:	602f      	str	r7, [r5, #0]
 8003b54:	2900      	cmp	r1, #0
 8003b56:	d0ca      	beq.n	8003aee <__sflush_r+0x1a>
 8003b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d002      	beq.n	8003b66 <__sflush_r+0x92>
 8003b60:	4628      	mov	r0, r5
 8003b62:	f000 f8ed 	bl	8003d40 <_free_r>
 8003b66:	2000      	movs	r0, #0
 8003b68:	6360      	str	r0, [r4, #52]	; 0x34
 8003b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b6e:	6a21      	ldr	r1, [r4, #32]
 8003b70:	2301      	movs	r3, #1
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b0      	blx	r6
 8003b76:	1c41      	adds	r1, r0, #1
 8003b78:	d1c6      	bne.n	8003b08 <__sflush_r+0x34>
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0c3      	beq.n	8003b08 <__sflush_r+0x34>
 8003b80:	2b1d      	cmp	r3, #29
 8003b82:	d001      	beq.n	8003b88 <__sflush_r+0xb4>
 8003b84:	2b16      	cmp	r3, #22
 8003b86:	d101      	bne.n	8003b8c <__sflush_r+0xb8>
 8003b88:	602f      	str	r7, [r5, #0]
 8003b8a:	e7b0      	b.n	8003aee <__sflush_r+0x1a>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	690f      	ldr	r7, [r1, #16]
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d0a7      	beq.n	8003aee <__sflush_r+0x1a>
 8003b9e:	0793      	lsls	r3, r2, #30
 8003ba0:	680e      	ldr	r6, [r1, #0]
 8003ba2:	bf08      	it	eq
 8003ba4:	694b      	ldreq	r3, [r1, #20]
 8003ba6:	600f      	str	r7, [r1, #0]
 8003ba8:	bf18      	it	ne
 8003baa:	2300      	movne	r3, #0
 8003bac:	eba6 0807 	sub.w	r8, r6, r7
 8003bb0:	608b      	str	r3, [r1, #8]
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	dd9a      	ble.n	8003aee <__sflush_r+0x1a>
 8003bb8:	4643      	mov	r3, r8
 8003bba:	463a      	mov	r2, r7
 8003bbc:	6a21      	ldr	r1, [r4, #32]
 8003bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b0      	blx	r6
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	dc07      	bgt.n	8003bd8 <__sflush_r+0x104>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	4407      	add	r7, r0
 8003bda:	eba8 0800 	sub.w	r8, r8, r0
 8003bde:	e7e8      	b.n	8003bb2 <__sflush_r+0xde>
 8003be0:	20400001 	.word	0x20400001

08003be4 <_fflush_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b1db      	cbz	r3, 8003c26 <_fflush_r+0x42>
 8003bee:	b118      	cbz	r0, 8003bf8 <_fflush_r+0x14>
 8003bf0:	6983      	ldr	r3, [r0, #24]
 8003bf2:	b90b      	cbnz	r3, 8003bf8 <_fflush_r+0x14>
 8003bf4:	f7ff fa7a 	bl	80030ec <__sinit>
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <_fflush_r+0x48>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d109      	bne.n	8003c12 <_fflush_r+0x2e>
 8003bfe:	686c      	ldr	r4, [r5, #4]
 8003c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c04:	b17b      	cbz	r3, 8003c26 <_fflush_r+0x42>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c0e:	f7ff bf61 	b.w	8003ad4 <__sflush_r>
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_fflush_r+0x4c>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d101      	bne.n	8003c1c <_fflush_r+0x38>
 8003c18:	68ac      	ldr	r4, [r5, #8]
 8003c1a:	e7f1      	b.n	8003c00 <_fflush_r+0x1c>
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <_fflush_r+0x50>)
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	bf08      	it	eq
 8003c22:	68ec      	ldreq	r4, [r5, #12]
 8003c24:	e7ec      	b.n	8003c00 <_fflush_r+0x1c>
 8003c26:	2000      	movs	r0, #0
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08003fc4 	.word	0x08003fc4
 8003c30:	08003fe4 	.word	0x08003fe4
 8003c34:	08003fa4 	.word	0x08003fa4

08003c38 <_lseek_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4c07      	ldr	r4, [pc, #28]	; (8003c58 <_lseek_r+0x20>)
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	6022      	str	r2, [r4, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7ff f8c8 	bl	8002ddc <_lseek>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_lseek_r+0x1e>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_lseek_r+0x1e>
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	200001a8 	.word	0x200001a8

08003c5c <__swhatbuf_r>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	460e      	mov	r6, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	2900      	cmp	r1, #0
 8003c66:	b090      	sub	sp, #64	; 0x40
 8003c68:	4614      	mov	r4, r2
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	da07      	bge.n	8003c7e <__swhatbuf_r+0x22>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	89b3      	ldrh	r3, [r6, #12]
 8003c74:	061a      	lsls	r2, r3, #24
 8003c76:	d410      	bmi.n	8003c9a <__swhatbuf_r+0x3e>
 8003c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7c:	e00e      	b.n	8003c9c <__swhatbuf_r+0x40>
 8003c7e:	aa01      	add	r2, sp, #4
 8003c80:	f000 f8be 	bl	8003e00 <_fstat_r>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	dbf2      	blt.n	8003c6e <__swhatbuf_r+0x12>
 8003c88:	9a02      	ldr	r2, [sp, #8]
 8003c8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c92:	425a      	negs	r2, r3
 8003c94:	415a      	adcs	r2, r3
 8003c96:	602a      	str	r2, [r5, #0]
 8003c98:	e7ee      	b.n	8003c78 <__swhatbuf_r+0x1c>
 8003c9a:	2340      	movs	r3, #64	; 0x40
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	b010      	add	sp, #64	; 0x40
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}

08003ca4 <__smakebuf_r>:
 8003ca4:	898b      	ldrh	r3, [r1, #12]
 8003ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ca8:	079d      	lsls	r5, r3, #30
 8003caa:	4606      	mov	r6, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	d507      	bpl.n	8003cc0 <__smakebuf_r+0x1c>
 8003cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	6123      	str	r3, [r4, #16]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	6163      	str	r3, [r4, #20]
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	ab01      	add	r3, sp, #4
 8003cc2:	466a      	mov	r2, sp
 8003cc4:	f7ff ffca 	bl	8003c5c <__swhatbuf_r>
 8003cc8:	9900      	ldr	r1, [sp, #0]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f7ff fa97 	bl	8003200 <_malloc_r>
 8003cd2:	b948      	cbnz	r0, 8003ce8 <__smakebuf_r+0x44>
 8003cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd8:	059a      	lsls	r2, r3, #22
 8003cda:	d4ef      	bmi.n	8003cbc <__smakebuf_r+0x18>
 8003cdc:	f023 0303 	bic.w	r3, r3, #3
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	e7e3      	b.n	8003cb0 <__smakebuf_r+0xc>
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <__smakebuf_r+0x7c>)
 8003cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	6020      	str	r0, [r4, #0]
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	9b00      	ldr	r3, [sp, #0]
 8003cf8:	6163      	str	r3, [r4, #20]
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	6120      	str	r0, [r4, #16]
 8003cfe:	b15b      	cbz	r3, 8003d18 <__smakebuf_r+0x74>
 8003d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f88d 	bl	8003e24 <_isatty_r>
 8003d0a:	b128      	cbz	r0, 8003d18 <__smakebuf_r+0x74>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	431d      	orrs	r5, r3
 8003d1c:	81a5      	strh	r5, [r4, #12]
 8003d1e:	e7cd      	b.n	8003cbc <__smakebuf_r+0x18>
 8003d20:	0800306d 	.word	0x0800306d

08003d24 <memcpy>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	1e43      	subs	r3, r0, #1
 8003d28:	440a      	add	r2, r1
 8003d2a:	4291      	cmp	r1, r2
 8003d2c:	d100      	bne.n	8003d30 <memcpy+0xc>
 8003d2e:	bd10      	pop	{r4, pc}
 8003d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d38:	e7f7      	b.n	8003d2a <memcpy+0x6>

08003d3a <__malloc_lock>:
 8003d3a:	4770      	bx	lr

08003d3c <__malloc_unlock>:
 8003d3c:	4770      	bx	lr
	...

08003d40 <_free_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4605      	mov	r5, r0
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d045      	beq.n	8003dd4 <_free_r+0x94>
 8003d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4c:	1f0c      	subs	r4, r1, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfb8      	it	lt
 8003d52:	18e4      	addlt	r4, r4, r3
 8003d54:	f7ff fff1 	bl	8003d3a <__malloc_lock>
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <_free_r+0x98>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	b933      	cbnz	r3, 8003d6e <_free_r+0x2e>
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	6014      	str	r4, [r2, #0]
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6a:	f7ff bfe7 	b.w	8003d3c <__malloc_unlock>
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	d90c      	bls.n	8003d8c <_free_r+0x4c>
 8003d72:	6821      	ldr	r1, [r4, #0]
 8003d74:	1862      	adds	r2, r4, r1
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf04      	itt	eq
 8003d7a:	681a      	ldreq	r2, [r3, #0]
 8003d7c:	685b      	ldreq	r3, [r3, #4]
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	bf04      	itt	eq
 8003d82:	1852      	addeq	r2, r2, r1
 8003d84:	6022      	streq	r2, [r4, #0]
 8003d86:	6004      	str	r4, [r0, #0]
 8003d88:	e7ec      	b.n	8003d64 <_free_r+0x24>
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	b10a      	cbz	r2, 8003d94 <_free_r+0x54>
 8003d90:	42a2      	cmp	r2, r4
 8003d92:	d9fa      	bls.n	8003d8a <_free_r+0x4a>
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	1858      	adds	r0, r3, r1
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d10b      	bne.n	8003db4 <_free_r+0x74>
 8003d9c:	6820      	ldr	r0, [r4, #0]
 8003d9e:	4401      	add	r1, r0
 8003da0:	1858      	adds	r0, r3, r1
 8003da2:	4282      	cmp	r2, r0
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	d1dd      	bne.n	8003d64 <_free_r+0x24>
 8003da8:	6810      	ldr	r0, [r2, #0]
 8003daa:	6852      	ldr	r2, [r2, #4]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	4401      	add	r1, r0
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	e7d7      	b.n	8003d64 <_free_r+0x24>
 8003db4:	d902      	bls.n	8003dbc <_free_r+0x7c>
 8003db6:	230c      	movs	r3, #12
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	e7d3      	b.n	8003d64 <_free_r+0x24>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	1821      	adds	r1, r4, r0
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	bf04      	itt	eq
 8003dc4:	6811      	ldreq	r1, [r2, #0]
 8003dc6:	6852      	ldreq	r2, [r2, #4]
 8003dc8:	6062      	str	r2, [r4, #4]
 8003dca:	bf04      	itt	eq
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	605c      	str	r4, [r3, #4]
 8003dd2:	e7c7      	b.n	8003d64 <_free_r+0x24>
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000c4 	.word	0x200000c4

08003ddc <_read_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4c07      	ldr	r4, [pc, #28]	; (8003dfc <_read_r+0x20>)
 8003de0:	4605      	mov	r5, r0
 8003de2:	4608      	mov	r0, r1
 8003de4:	4611      	mov	r1, r2
 8003de6:	2200      	movs	r2, #0
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7fe ffb4 	bl	8002d58 <_read>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_read_r+0x1e>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_read_r+0x1e>
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	200001a8 	.word	0x200001a8

08003e00 <_fstat_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4c07      	ldr	r4, [pc, #28]	; (8003e20 <_fstat_r+0x20>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4605      	mov	r5, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	f7fe ffdd 	bl	8002dcc <_fstat>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d102      	bne.n	8003e1c <_fstat_r+0x1c>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	b103      	cbz	r3, 8003e1c <_fstat_r+0x1c>
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	200001a8 	.word	0x200001a8

08003e24 <_isatty_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4c06      	ldr	r4, [pc, #24]	; (8003e40 <_isatty_r+0x1c>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	f7fe ffd2 	bl	8002dd8 <_isatty>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_isatty_r+0x1a>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_isatty_r+0x1a>
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	200001a8 	.word	0x200001a8

08003e44 <abort>:
 8003e44:	b508      	push	{r3, lr}
 8003e46:	2006      	movs	r0, #6
 8003e48:	f000 f82c 	bl	8003ea4 <raise>
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7fe ff7d 	bl	8002d4c <_exit>

08003e52 <_raise_r>:
 8003e52:	291f      	cmp	r1, #31
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4604      	mov	r4, r0
 8003e58:	460d      	mov	r5, r1
 8003e5a:	d904      	bls.n	8003e66 <_raise_r+0x14>
 8003e5c:	2316      	movs	r3, #22
 8003e5e:	6003      	str	r3, [r0, #0]
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e68:	b112      	cbz	r2, 8003e70 <_raise_r+0x1e>
 8003e6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e6e:	b94b      	cbnz	r3, 8003e84 <_raise_r+0x32>
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 f831 	bl	8003ed8 <_getpid_r>
 8003e76:	462a      	mov	r2, r5
 8003e78:	4601      	mov	r1, r0
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e80:	f000 b818 	b.w	8003eb4 <_kill_r>
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d00a      	beq.n	8003e9e <_raise_r+0x4c>
 8003e88:	1c59      	adds	r1, r3, #1
 8003e8a:	d103      	bne.n	8003e94 <_raise_r+0x42>
 8003e8c:	2316      	movs	r3, #22
 8003e8e:	6003      	str	r3, [r0, #0]
 8003e90:	2001      	movs	r0, #1
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	2400      	movs	r4, #0
 8003e96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	4798      	blx	r3
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ea4 <raise>:
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <raise+0xc>)
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	f7ff bfd2 	b.w	8003e52 <_raise_r>
 8003eae:	bf00      	nop
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <_kill_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4c07      	ldr	r4, [pc, #28]	; (8003ed4 <_kill_r+0x20>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4605      	mov	r5, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	f7fe ff3b 	bl	8002d3c <_kill>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d102      	bne.n	8003ed0 <_kill_r+0x1c>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	b103      	cbz	r3, 8003ed0 <_kill_r+0x1c>
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200001a8 	.word	0x200001a8

08003ed8 <_getpid_r>:
 8003ed8:	f7fe bf2e 	b.w	8002d38 <_getpid>

08003edc <_init>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_fini>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr
